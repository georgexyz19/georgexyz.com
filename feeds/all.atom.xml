<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>George Zhang</title><link href="https://www.georgexyz.com/" rel="alternate"></link><link href="https://www.georgexyz.com/feeds/all.atom.xml" rel="self"></link><id>https://www.georgexyz.com/</id><updated>2020-09-30T10:23:00-04:00</updated><entry><title>Two Git Books</title><link href="https://www.georgexyz.com/two-git-books.html" rel="alternate"></link><published>2020-09-30T10:23:00-04:00</published><updated>2020-09-30T10:23:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-09-30:/two-git-books.html</id><summary type="html">&lt;p&gt;This post is about two Git books I recently read.  Git is a complicated tool 
which is not easy to figure out simply by Google searching. &lt;/p&gt;
&lt;p&gt;I start with the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post is about two Git books I recently read.  Git is a complicated tool 
which is not easy to figure out simply by Google searching. &lt;/p&gt;
&lt;p&gt;I start with the O&amp;#8217;Reilly book &lt;em&gt;Version Control with Git 2nd ed&lt;/em&gt; by Jon Loeliger 
and Matthew McCullough. The book is good, and examples in chapters 5 and 6 
are especially nice. However, the book is not an easy read. I read the first 
12 chapters carefully and skim the rest chapters. &lt;/p&gt;
&lt;p&gt;Then I read the more popular book &lt;a href="https://git-scm.com/book/en/v2"&gt;&lt;em&gt;Pro Git&lt;/em&gt;&lt;/a&gt;
written by Scott Chacon and Ben Straub.  Scott Chacon is one of
the founders of github.  The book is freely available on official git website
git-scm.com. This book is excellent.  I especially like the workflow sections
in chapter 5 because those materials are not easy to find online.  I read
the first 6 chapters twice and skim the rest book.  This book is also more
practical for engineers, and you can use the book as a reference for daily
projects. If you only have time for one book, this is the one to get. &lt;/p&gt;
&lt;p&gt;One benefit I get from reading the two books is that I can easily understand
the &lt;em&gt;Source Control&lt;/em&gt; panel in Visual Studio Code. It is very neat &lt;span class="caps"&gt;VS&lt;/span&gt; Code has 
version control system built in. &lt;/p&gt;
&lt;div style="max-width:800px"&gt;
  &lt;img class="img-fluid pb-3" src="/images/vs_code_vcs.png" alt="vs code vcs"&gt; 
&lt;/div&gt;</content><category term="posts"></category><category term="books"></category><category term="software utility"></category></entry><entry><title>Home File Sharing with Raspberry Pi</title><link href="https://www.georgexyz.com/home-file-sharing.html" rel="alternate"></link><published>2020-09-26T23:27:00-04:00</published><updated>2020-09-26T23:27:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-09-26:/home-file-sharing.html</id><summary type="html">&lt;p&gt;When reconfiguring my home &lt;span class="caps"&gt;WIFI&lt;/span&gt; router this week, I have a thought to setup a
home file sharing drive. The Raspberry Pi 3B+ and a case I bought one or …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When reconfiguring my home &lt;span class="caps"&gt;WIFI&lt;/span&gt; router this week, I have a thought to setup a
home file sharing drive. The Raspberry Pi 3B+ and a case I bought one or two 
years ago has been collecting dust in a drawer for quite some time. It is 
time to bring them out and get some use out of them.&lt;/p&gt;
&lt;p&gt;My original plan is to connect a retired &lt;span class="caps"&gt;SSD&lt;/span&gt; to the &lt;span class="caps"&gt;PI&lt;/span&gt; via an &lt;span class="caps"&gt;USB&lt;/span&gt; adapter. It would
be a little messy to handle the cable and the exposed &lt;span class="caps"&gt;SSD&lt;/span&gt; drive. So I decide to 
use a Samsung &lt;span class="caps"&gt;64GB&lt;/span&gt; &lt;span class="caps"&gt;USB&lt;/span&gt; flash drive which is also retired. &lt;/p&gt;
&lt;p&gt;The two articles linked below are on the top of Google search.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.pcmag.com/how-to/how-to-turn-a-raspberry-pi-into-a-nas-for-whole-home-file-sharing"&gt;Pcmag.com - How to Turn a Raspberry Pi Into a &lt;span class="caps"&gt;NAS&lt;/span&gt; for Whole-Home File Sharing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://magpi.raspberrypi.org/articles/build-a-raspberry-pi-nas"&gt;Magpi - Build a Raspberry Pi &lt;span class="caps"&gt;NAS&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After reading the two articles, it seems that the first one suites my needs 
better. The first tutorial is quite good but I still run into a few problems. 
Below are some notes I have when setting up the Pi. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Raspberry Pi 3B+ needs a 3A or 2.5A power supply. If the &lt;span class="caps"&gt;USB&lt;/span&gt; power charger
   does not provide enough voltage, the Pi will start and then automatically shut off.&lt;/li&gt;
&lt;li&gt;The my cell phone quick charger has 3A voltage output and it 
   works well with Pi.&lt;/li&gt;
&lt;li&gt;The &lt;span class="caps"&gt;USB&lt;/span&gt; stick does not work with &lt;code&gt;sudo mkfs&lt;/code&gt; command in the tutorial. 
   I have to use Linux Mint desktop app &lt;em&gt;&lt;span class="caps"&gt;USB&lt;/span&gt; Stick Formatter&lt;/em&gt; to format 
   it to &lt;span class="caps"&gt;EXT4&lt;/span&gt; first and then connect it to Pi. &lt;/li&gt;
&lt;li&gt;I tried both full version desktop Raspberry Pi &lt;span class="caps"&gt;OS&lt;/span&gt; and Lite minimal version. 
   It seems that the full version is easy to setup &lt;span class="caps"&gt;WIFI&lt;/span&gt;, &lt;span class="caps"&gt;SSH&lt;/span&gt;, and 
   other settings.&lt;/li&gt;
&lt;li&gt;Even though it is possible to setup the Pi without a monitor, it is much 
   easier to connect it to monitor and do initial setup. &lt;/li&gt;
&lt;li&gt;The network drive speed is not so fast and it is between 0.5M/s to 2M/s.
   But it is good enough for me to share files among computers and my phone. &lt;/li&gt;
&lt;li&gt;Android file manager app &lt;em&gt;Cx File Explorer&lt;/em&gt; can access network drive with 
   &lt;span class="caps"&gt;SMB&lt;/span&gt; protocol. &lt;/li&gt;
&lt;li&gt;Use address &lt;code&gt;\\raspberrypi&lt;/code&gt; in Windows and &lt;code&gt;smb://raspberrypi&lt;/code&gt; in Linux 
   to access the shared drive. &lt;/li&gt;
&lt;/ol&gt;
&lt;div style="max-width:800px"&gt;
  &lt;img class="img-fluid pb-3" src="/images/usb_formatter.png" alt="USB Formatter"&gt;
&lt;/div&gt;

&lt;div style="max-width:400px"&gt;
  &lt;img class="img-fluid pb-3" src="/images/pi.jpg" alt="Raspberry pi"&gt;
&lt;/div&gt;

&lt;div style="max-width:400px"&gt;
  &lt;img class="img-fluid pb-3" src="/images/pi_ac.jpg" alt="Raspberry adapter"&gt;
&lt;/div&gt;</content><category term="posts"></category><category term="hardware"></category><category term="linux"></category></entry><entry><title>A Case of Linux Mint Crash</title><link href="https://www.georgexyz.com/a-case-of-linux-mint-crash.html" rel="alternate"></link><published>2020-09-21T13:54:00-04:00</published><updated>2020-09-21T13:54:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-09-21:/a-case-of-linux-mint-crash.html</id><summary type="html">&lt;p&gt;Last night my main computer with Linux Mint 20 crashed and I was really worried
that I might lose the files I had been working on.  After many google searches …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last night my main computer with Linux Mint 20 crashed and I was really worried
that I might lose the files I had been working on.  After many google searches,
I found a solution and knew why it happened.  &lt;/p&gt;
&lt;p&gt;The computer did not respond to mouse or keyboard input so I had to hold down
the power key for a few seconds to shut it off.  When the computer restarted,
it showed the Linux Mint login screen but the system did not let me log in. I
tried a few times entering my password and also tried to restart the computer,
but still could not log in. &lt;/p&gt;
&lt;p&gt;After some google searches, I found this online post&lt;/p&gt;
&lt;p&gt;&lt;a href="https://forums.linuxmint.com/viewtopic.php?f=57&amp;amp;t=261704"&gt;(&lt;span class="caps"&gt;SOLVED&lt;/span&gt;) Cannot Login (login loop)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I followed the answer by Lohengrines, did the following steps, and logged 
into the system.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In login screen, switch to terminal by pressing &amp;#8220;Ctrl + Alt + F2&amp;#8221;&lt;/li&gt;
&lt;li&gt;Run the command &lt;code&gt;sudo tune2fs -m0 /dev/sda2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Switch back to login screen &amp;#8220;Ctrl + Alt + F7&amp;#8221;&lt;/li&gt;
&lt;li&gt;Login with user name and password&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There were previous discussions on the same topic on Linux Mint Forum.  This
post had more information.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://forums.linuxmint.com/viewtopic.php?f=90&amp;amp;t=253502"&gt;Disk full, unable to login. I need help (&lt;span class="caps"&gt;SOLVED&lt;/span&gt;)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As suggested on the above post, when I ran the command &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;df -h
sudo du -h -d 1 / | sort -n  
  # this is for 1 level of dir under root /
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I found two huge files under /var/log directory.  It turned out that both
&lt;code&gt;syslog&lt;/code&gt; and &lt;code&gt;kern.log&lt;/code&gt; files were of &lt;span class="caps"&gt;40GB&lt;/span&gt;+ sizes. And the disk was full and
that was the reason I could not login.  &lt;/p&gt;
&lt;p&gt;Unfortunately I could not simply delete those two files.  How to remove them? 
There was another post for that. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://forums.linuxmint.com/viewtopic.php?t=233943"&gt;Var/log file way too large&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The following command cleared the two files to 0 byte:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo su
&amp;gt; /var/log/syslog
&amp;gt; /var/log/kern.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After that the disk showed a free space of &lt;span class="caps"&gt;90GB&lt;/span&gt;. I also ran the command 
below to change the reserved disk blocks percent back to 5 percent. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo tune2fs -m5 /dev/sda2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I have a large 30 inch Dell U3011 monitor I bought a few years ago. The desktop 
connects to the monitor via a displayport cable.  I also connect my laptop to 
the monitor through the same cable. I simply unplug the cable from desktop and 
plug it to the laptop. &lt;/p&gt;
&lt;p&gt;Last night, I did not turn off the desktop when unplugging the monitor cable.
Linux Mint 20 system started outputting the same error messages again and
again.  It eventually filled up the disk. That was the reason I could not log
into the system. Thought it was painful, I did learn something from this 
crash experience.&lt;/p&gt;
&lt;p&gt;Update (9/24/2020): The computer crashed again today and the reason I wrote above 
was not correct. I added a &lt;code&gt;maxsize 10M&lt;/code&gt; setting to the configuration file following 
this 
&lt;a href="https://stackoverflow.com/questions/35638219/ubuntu-large-syslog-and-kern-log-files"&gt;stackoverflow post&lt;/a&gt;.
I also updated the system to the latest.  &lt;/p&gt;</content><category term="posts"></category><category term="linux"></category><category term="linux mint"></category></entry><entry><title>Web Development Notes</title><link href="https://www.georgexyz.com/web-development-notes.html" rel="alternate"></link><published>2020-08-29T10:40:00-04:00</published><updated>2020-08-29T10:40:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-08-29:/web-development-notes.html</id><summary type="html">&lt;p&gt;I am going to assemble some notes for web development in this post.  It is mainly for 
myself and I will keep updating this post. &lt;/p&gt;
&lt;h4&gt;Force Firefox to Refresh&lt;/h4&gt;
&lt;p&gt;There …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am going to assemble some notes for web development in this post.  It is mainly for 
myself and I will keep updating this post. &lt;/p&gt;
&lt;h4&gt;Force Firefox to Refresh&lt;/h4&gt;
&lt;p&gt;There are two quick ways to refresh web page in Firefox browser. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Press &lt;code&gt;Shift&lt;/code&gt; key and click refresh (reload) button,&lt;/li&gt;
&lt;li&gt;Shortcut is &lt;code&gt;Ctrl + Shift + r&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The fresh button is the third one on the image shown below: 
&lt;div style="max-width:800px"&gt;
  &lt;img class="img-fluid pb-3" src="/images/refresh-button.png" alt="ff refresh button"&gt;
&lt;/div&gt;&lt;/p&gt;</content><category term="posts"></category><category term="web development"></category></entry><entry><title>Change Boot Order with GRUB 2</title><link href="https://www.georgexyz.com/change-boot-order-with-grub-2.html" rel="alternate"></link><published>2020-08-28T03:17:00-04:00</published><updated>2020-08-28T03:17:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-08-28:/change-boot-order-with-grub-2.html</id><summary type="html">&lt;p&gt;My laptop has both Windows 10 and Linux Mint installed. Sometimes I want the laptop booting into 
Windows by default. After a little online research, I find that I need …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My laptop has both Windows 10 and Linux Mint installed. Sometimes I want the laptop booting into 
Windows by default. After a little online research, I find that I need to change the settings of 
boot loader software &lt;span class="caps"&gt;GRUB&lt;/span&gt; 2. &lt;/p&gt;
&lt;p&gt;After reading the 
&lt;a href="https://www.gnu.org/software/grub/manual/grub/grub.html"&gt;online grub manual&lt;/a&gt; 
for one hour or so, I am still not sure how to do it. Fortunately, I find 
&lt;a href="https://www.dedoimedo.com/computers/grub-2.html"&gt;an excellent &lt;span class="caps"&gt;GRUB&lt;/span&gt; tutorial&lt;/a&gt; 
on dedoimedo.com, which explains the &lt;span class="caps"&gt;GRUB&lt;/span&gt; 2 very well. &lt;/p&gt;
&lt;p&gt;Basically, the &lt;span class="caps"&gt;GRUB&lt;/span&gt; 2 software reads the &lt;code&gt;grub.cfg&lt;/code&gt; configuration file in &lt;code&gt;/boot/grub/&lt;/code&gt; directory.
However you should not modify this file directly. Instead, the file is generated with a linux
command like this. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo grub-mkconfig -o grub.cfg 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;grub-mkconfig&lt;/code&gt; tool will load setting files in &lt;code&gt;/etc/grub.d/&lt;/code&gt; directory and setting 
file &lt;code&gt;/etc/default/grub&lt;/code&gt;.  A user should change those files and run &lt;code&gt;grub-mkconfig&lt;/code&gt; to 
generate the final &lt;code&gt;grub.cfg&lt;/code&gt; file. &lt;/p&gt;
&lt;p&gt;Here is the file list under &lt;code&gt;/etc/grub.d&lt;/code&gt; directory in my laptop.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;george@T450:/etc/grub.d$ ls -la
total 108
-rwxr-xr-x   1 root root 10046 Mar 18  2019 00_header
-rwxr-xr-x   1 root root  6258 Mar 18  2019 05_debian_theme
-rwxr-xr-x   1 root root 12059 Aug  4 23:46 09_os-prober &amp;lt;-- added
-rwxr-xr-x   1 root root 12693 Mar 18  2019 10_linux
-rwxr-xr-x   1 root root 11298 Mar 18  2019 20_linux_xen
-rwxr-xr-x   1 root root  1992 Jan 28  2016 20_memtest86+
-rw-r--r--   1 root root 12059 Mar 18  2019 30_os-prober
-rwxr-xr-x   1 root root  1418 Mar 18  2019 30_uefi-firmware
-rwxr-xr-x   1 root root   214 Mar 18  2019 40_custom
-rwxr-xr-x   1 root root   216 Mar 18  2019 41_custom
-rw-r--r--   1 root root   483 Mar 18  2019 README
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Reading the &lt;code&gt;/boot/grub/grub.cfg&lt;/code&gt; file a little bit, I find the &lt;code&gt;30_os-prober&lt;/code&gt; is the configuration
file to read the Windows. I made a copy the file and named the new copy &lt;code&gt;09_os-prober&lt;/code&gt;, then I
turned the execution bit off for &lt;code&gt;30_os-prober&lt;/code&gt;. Note the boot order is based on the first two
digits of file names in this directory.  The commands are like this, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo cp 30_os-prober 09_os-prober
sudo chmod -x 30_os-prober
sudo grub-mkconfig -o /boot/grub/grub.cfg 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now reboot the computer and the boot screen looks like this, &lt;/p&gt;
&lt;div style="max-width:800px"&gt;
  &lt;img class="img-fluid pb-3" src="/images/boot_order.jpg" alt="boot order"&gt; 
&lt;/div&gt;</content><category term="posts"></category><category term="linux"></category><category term="software utility"></category></entry><entry><title>Mutate While Looping in Python</title><link href="https://www.georgexyz.com/mutate-while-looping-in-python.html" rel="alternate"></link><published>2020-07-21T00:47:00-04:00</published><updated>2020-07-21T00:47:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-07-21:/mutate-while-looping-in-python.html</id><summary type="html">&lt;p&gt;Raymond Hettinger once said &amp;#8220;if you mutate something while you&amp;#8217;re iterating over it, 
you&amp;#8217;re living in a state of sin and deserve whatever happens to you&amp;#8221;. Recent version …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Raymond Hettinger once said &amp;#8220;if you mutate something while you&amp;#8217;re iterating over it, 
you&amp;#8217;re living in a state of sin and deserve whatever happens to you&amp;#8221;. Recent version 
of Python actually does not allow you mutate a dictionary while looping over it. Here are&lt;br&gt;
some test code. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Sep&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;7.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;matthew&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rachel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raymond&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;matthew&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rachel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raymond&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;   &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; 

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; 
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt; &lt;span class="n"&gt;changed&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="n"&gt;during&lt;/span&gt; &lt;span class="n"&gt;iteration&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sometimes &amp;#8220;mutate while looping&amp;#8221; is necessary and it can make code simpler. Here is 
an example (modified) from 
&lt;a href="https://automatetheboringstuff.com/2e/chapter6/"&gt;Chapter 6&lt;/a&gt; 
of Al Sweigart&amp;#8217;s &lt;em&gt;Automate The Boring Stuff With Python&lt;/em&gt; book.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;prefixnonletters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isalpha&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;prefixnonletters&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;prefixnonletters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function separates a word (e.g., &amp;#8216;123word&amp;#8217;) into two parts: the prefix non-letter 
part (&amp;#8216;123&amp;#8217;) and following letter part (&amp;#8216;word&amp;#8217;). The code loops over the input word and mutates it 
in the loop body. It is difficult to write the function in other ways. One alternative 
way I can think of is to use regular expression. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prefix_re&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;([^A-Za-z]+)(\w*)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="posts"></category><category term="python"></category></entry><entry><title>Home Woodwork Projects</title><link href="https://www.georgexyz.com/home-woodwork-projects.html" rel="alternate"></link><published>2020-06-28T00:02:00-04:00</published><updated>2020-06-28T00:02:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-06-28:/home-woodwork-projects.html</id><summary type="html">&lt;p&gt;I took a brief time off computers and worked on a few simple wood projects 
at home during my spare time. &lt;/p&gt;
&lt;h4&gt;Garden Wood Frame&lt;/h4&gt;
&lt;p&gt;The first project is building wood …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I took a brief time off computers and worked on a few simple wood projects 
at home during my spare time. &lt;/p&gt;
&lt;h4&gt;Garden Wood Frame&lt;/h4&gt;
&lt;p&gt;The first project is building wood frames for 
string bean plants in our backyard. The materials are 16 1&amp;#8221;x2&amp;#8221;x8&amp;#8217; pressure 
treated board from Home Depot. They are about $2 each and total cost is 
less than $35. Here is a photo of the frames. &lt;/p&gt;
&lt;div style="max-width:800px"&gt;
  &lt;img class="img-fluid" src="/images/string-bean-frame.jpg" alt="string bean frame"&gt; 
&lt;/div&gt;

&lt;h4&gt;Backyard Shoe Rack&lt;/h4&gt;
&lt;p&gt;The second project is building a backyard shoe rack.  A few other options 
are considered before setting on this one. The materials are recycled 
pallet wood and 6 hooks ($1 ea) from Home Depot. The hooks are mounted 
about 45 degrees into the wood. &lt;/p&gt;
&lt;div style="max-width:800px"&gt;
  &lt;img class="img-fluid" src="/images/shoe-rack.jpg" alt="shoe rack"&gt; 
&lt;/div&gt;

&lt;h4&gt;Under Deck Swing&lt;/h4&gt;
&lt;p&gt;The neighborhood playground is closed nowadays, so we decide to build an 
under deck swing in the backyard. The number of components are more than 
I thought. Here is a list of materials for the toddler swing. The total 
material cost is about $100. &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Toddler swing&lt;/dt&gt;
&lt;dd&gt;Step2 infant to toddler swing from amazon - $37&lt;/dd&gt;
&lt;dt&gt;Swing hanger&lt;/dt&gt;
&lt;dd&gt;Jungle Gym Kingdom heavy duty swing hanger from amazon - $29&lt;/dd&gt;
&lt;dt&gt;Wood&lt;/dt&gt;
&lt;dd&gt;2&amp;#8221;x6&amp;#8221;x8&amp;#8217; pressure treated wood from Home Depot - $7&lt;/dd&gt;
&lt;dt&gt;Chain&lt;/dt&gt;
&lt;dd&gt;3/16&amp;#8221; x 3&amp;#8217; two chains - $12&lt;/dd&gt;
&lt;dt&gt;Screws&lt;/dt&gt;
&lt;dd&gt;1/2&amp;#8221; x 4 &amp;#8221; four lag screw - $5&lt;/dd&gt;
&lt;dt&gt;Screws&lt;/dt&gt;
&lt;dd&gt;5/16&amp;#8221; x 4-1/2&amp;#8221; ten lag screw - $7.4&lt;/dd&gt;
&lt;/dl&gt;
&lt;div style="max-width:600px"&gt;
  &lt;img class="img-fluid" src="/images/toddler-swing.jpg" alt="toddler swing"&gt; 
&lt;/div&gt;

&lt;p&gt;We have some materials left over from this project such as wood and 
lag screws, so we decide to build a simple swing/bench near the 
toddler swing. This time uses a much cheaper swing hanger from Home 
Depot. It has a weight rating of 450 lbs which is more than enough 
for us. &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Swing&lt;/dt&gt;
&lt;dd&gt;2&amp;#8221;x8&amp;#8221;x8&amp;#8217; wood (22 in long) with white paint&lt;/dd&gt;
&lt;dt&gt;Hanger&lt;/dt&gt;
&lt;dd&gt;Everbilt porch swing chain kit - $17&lt;/dd&gt;
&lt;dt&gt;Hook and Washer&lt;/dt&gt;
&lt;dd&gt;1/4&amp;#8221; x 4-1/4&amp;#8221; steel hook and 1/4&amp;#8221; x 1-1/4&amp;#8221; fender washer - $6&lt;/dd&gt;
&lt;/dl&gt;
&lt;div style="max-width:600px"&gt;
  &lt;img class="img-fluid" src="/images/swing-2.jpg" alt="swing"&gt; 
&lt;/div&gt;</content><category term="posts"></category><category term="woodwork"></category></entry><entry><title>Adding .vimrc Dotfile to Github</title><link href="https://www.georgexyz.com/adding-vimrc-dotfile-to-github.html" rel="alternate"></link><published>2020-06-09T09:01:00-04:00</published><updated>2020-06-09T09:01:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-06-09:/adding-vimrc-dotfile-to-github.html</id><summary type="html">&lt;p&gt;Youtube has a nice video &lt;a href="https://youtu.be/_NUO4JEtkDw"&gt;Learning Vim In A Week&lt;/a&gt;, and I watch it 
every few months to refresh my Vim skills. In the video the presenter suggests people to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Youtube has a nice video &lt;a href="https://youtu.be/_NUO4JEtkDw"&gt;Learning Vim In A Week&lt;/a&gt;, and I watch it 
every few months to refresh my Vim skills. In the video the presenter suggests people to 
version control dotfiles such as &lt;code&gt;.vimrc&lt;/code&gt;, which is the setting file Vim loads during startup. 
There is &lt;a href="https://dotfiles.github.io/"&gt;a website&lt;/a&gt; 
dedicated to this topic. &lt;/p&gt;
&lt;p&gt;Dotfiles seem to be different than normal files in a regular github repo. I googled and found 
&lt;a href="https://stackoverflow.com/questions/18197705/adding-your-vim-vimrc-to-github-aka-dot-files"&gt;a stackoverflow post&lt;/a&gt; 
which discusses the exact same issue. The accepted answer seems a reasonable start point, so I create 
&lt;a href="https://github.com/georgexyz19/dotfiles"&gt;a github repo&lt;/a&gt; 
and start a directory containing &lt;code&gt;.vimrc&lt;/code&gt; and &lt;code&gt;.simple&lt;/code&gt; dot files.  The answer also suggests 
to create symbol links in home directory to the dot files. However, I find it does not work 
well. When I use &lt;code&gt;vim -u ~/.simple&lt;/code&gt; command to load a specific dot file, Vim reports an error. 
Instead the hard links should be used here. You simply use &lt;code&gt;ln file link&lt;/code&gt; command to create 
hard links instead of &lt;code&gt;ln -s ...&lt;/code&gt; command.  &lt;/p&gt;
&lt;p&gt;When adding files to git version control, the command &lt;code&gt;git add .&lt;/code&gt; should be used. The command 
&lt;code&gt;git add *&lt;/code&gt; will not work because &lt;code&gt;*&lt;/code&gt; does not expand to include dot files. &lt;/p&gt;
&lt;p&gt;I also wrote a short python script &lt;code&gt;newlinks.py&lt;/code&gt; to automatically create the hard links in the 
home directory. The program is not long and the source code is listed below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#! python3&lt;/span&gt;

&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;Create hard links in ~/ or home directory.&lt;/span&gt;
&lt;span class="sd"&gt;The purpose is to track the .dot file by git and github&lt;/span&gt;

&lt;span class="sd"&gt;Use:&lt;/span&gt;

&lt;span class="sd"&gt;git add .&lt;/span&gt;
&lt;span class="sd"&gt;git commit -m &amp;quot;message&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;git push origin master&lt;/span&gt;

&lt;span class="sd"&gt;to update git repo&lt;/span&gt;

&lt;span class="sd"&gt;After you git clone the repo&lt;/span&gt;
&lt;span class="sd"&gt;run $python3 newlinks.py to create hard links in home dir.&lt;/span&gt;

&lt;span class="sd"&gt;Written by George Zhang on 6/8/20&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;abspath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;dname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;filenames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.swp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c1"&gt;# ln command&lt;/span&gt;
            &lt;span class="c1"&gt;# os module has link and symlink function&lt;/span&gt;
            &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ln -f &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; ~/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capture_output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;running command: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ln -f &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; ~/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; --&amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Success!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DONE!!!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="posts"></category><category term="software utility"></category><category term="vim"></category></entry><entry><title>Copy SSH Keys to A New Computer</title><link href="https://www.georgexyz.com/copy-ssh-keys.html" rel="alternate"></link><published>2020-06-07T10:24:00-04:00</published><updated>2020-06-07T10:24:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-06-07:/copy-ssh-keys.html</id><summary type="html">&lt;p&gt;I followed 
&lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xvii-deployment-on-linux"&gt;Miguel Grinberg&amp;#8217;s tutorial&lt;/a&gt; 
setting up an &lt;span class="caps"&gt;SSH&lt;/span&gt; key on my desktop using &lt;code&gt;ssh-keygen&lt;/code&gt;. I thought I could simply copy the 
private key &lt;code&gt;id_rsa&lt;/code&gt; and public key &lt;code&gt;id_rsa …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I followed 
&lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xvii-deployment-on-linux"&gt;Miguel Grinberg&amp;#8217;s tutorial&lt;/a&gt; 
setting up an &lt;span class="caps"&gt;SSH&lt;/span&gt; key on my desktop using &lt;code&gt;ssh-keygen&lt;/code&gt;. I thought I could simply copy the 
private key &lt;code&gt;id_rsa&lt;/code&gt; and public key &lt;code&gt;id_rsa.pub&lt;/code&gt; to &lt;code&gt;~/.ssh&lt;/code&gt; directory on a new computer 
and &lt;span class="caps"&gt;SSH&lt;/span&gt; would work as on the first computer. &lt;/p&gt;
&lt;p&gt;It does not work. I googled and found a 
&lt;a href="https://askubuntu.com/questions/4830/easiest-way-to-copy-ssh-keys-to-another-machine"&gt;Q&amp;amp;A&lt;/a&gt; 
on askubuntu.com. There are many answers to the question but only the answer by Victor Timoftil 
is related to what I am looking for. The simple answer is that, &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Move &lt;code&gt;~/.ssh&lt;/code&gt; to the new machine and run &lt;code&gt;ssh-add&lt;/code&gt;. &lt;span class="caps"&gt;DONE&lt;/span&gt;!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The long answer is that, &lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;In the old machine, take the folder ~/.ssh to an &lt;span class="caps"&gt;USB&lt;/span&gt; drive, or to any other storage you like.&lt;/li&gt;
&lt;li&gt;On the new machine, put the folder under ~ aka /home/$&lt;span class="caps"&gt;USER&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Run ssh-add, on the new machine done.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;I copy the two &lt;span class="caps"&gt;SSH&lt;/span&gt; keys files vie a flash drive that is formatted as ntfs format. The key files 
are having new permission &lt;code&gt;777&lt;/code&gt;. The &lt;code&gt;ssh-add&lt;/code&gt; command will show an error for that. I have to 
use &lt;code&gt;chmod 500&lt;/code&gt; command to change file permissions. Also the &lt;code&gt;ssh-add&lt;/code&gt; will ask a passphrase 
which is entered when you create the keys. It seems to be a safety feature to prevent someone 
stealing the two key files.   &lt;/p&gt;
&lt;p&gt;Update (6/28/2020): I find the above method is not a good practice of handling &lt;span class="caps"&gt;SSH&lt;/span&gt; keys. It is better to 
generate new private and public keys in a new computer and copy the new public key to the 
server according to 
&lt;a href="https://superuser.com/questions/332510/how-to-transfer-my-ssh-keys-to-another-machine/332513"&gt;a Q&amp;amp;A post&lt;/a&gt;. 
The server will have two public keys for the same user. &lt;/p&gt;
&lt;p&gt;Update 2 (7/21/2020): In order to add a second public key to the github, an additional step 
&amp;#8220;add your &lt;span class="caps"&gt;SSH&lt;/span&gt; key to the ssh-agent&amp;#8221; is needed when generating the key. Follow instructions on 
those two github web pages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent"&gt;Generating a new &lt;span class="caps"&gt;SSH&lt;/span&gt; key and adding it to the ssh-agent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account"&gt;Adding a new &lt;span class="caps"&gt;SSH&lt;/span&gt; key to your Github account&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="posts"></category><category term="software utility"></category></entry><entry><title>Code Highlighting in Pelican</title><link href="https://www.georgexyz.com/code-highlight-in-pelican.html" rel="alternate"></link><published>2020-05-22T16:49:00-04:00</published><updated>2020-05-22T16:49:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-05-22:/code-highlight-in-pelican.html</id><summary type="html">&lt;p&gt;It is easy getting confused about code highlighting when reading Pelican 
documentation. It mentions keywords like &lt;code&gt;CodeHilite&lt;/code&gt; and &lt;code&gt;Pygments&lt;/code&gt; without 
much explanation. When I am reviewing my Pelican notes, I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It is easy getting confused about code highlighting when reading Pelican 
documentation. It mentions keywords like &lt;code&gt;CodeHilite&lt;/code&gt; and &lt;code&gt;Pygments&lt;/code&gt; without 
much explanation. When I am reviewing my Pelican notes, I decide to 
spend a little time to figure out how code highlighting works in Pelican or 
more broadly in Python. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;CodeHilite&lt;/code&gt; is an extension for Python package &lt;code&gt;Markdown&lt;/code&gt;. When you run 
the command &lt;code&gt;pip install markdown&lt;/code&gt;, the installed package includes the 
&lt;code&gt;CodeHilite&lt;/code&gt; because it is a standard &lt;code&gt;Markdown&lt;/code&gt; extension. Confusing enough, 
the documentation for &lt;code&gt;Markdown&lt;/code&gt; package calls itself &lt;code&gt;Python-Markdown&lt;/code&gt;. You 
can see the documentation for &lt;code&gt;CodeHilite&lt;/code&gt; on 
&lt;a href="https://python-markdown.github.io/extensions/code_hilite/"&gt;this webpage&lt;/a&gt;. 
The summary says that &amp;#8220;the CodeHilite extension adds code/syntax highlighting 
to standard Python-Markdown code blocks using Pygments.&amp;#8221; It is still not very 
clear on what it actually does. &lt;/p&gt;
&lt;p&gt;On the same documentation page, there are two example &lt;code&gt;Pygments&lt;/code&gt; commands from 
the command line. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pygmentize -S default -f html -a .codehilite &amp;gt; styles.css
pygmentize -L style
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first command creates a &lt;span class="caps"&gt;CSS&lt;/span&gt; file &lt;code&gt;styles.css&lt;/code&gt; with &lt;code&gt;default&lt;/code&gt; style.  The 
&lt;code&gt;-f html&lt;/code&gt; option specifies the formatter and &lt;code&gt;-a .codehilite&lt;/code&gt; option specifies 
a class in the &lt;code&gt;styles.css&lt;/code&gt; file. The second command lists all the styles 
that comes with &lt;code&gt;Pygments&lt;/code&gt; package. &lt;/p&gt;
&lt;p&gt;After running the first command, the generated &lt;code&gt;styles.css&lt;/code&gt; file has 69 lines of 
&lt;span class="caps"&gt;CSS&lt;/span&gt; rules. The &lt;code&gt;.codehilite&lt;/code&gt; class is specified by the &lt;code&gt;-a&lt;/code&gt; option on the 
command line. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;codehilite&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;hll&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ffffcc&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;codehilite&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#f8f8f8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;codehilite&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;c&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#408080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;font-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;italic&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Comment */&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;codehilite&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;err&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="mh"&gt;#FF0000&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Error */&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;codehilite&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;k&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#008000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;bold&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Keyword */&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Pelican default configuration dictionary has a key &lt;code&gt;MARKDOWN&lt;/code&gt;, and the 
corresponding value is shown below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="s1"&gt;&amp;#39;MARKDOWN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;extension_configs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;markdown.extensions.codehilite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;css_class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;highlight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;markdown.extensions.extra&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;markdown.extensions.meta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It specifies a default &lt;span class="caps"&gt;CSS&lt;/span&gt; class value &lt;code&gt;highlight&lt;/code&gt;. The Python &lt;code&gt;Markdown&lt;/code&gt; 
package transforms code block in a markdown file to html segment like below. 
The &lt;code&gt;CodeHilite&lt;/code&gt; plugin does the work, and it actually calls the &lt;code&gt;Pygments&lt;/code&gt; 
package to generate the html code. Specifically, Line 122 of the &lt;code&gt;CodeHilite&lt;/code&gt; 
plugin source code file 
&lt;a href="https://github.com/Python-Markdown/markdown/blob/master/markdown/extensions/codehilite.py"&gt;codehilite.py&lt;/a&gt; 
calls &lt;code&gt;highlight&lt;/code&gt; function in the &lt;code&gt;Pygments&lt;/code&gt; package. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;highlight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;k&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;if&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;vm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;__name__&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 
      ...
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The html template should link to the &lt;code&gt;styles.css&lt;/code&gt; file discussed earlier in 
the article, so the generated html code section has the specified &lt;span class="caps"&gt;CSS&lt;/span&gt; styles. 
If you use default Pelican configuration, the &lt;code&gt;-a .codehilite&lt;/code&gt; option of the 
first pygmentize command should be &lt;code&gt;-a .highlight&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;It is also interesting to find that the &lt;code&gt;Markdown&lt;/code&gt; Python package does not 
list &lt;code&gt;Pygments&lt;/code&gt; package as a dependent, 
while &lt;code&gt;Pelican&lt;/code&gt; itself lists &lt;code&gt;Pygments&lt;/code&gt; as a dependent. If you use pipenv 
manage virtual environment, the command &lt;code&gt;pipenv graph&lt;/code&gt; lists dependent packages
as follows. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Markdown==3.2.1
  - setuptools [required: &amp;gt;=36, installed: 46.1.3]
pelican==4.2.0
  - blinker [required: Any, installed: 1.4]
  - docutils [required: Any, installed: 0.16]
  - feedgenerator [required: &amp;gt;=1.9, installed: 1.9.1]
    - pytz [required: &amp;gt;=0a, installed: 2020.1]
    - six [required: Any, installed: 1.14.0]
  - jinja2 [required: &amp;gt;=2.7, installed: 2.11.2]
    - MarkupSafe [required: &amp;gt;=0.23, installed: 1.1.1]
  - pygments [required: Any, installed: 2.6.1]
  - python-dateutil [required: Any, installed: 2.8.1]
    - six [required: &amp;gt;=1.5, installed: 1.14.0]
  - pytz [required: &amp;gt;=0a, installed: 2020.1]
  - six [required: &amp;gt;=1.4, installed: 1.14.0]
  - unidecode [required: Any, installed: 1.1.1]
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This page has five code sections, and you can see code highlighting 
effects in the middle three sections. &lt;/p&gt;</content><category term="posts"></category><category term="pelican"></category></entry><entry><title>Fujitsu Scanner Fi-7160 Software</title><link href="https://www.georgexyz.com/scanner-fi-7160.html" rel="alternate"></link><published>2020-05-14T12:46:00-04:00</published><updated>2020-05-14T12:46:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-05-14:/scanner-fi-7160.html</id><summary type="html">&lt;p&gt;A few years ago I purchased a Fujitsu fi-7160 document scanner for home use. Occasionally I 
use it to scan a few pages at home and I only use very …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few years ago I purchased a Fujitsu fi-7160 document scanner for home use. Occasionally I 
use it to scan a few pages at home and I only use very basic function. The scanner is used much often 
in the past few weeks since I start working from home. &lt;/p&gt;
&lt;p&gt;The scanner itself is excellent, however the software coming with it and instructions are 
horrible. Yesterday I spent a few hours trying to figure out the software. The Fijitsu website 
has a list of drivers and applications to download. Here is a screenshot of the list. &lt;/p&gt;
&lt;div style="max-width: 800px"&gt;
  &lt;img class="img-fluid pb-3" src="/images/fi-7160/fi7160-software-list.png" alt="fi software list"&gt; 
&lt;/div&gt;

&lt;p&gt;My computer still has very old version of software that was installed from a &lt;span class="caps"&gt;CD&lt;/span&gt; in the original 
package. The last item on the above list &amp;#8220;fi Series Online Update 1.2.23&amp;#8221; 
will automatically update several software to latest version and updated firmware of
the scanner. After trying out items on the list and doing some Google searches, 
here are my understanding on how they work. &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;PaperStream Capture&lt;/dt&gt;
&lt;dd&gt;main scan software provided by Fujitsu. You can configure the scanner such as resolution,
paper size, punch hole removal etc. in this software. &lt;/dd&gt;
&lt;dt&gt;PaperStream &lt;span class="caps"&gt;IP&lt;/span&gt; (&lt;span class="caps"&gt;TWAIN&lt;/span&gt; and &lt;span class="caps"&gt;ISIS&lt;/span&gt;)&lt;/dt&gt;
&lt;dd&gt;scanner driver for Windows, needed for scanner to work.&lt;/dd&gt;
&lt;dt&gt;ScanSnap Manager&lt;/dt&gt;
&lt;dd&gt;this software configures how the Scan/Enter button work. Need reboot computer after installation
for it to work.&lt;/dd&gt;
&lt;dt&gt;&lt;span class="caps"&gt;ABBYY&lt;/span&gt; FineReader&lt;/dt&gt;
&lt;dd&gt;third party &lt;span class="caps"&gt;OCR&lt;/span&gt; software, which work with &lt;em&gt;ScanSnap Manager&lt;/em&gt;.&lt;/dd&gt;
&lt;dt&gt;ScandAll &lt;span class="caps"&gt;PRO&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;third party software which is similar to a strip down version of Adobe Acrobat, 
not as powerful as &lt;em&gt;PaperStream Capture&lt;/em&gt;. &lt;/dd&gt;
&lt;dt&gt;Scanner Central Admin (agent and console)&lt;/dt&gt;
&lt;dd&gt;this software seems to upload scanned documents to a network location, not useful
for me. &lt;/dd&gt;
&lt;dt&gt;Scan to Microsoft SharePoint&lt;/dt&gt;
&lt;dd&gt;it is also network related. &lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;I found a &lt;a href="https://youtu.be/PgW-ILyIVik"&gt;youtube video&lt;/a&gt; on how to configure &lt;span class="caps"&gt;ABBYY&lt;/span&gt; FineReader 
with ScanSnap Manager and use the &lt;span class="caps"&gt;OCR&lt;/span&gt; function.  You can configure the scan button to automatically
scan the document, perform &lt;span class="caps"&gt;OCR&lt;/span&gt;, and save it to a specified folder. &lt;/p&gt;
&lt;div style="max-width: 350px"&gt;
  &lt;img class="img-fluid pb-3" src="/images/fi-7160/fi7160-software-scansnap.png" alt="scansnap"&gt; 
&lt;/div&gt;

&lt;p&gt;The tricky part is that the ScanSnap Manager software is disabled if PaperStream Capture is open. 
You need to exit PaperStream Capture before enable Scansnap Manager. It takes me sometime to figure 
that out.&lt;/p&gt;</content><category term="posts"></category><category term="software utility"></category></entry><entry><title>GIMP Tips</title><link href="https://www.georgexyz.com/gimp-tips.html" rel="alternate"></link><published>2020-05-10T10:54:00-04:00</published><updated>2020-05-10T10:54:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-05-10:/gimp-tips.html</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;GIMP&lt;/span&gt; is a free and open source image manipulation software. I only use a small
subset of functions of the software.  Here are some tips I keep a record for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;span class="caps"&gt;GIMP&lt;/span&gt; is a free and open source image manipulation software. I only use a small
subset of functions of the software.  Here are some tips I keep a record for
myself. &lt;/p&gt;
&lt;h3&gt;Move Pixels In An Area&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Ctrl + Alt + Move Selection&lt;/code&gt; is the shortcut to move selected area of an image.
&lt;span class="caps"&gt;GIMP&lt;/span&gt; adds a &amp;#8220;Floating selection&amp;#8221; temporary layer in the layer dialog.  After you
make the change, click the mouse in another area to confirm the move. The
temporary layer merges onto the main layer. &lt;/p&gt;
&lt;h3&gt;Add White Background After Deleting An Area&lt;/h3&gt;
&lt;p&gt;Sometimes &lt;span class="caps"&gt;GIMP&lt;/span&gt; leaves a hole on an image when you delete the pixels in an area.
Choose menu item &lt;code&gt;Layer&lt;/code&gt; &amp;gt; &lt;code&gt;Transparency&lt;/code&gt; &amp;gt; &lt;code&gt;Remove Alpha Channel&lt;/code&gt; and the area
will show white background.&lt;/p&gt;
&lt;h3&gt;Remove Background Grey Hue&lt;/h3&gt;
&lt;p&gt;Some scanned image file has a grey hue on the background. The &lt;code&gt;Colors&lt;/code&gt; &amp;gt;
&lt;code&gt;Curves&lt;/code&gt; tool can be used to remove the background. &lt;/p&gt;
&lt;div style="max-width:400px"&gt;
  &lt;img class="img-fluid pb-3" src="/images/gimp/gimp-curve-r.png" alt="gimp curve"&gt; 
&lt;/div&gt;

&lt;h3&gt;Resize Image to a Certain Size&lt;/h3&gt;
&lt;p&gt;If you want to resize a scanned plan image file to a certain size such as Arch D (36&amp;#8221;
x 24&amp;#8221;), you can follow those steps. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click on menu item &lt;code&gt;Image&lt;/code&gt; &amp;gt; &lt;code&gt;Canvas Size&lt;/code&gt; to resize canvas to a larger
   size (e.g., 36&amp;#8221; x 24&amp;#8221;), and choose white background and center the image.&lt;/li&gt;
&lt;li&gt;Select an area of image including the borders.  &lt;/li&gt;
&lt;li&gt;Copy and paste the image pixels onto a new layer. &lt;/li&gt;
&lt;li&gt;Choose menu item &lt;code&gt;Layer&lt;/code&gt; &amp;gt; &lt;code&gt;Scale Layer&lt;/code&gt; to enlarge the layer to canvas
   size.  It seem that setting &lt;code&gt;Interpolation&lt;/code&gt; to None works better for scanned
   plans.&lt;/li&gt;
&lt;li&gt;Merge down the image layer to the background layer. &lt;/li&gt;
&lt;/ol&gt;
&lt;p class="text-muted"&gt;This article will be continuously updated (last update: 8/24/2020). &lt;p&gt;</content><category term="posts"></category><category term="software utility"></category></entry><entry><title>Pelican Cache Module</title><link href="https://www.georgexyz.com/pelican-cache-module.html" rel="alternate"></link><published>2020-05-08T09:49:00-04:00</published><updated>2020-05-08T09:49:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-05-08:/pelican-cache-module.html</id><summary type="html">&lt;p&gt;Pelican cache module (&lt;a href="https://github.com/getpelican/pelican/blob/4.2.0/pelican/cache.py"&gt;cache.py&lt;/a&gt;) 
is relatively independent of other modules. It uses pickle module 
to serialize data and logger module to output debug and warning message. The module 
defines …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pelican cache module (&lt;a href="https://github.com/getpelican/pelican/blob/4.2.0/pelican/cache.py"&gt;cache.py&lt;/a&gt;) 
is relatively independent of other modules. It uses pickle module 
to serialize data and logger module to output debug and warning message. The module 
defines two classes &lt;code&gt;FileDataCacher&lt;/code&gt; and &lt;code&gt;FileStampDataCacher&lt;/code&gt;. The &lt;code&gt;FileStampDataCacher&lt;/code&gt; class derives from 
&lt;code&gt;FileDataCacher&lt;/code&gt; class and
adds file stamp to serialized data. File stamp could be modified time or a hash value of file content. 
The classes have four methods &lt;code&gt;__init__&lt;/code&gt;, &lt;code&gt;get_cached_data&lt;/code&gt;, &lt;code&gt;cache_data&lt;/code&gt;, and &lt;code&gt;save_cache&lt;/code&gt;. 
The concept code below shows how they work. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;content = get_cached_data(path)
if content is None:
    content = read(path)
    cache_data(path, content)
    save_cache()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Pelican documentation has a section 
&amp;#8220;&lt;a href="https://docs.getpelican.com/en/stable/settings.html?highlight=cache#reading-only-modified-content"&gt;Reading only modified content&lt;/a&gt;&amp;#8221; 
on how to use caching. You should at least set those two setting values to &lt;code&gt;True&lt;/code&gt; to 
turn on caching. &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;CACHE_CONTENT&lt;/dt&gt;
&lt;dd&gt;True to save cache; default is False.&lt;/dd&gt;
&lt;dt&gt;LOAD_CONTENT_CACHE&lt;/dt&gt;
&lt;dd&gt;True to load cache; default is False.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Other cache related settings are listed below. &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;CACHE_PATH&lt;/dt&gt;
&lt;dd&gt;default is &lt;code&gt;cache&lt;/code&gt;; caching files are saved in this directory.&lt;/dd&gt;
&lt;dt&gt;CONTENT_CACHING_LAYER&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;Readers&lt;/code&gt; and &lt;code&gt;CachingGenerators&lt;/code&gt; classes are derived from &lt;code&gt;FileStampDataCacher&lt;/code&gt;. You can 
set the value to &amp;#8216;reader&amp;#8217; or &amp;#8216;generator&amp;#8217;; default value is &lt;code&gt;reader&lt;/code&gt;. &lt;/dd&gt;
&lt;dt&gt;GZIP_CACHE&lt;/dt&gt;
&lt;dd&gt;use &lt;span class="caps"&gt;GZIP&lt;/span&gt; package to compress caching file; default is True. &lt;/dd&gt;
&lt;dt&gt;CHECK_MODIFIED_METHOD&lt;/dt&gt;
&lt;dd&gt;method to check if a file is modified sincing last caching; default is &lt;code&gt;mtime&lt;/code&gt;.  The 
value can be a method name in &lt;code&gt;hashlib&lt;/code&gt; module such as &lt;code&gt;md5&lt;/code&gt; or &lt;code&gt;sha256&lt;/code&gt;. &lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The initialization method of both classes has four arguments. Unfortunately those 
arguments do not have default values, which make them difficult to use in other 
python projects. These 4 arguments are listed below.  It seems that only &lt;code&gt;cache_path&lt;/code&gt; 
argument is mandatory. &lt;/p&gt;
&lt;!-- use definition list, add css for dl in custom.css --&gt;

&lt;dl&gt;
&lt;dt&gt;settings&lt;/dt&gt;
&lt;dd&gt;a dict of settings, a few keys &lt;code&gt;CACHE_PATH&lt;/code&gt;, &lt;code&gt;GZIP_CACHE&lt;/code&gt;, and &lt;code&gt;CHECK_MODIFIED_METHOD&lt;/code&gt; are required for the class. &lt;/dd&gt;
&lt;dt&gt;cache_path&lt;/dt&gt;
&lt;dd&gt;the file name to cache.&lt;/dd&gt;
&lt;dt&gt;caching_policy&lt;/dt&gt;
&lt;dd&gt;bool value to decide saving cache. &lt;/dd&gt;
&lt;dt&gt;load_policy&lt;/dt&gt;
&lt;dd&gt;bool value to decide loading cache. &lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;You can derive a class from &lt;code&gt;FileStampDataCacher&lt;/code&gt; and add default values for three 
arguments of &lt;code&gt;__init__&lt;/code&gt; method. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pelican.cache&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FileStampDataCacher&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FileCacher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FileStampDataCacher&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cache_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s1"&gt;&amp;#39;CACHE_PATH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                    &lt;span class="s1"&gt;&amp;#39;GZIP_CACHE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s1"&gt;&amp;#39;CHECK_MODIFIED_METHOD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mtime&amp;#39;&lt;/span&gt; 
                    &lt;span class="c1"&gt;# or sha256, sha512 &lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;caching_policy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;load_policy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FileCacher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cache_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;caching_policy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;load_policy&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is an exmple to test the derived class. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="n"&gt;cacher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FileCacher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cache_file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# filename of cache&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cacher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_cached_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./pelican_help.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./pelican_help.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;cacher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./pelican_help.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cacher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save_cache&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Pelican documentation cautions the use of cache module. The &lt;code&gt;cache.py&lt;/code&gt; file 
in Pelican 4.2.0 has not been modified since 2015. It may be useful 
when a website has thousands of pages.  I personally do not have a use case 
for the cache module yet. &lt;/p&gt;</content><category term="posts"></category><category term="pelican"></category><category term="python"></category></entry><entry><title>Typogrify Python Package</title><link href="https://www.georgexyz.com/typogrify-python-package.html" rel="alternate"></link><published>2020-05-07T08:58:00-04:00</published><updated>2020-05-07T08:58:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-05-07:/typogrify-python-package.html</id><summary type="html">&lt;p&gt;Typogrify Python package is automatically called within Pelican when the setting 
&lt;code&gt;TYPOGRIFY&lt;/code&gt; is true. The &lt;code&gt;typogrify&lt;/code&gt; function is called in &lt;code&gt;Readers.read_file&lt;/code&gt; 
method of &lt;code&gt;readers.py&lt;/code&gt; file. The function acts …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Typogrify Python package is automatically called within Pelican when the setting 
&lt;code&gt;TYPOGRIFY&lt;/code&gt; is true. The &lt;code&gt;typogrify&lt;/code&gt; function is called in &lt;code&gt;Readers.read_file&lt;/code&gt; 
method of &lt;code&gt;readers.py&lt;/code&gt; file. The function acts as a filter and the code looks like 
this. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;content, metadata = read(filename)
if setting[&amp;#39;TYPOGRIFY&amp;#39;]:
    from typogrify.filters import typogrify
    content = typogrify(content)
    metadata[&amp;#39;title&amp;#39;] = typogrify(metadata[&amp;#39;title&amp;#39;])
    metadata[&amp;#39;summary&amp;#39;] = typogrify(metadata[&amp;#39;summary&amp;#39;]) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;typogrify&lt;/code&gt; function calls other 5 filters in the package: &lt;code&gt;amp&lt;/code&gt;, &lt;code&gt;smartypants&lt;/code&gt;, &lt;code&gt;caps&lt;/code&gt;, 
&lt;code&gt;initial_quotes&lt;/code&gt;, and &lt;code&gt;widont&lt;/code&gt;. 
&lt;a href="https://github.com/mintchaos/typogrify"&gt;The documentation&lt;/a&gt; 
on github is clear on what &lt;code&gt;amp&lt;/code&gt;, &lt;code&gt;caps&lt;/code&gt;, and &lt;code&gt;initial_quotes&lt;/code&gt; do. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;smartypants&lt;/code&gt; filter is the most important one in &lt;code&gt;Typogrify&lt;/code&gt; package. It is a 
separate Python package, which is a port of SmartyPants 
Perl program written by John Gruber (who is known as the inventor of the Markdown language). 
The &lt;code&gt;smartypants&lt;/code&gt; &lt;a href="https://github.com/leohemsted/smartypants.py"&gt;documentation on github&lt;/a&gt; 
has information on how to use the Python package. 
The documentation on John Gruber&amp;#8217;s website is more clear on what the program does. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SmartyPants can perform the following transformations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Straight quotes (&lt;code&gt;"&lt;/code&gt; and&lt;code&gt;'&lt;/code&gt;) into &amp;#8220;curly&amp;#8221; quote &lt;span class="caps"&gt;HTML&lt;/span&gt; entities&lt;/li&gt;
&lt;li&gt;Backticks-style quotes (&lt;code&gt;``&lt;/code&gt;like this&lt;code&gt;''&lt;/code&gt;) into &amp;#8220;curly&amp;#8221; quote &lt;span class="caps"&gt;HTML&lt;/span&gt; entities&lt;/li&gt;
&lt;li&gt;Dashes (&amp;#8220;&lt;code&gt;--&lt;/code&gt;&amp;#8221; and &amp;#8220;&lt;code&gt;---&lt;/code&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;) into en- and em-dash entities&lt;/li&gt;
&lt;li&gt;Three consecutive dots (&amp;#8220;&lt;code&gt;...&lt;/code&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;) into an ellipsis entity&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;widont&lt;/code&gt; filter is also interesting. It is &amp;#8220;based on Shaun Inman&amp;#8217;s &lt;span class="caps"&gt;PHP&lt;/span&gt; utility 
of the same name, replaces the space between the last two words in a string with 
&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;code&gt;nbsp;&lt;/code&gt; to avoid a final line of text with only one word&amp;#8221;. 
I do not need this filter for this blog site, so I write a short Pelican plugin to remove 
the &lt;code&gt;widont&lt;/code&gt; filter. Here is the code. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;from pelican import logger
from pelican import signals

from typogrify import filters
from typogrify.filters import process_ignores, applyfilters

def init_rmwidont(sender):
    logger.debug(&amp;#39;Init rmwidont Plugin&amp;#39;)

def register():
    signals.initialized.connect(init_rmwidont)

    def typogrify(text, ignore_tags=None):
        section_list = process_ignores(text, ignore_tags)
        rendered_text = &amp;quot;&amp;quot;
        for text_item, should_process in section_list:
            if should_process:
                rendered_text += applyfilters(text_item)
            else:
                rendered_text += text_item
        ## Remove widont here 
        return rendered_text # widont(rendered_text)

    filters.typogrify = typogrify
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="posts"></category><category term="pelican"></category><category term="web development"></category></entry><entry><title>Tipue Search for Pelican Web Site</title><link href="https://www.georgexyz.com/tipue-search-pelican.html" rel="alternate"></link><published>2020-05-04T22:10:00-04:00</published><updated>2020-05-04T22:10:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-05-04:/tipue-search-pelican.html</id><summary type="html">&lt;p&gt;Pelican has a very nice &lt;a href="https://docs.getpelican.com/en/stable/"&gt;documentation site&lt;/a&gt;. 
However Pelican itself is not the tool that 
generates the site, instead it is created with the Sphinx python documentation tool. 
The site …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pelican has a very nice &lt;a href="https://docs.getpelican.com/en/stable/"&gt;documentation site&lt;/a&gt;. 
However Pelican itself is not the tool that 
generates the site, instead it is created with the Sphinx python documentation tool. 
The site has a nice search function. I wonder how to add such a search feature 
to a static site.&lt;/p&gt;
&lt;p&gt;A little online research reveals that Pelican plugin github repo has a 
&lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/tipue_search"&gt;tipue-search&lt;/a&gt; 
plugin. The Tipue Search tool itself has &lt;a href="https://tipue.com/search/"&gt;a nice website&lt;/a&gt; 
and documentation. I spend a few hours reading the documentation and try to figure out 
how this tool works. &lt;/p&gt;
&lt;p&gt;The tipue-search Pelican plugin creates a js file &lt;code&gt;tipuesearch_content.js&lt;/code&gt; which 
defines a js variable &lt;code&gt;tipuesearch&lt;/code&gt;. The variable is assigned a large js object 
containing all search data. The plugin uses BeautifulSoup to parse html 
title and content of posts and pages generated in Pelican.  The size of the file &lt;code&gt;tipuesearch_content.js&lt;/code&gt; 
obviously depends on the number of pages on a website.  The 41 posts on this 
site result in a 144 &lt;span class="caps"&gt;KB&lt;/span&gt; js file.  &lt;/p&gt;
&lt;p&gt;The Tipue Search tool is mainly a js program.  The web page will download the 
&lt;code&gt;tipuesearch_content.js&lt;/code&gt; file first, and Tipue Search tool will search the data 
and present the results on the page. The package also includes a nice &lt;span class="caps"&gt;CSS&lt;/span&gt; 
file which formats the search box and search results. Below are the steps on 
how to setup the tool for a blog site like this one. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install BeautifulSoup in python virtual environment. Copy tipue_search directory (
   include three files &lt;code&gt;__init__.py&lt;/code&gt;, &lt;code&gt;README.rst&lt;/code&gt;, and &lt;code&gt;tipue_search.py&lt;/code&gt;)
   to the plugin subdirectory under project directory. &lt;/li&gt;
&lt;li&gt;Revise one line and add one additional line of code in &lt;code&gt;pelicanconf.py&lt;/code&gt;. Pelican
  will load the plugin and generate the &lt;code&gt;tipuesearch_content.js&lt;/code&gt; file in output 
  directory. &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="ml-5"&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;PLUGIN_PATHS = [&amp;#39;plugin/&amp;#39;, ]
PLUGINS=[&amp;#39;related_posts&amp;#39;, &amp;#39;tipue_search&amp;#39;]
DIRECT_TEMPLATES = [&amp;#39;index&amp;#39;, &amp;#39;tags&amp;#39;, &amp;#39;categories&amp;#39;, 
    &amp;#39;authors&amp;#39;, &amp;#39;archives&amp;#39;, &amp;#39;search&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Add a &lt;code&gt;search.html&lt;/code&gt; file to the theme templates directory 
(&lt;a href="https://github.com/georgexyz19/georgexyz.com/blob/master/bs4/templates/search.html"&gt;see file on github repo&lt;/a&gt;).
The contents
   of this file is very similar to the demo page of Tipue Search. I also adjusted 
   a few lines of code in &lt;code&gt;base.html&lt;/code&gt; to fit the needs of this new &lt;code&gt;search.html&lt;/code&gt; file. 
   Pelican will automatically generate a corresponding &lt;code&gt;search.html&lt;/code&gt; in output directory. &lt;/li&gt;
&lt;li&gt;Copy Tipue Search tool directory &lt;code&gt;tipuesearch&lt;/code&gt; (including 4 js files and 1 css file) to theme static directory. Pelican will automatically copy them to &lt;code&gt;theme/tipuesearch&lt;/code&gt; under output
directory during site generation. &lt;/li&gt;
&lt;li&gt;Add a link on the Articles page and Tags page which will open the &lt;code&gt;search.html&lt;/code&gt; page. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to try out the Tipue Search tool, click the &lt;a href="/search.html"&gt;link here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;After adding the tipue search to this blog site, I find the search function is really 
convenient even for a small blog site like this. I use it all the time to find 
articles I write before. Every web site should provide some kind of search 
function for users. &lt;/p&gt;
&lt;div class="mt-5 border-top"&gt;
  &lt;h3&gt;Related:&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href="/search.html"&gt;Search Tool&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</content><category term="posts"></category><category term="javascript"></category><category term="pelican"></category><category term="web development"></category></entry><entry><title>Python Program to Create New Pelican Post</title><link href="https://www.georgexyz.com/create-new-pelican-post.html" rel="alternate"></link><published>2020-05-02T15:47:00-04:00</published><updated>2020-05-02T15:47:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-05-02:/create-new-pelican-post.html</id><summary type="html">&lt;p&gt;Pelican comes with a nice command line tool &lt;code&gt;pelican-quickstart&lt;/code&gt;. It 
generates a starter project including &lt;code&gt;pelicanconf.py&lt;/code&gt;, &lt;code&gt;publishconf.py&lt;/code&gt;, 
&lt;code&gt;tasks.py&lt;/code&gt;, and other files and directories.  The source code file …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pelican comes with a nice command line tool &lt;code&gt;pelican-quickstart&lt;/code&gt;. It 
generates a starter project including &lt;code&gt;pelicanconf.py&lt;/code&gt;, &lt;code&gt;publishconf.py&lt;/code&gt;, 
&lt;code&gt;tasks.py&lt;/code&gt;, and other files and directories.  The source code file 
&lt;code&gt;pelican_quickstart.py&lt;/code&gt; is a nice example on how to create similar programs. &lt;/p&gt;
&lt;p&gt;It is not difficult to write a program which generates a new Pelican starter
post. The benefit of the program is that it can automatically fill some meta fields. 
It can also present a list of tags that already used in other posts, and the user 
can pick one or more tags from the list. In addition, each post will have 
consistent meta fields. I write the 
&lt;a href="https://github.com/georgexyz19/georgexyz.com/blob/master/newpost.py"&gt;&lt;code&gt;newpost.py&lt;/code&gt; python program&lt;/a&gt; 
for this purpose.  &lt;/p&gt;
&lt;p&gt;Here is how to run the program. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(georgexyz.com) george@desktop:~/Desktop/georgexyz.com$ python newpost.py 
Welcome to pelican-post v4.2.0.

This script will help you create a new pelican post.

Please answer the following questions so this script can generate the post.

&amp;gt; Where do you want to save the markdown file? [content/posts] 
&amp;gt; What will be the title of this post? [NEW TITLE] Python Program 
        to Create New Pelican Post
&amp;gt; What will be the slug of this post? [python-program-to-create
        -new-pelican-post]create-new-pelican-post
&amp;gt; What will be the date/time of the post? [2020-05-02 15:47] 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;newpost.py&lt;/code&gt; program calls Pelican itself to read all existing posts and 
presents the tags on a list.  Before using the program, I usually open the 
&lt;a href="https://georgexyz.com/tags.html"&gt;&amp;#8220;Tags&amp;#8221; page&lt;/a&gt; of my blog website to pick one 
or more tags for the new post. The program can also generate a &lt;code&gt;related_posts&lt;/code&gt; 
meta field if a user chooses to do so.  Feel free to copy and modify the program 
for your own site.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; Tags already used in other posts (choose one or more): 
    1 -&amp;gt; WSGI
    2 -&amp;gt; bash
    3 -&amp;gt; books
    4 -&amp;gt; bootstrap
    5 -&amp;gt; django
    6 -&amp;gt; flask
    7 -&amp;gt; inkscape
    8 -&amp;gt; javascript
    9 -&amp;gt; linux
    10 -&amp;gt; linux mint
    11 -&amp;gt; pelican
    12 -&amp;gt; python
    13 -&amp;gt; software utility
    14 -&amp;gt; traffic engineering
    15 -&amp;gt; ubuntu
    16 -&amp;gt; vim
    17 -&amp;gt; web development
&amp;gt; Choose one or more tags (e.g. 1, 4) 0 to enter new tag(s) 
        [0] 11, 12
&amp;gt; Do you want to add related posts? (y/N) y
&amp;gt; Posts with same tags (choose one or more) 
    1 -&amp;gt; Pelican Related Posts and&amp;amp;nbsp;Translation
    2 -&amp;gt; Print Python Source Code on&amp;amp;nbsp;Paper
    3 -&amp;gt; Pelican Source Code and&amp;amp;nbsp;Plugin
    ......
&amp;gt; Choose one or more articles (e.g. 1, 3) 0 to cancel [0] 1
&amp;gt; Add a number for the post (start from 1) [41] 
&amp;gt; Add a short note to yourself for this post? [note to be added] 
        A post about how to create new Pelican post.
&amp;gt; Write the first sentence of the article [This is the 
        first sentence ...] 
Done. Your new post is available at content/posts
(georgexyz.com) george@desktop:~/Desktop/desktop/georgexyz.com$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="posts"></category><category term="pelican"></category><category term="python"></category></entry><entry><title>Pelican Related Posts and Translation</title><link href="https://www.georgexyz.com/pelican-related-posts-translation.html" rel="alternate"></link><published>2020-04-28T12:02:00-04:00</published><updated>2020-04-28T12:02:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-04-28:/pelican-related-posts-translation.html</id><summary type="html">&lt;p&gt;The Pelican source code has a related_posts attribute defined in the &lt;code&gt;Generator&lt;/code&gt; class. The variable 
is initialized as a blank list and is not used in the program. I do …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Pelican source code has a related_posts attribute defined in the &lt;code&gt;Generator&lt;/code&gt; class. The variable 
is initialized as a blank list and is not used in the program. I do a Google search and find 
a plugin called &lt;code&gt;related_posts&lt;/code&gt; in the pelican plugin repo. The &lt;code&gt;related_posts&lt;/code&gt; plugin has a 
&lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/related_posts"&gt;one page documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Related Posts Plugin&lt;/h3&gt;
&lt;p&gt;Related posts could be a useful function for a blog site like this.  When I start a new blog post, 
it is often related to a previous post.  It&amp;#8217;s logical to add links to previous related posts 
either on a sidebar or at the bottom of the new article. Here are the steps to setup the plugin. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a sub-directory &lt;code&gt;plugin&lt;/code&gt; in the project directory. Copy the &lt;code&gt;related_posts&lt;/code&gt; directory
  to the &lt;code&gt;plugin&lt;/code&gt;. It includes three files &lt;code&gt;__init__.py&lt;/code&gt;, &lt;code&gt;related_posts.py&lt;/code&gt;, and &lt;code&gt;Readme.rst&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;In this site, posts with same tags should not be counted as related posts, so I comment out 
  the lines 37 to 53 in the &lt;code&gt;related_posts.py&lt;/code&gt; file. &lt;/li&gt;
&lt;li&gt;Add the following settings to &lt;code&gt;pelicanconf.py&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="ml-5"&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;PLUGIN_PATHS = [&amp;#39;plugin/&amp;#39;, ]
PLUGINS=[&amp;#39;related_posts&amp;#39;,]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Add the following html snippet to the &lt;code&gt;article.html&lt;/code&gt; template file after statement &lt;code&gt;{{ article.content }}&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="ml-5"&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{% if article.related_posts %}
&amp;lt;div class=&amp;quot;mt-5 border-top&amp;quot;&amp;gt;
  &amp;lt;h3&amp;gt;Related Posts:&amp;lt;/h3&amp;gt;
  &amp;lt;ul&amp;gt;
    {% for related_post in article.related_posts %}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ SITEURL }}/{{ related_post.url }}&amp;quot;&amp;gt;
      {{ related_post.title }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    {% endfor %}
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Add a meta field to the post. The contents of the field are slugs of previous posts. &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="ml-5"&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;related_posts: print-source-code-paper, pelican-source-code-plugin, ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;

&lt;p&gt;After those steps, each article will have a section &amp;#8220;Related Posts&amp;#8221; like on this page 
if the post includes a meta field &lt;code&gt;related_posts&lt;/code&gt;. &lt;/p&gt;
&lt;h3&gt;Translation&lt;/h3&gt;
&lt;p&gt;This site does not have any translated articles. But I find it is not difficult to 
translate articles to other languages with Pelican after reading the source code. &lt;/p&gt;
&lt;p&gt;You can set a meta field such as &lt;code&gt;lang: es&lt;/code&gt; for a translated article.  The article should 
have the same slug as the original one. Then, you can add the following html snippet on 
the &lt;code&gt;artilce.html&lt;/code&gt; template. The page will have a link to the translated 
article in another language. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{% if article.translations %}
  &amp;lt;hr&amp;gt;
  {% for art in article.translations %}
      &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;{{ art.url }}&amp;quot;&amp;gt;{{ art.title }}&amp;lt;/a&amp;gt; in language
      {% if art.lang == &amp;#39;en&amp;#39; %} 
          English
      {% elif art.lang == &amp;#39;es&amp;#39; %}
          Spanish
      {% endif %} 
      &amp;lt;/p&amp;gt;
  {% endfor %}
{% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="posts"></category><category term="web development"></category><category term="pelican"></category></entry><entry><title>Print Python Source Code on Paper</title><link href="https://www.georgexyz.com/print-source-code-paper.html" rel="alternate"></link><published>2020-04-23T09:29:00-04:00</published><updated>2020-04-23T09:29:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-04-23:/print-source-code-paper.html</id><summary type="html">&lt;p&gt;I am reading Pelican source code. Sometimes I do not have a computer nearby, and I want to
print out the source code on paper. The current release of Pelican …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am reading Pelican source code. Sometimes I do not have a computer nearby, and I want to
print out the source code on paper. The current release of Pelican is version 4.2.0. The
source code is &lt;a class="reference external" href="https://github.com/getpelican/pelican"&gt;available on github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After you &lt;code&gt;git clone&lt;/code&gt; the code to local drive, you can run the following Linux
command to have a basic idea of the code base. The number of lines of Pelican 4.2 code is
5,762.  The file
&lt;code&gt;generators.py&lt;/code&gt; is the longest with 937 lines. The main code base has
15 python files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/getpelican/pelican.git
$ git checkout 4.2.0 ## code is on master branch by default
$ cd pelican

$ find . -maxdepth 1 -name &amp;#39;*.py&amp;#39; -exec wc -l &amp;#39;{}&amp;#39; + | sort -n
10 ./__main__.py
52 ./signals.py
95 ./rstdirectives.py
133 ./urlwrappers.py
141 ./cache.py
143 ./server.py
163 ./paginator.py
269 ./log.py
278 ./writers.py
578 ./__init__.py
615 ./contents.py
668 ./settings.py
759 ./readers.py
921 ./utils.py
937 ./generators.py
5762 total
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A Google search finds this article &lt;a class="reference external" href="https://medium.com/&amp;#64;tashian/print-out-your-code-on-paper-7c760a376bca"&gt;Print Out Your Code On Paper&lt;/a&gt; on medium.com. The
author made some good points in the article. It also introduces
a piece of Unix/Linux command line software called &lt;code&gt;enscript&lt;/code&gt;, which can covert
text code to postscript file. A typical command looks like this,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;enscript -1rG --line-numbers -p out.ps --highlight=python \
    -c inputfile.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A furthur Google search finds &lt;a class="reference external" href="http://manpages.ubuntu.com/manpages/precise/en/man1/enscript.1.html"&gt;an online man page&lt;/a&gt; for &lt;code&gt;enscript&lt;/code&gt;. The page has
detailed infomation regarding the software options and configuration files.&lt;/p&gt;
&lt;p&gt;The default fancy header configuration file &lt;code&gt;enscript.hdr&lt;/code&gt; is stored in the directory
&lt;code&gt;/usr/share/enscript/&lt;/code&gt;. I want to change the date and time on the left corner to
current date/time. Also I want to change the page number on the right corner to &amp;#8220;number
of pages processed so far&amp;#8221; rather than the default &amp;#8220;current page numbers&amp;#8221;. An easy way
is to copy the &lt;code&gt;enscript.hdr&lt;/code&gt; to a new &lt;code&gt;enscript_mod.hdr&lt;/code&gt; file and copy back
the modified file to the directory. I only change three lines of code in
&lt;code&gt;enscript_mod.hdr&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;%Format: moddatestr %W
%Format: modtimestr %C
%Format: pagenumstr $p
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that, I write a short python script to call the &lt;code&gt;enscript&lt;/code&gt; command. The
python code is shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#! python3&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# sudo cp enscript_mod.hdr /usr/share/enscript/&lt;/span&gt;
&lt;span class="c1"&gt;# the mod hdr file change the file mod date/time to current date/time&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# note that the hdr file should be in configuration dir&lt;/span&gt;
&lt;span class="c1"&gt;# see ubuntu manpage&lt;/span&gt;
&lt;span class="c1"&gt;# http://manpages.ubuntu.com/manpages/precise/en/man1/enscript.1.html&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# convert ps to pdf&lt;/span&gt;
&lt;span class="c1"&gt;# ps2pdfwr pelican.ps pelican_print.pdf&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;

&lt;span class="c1"&gt;# result of $ls -S -l *.py&lt;/span&gt;
&lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;-rw-r--r-- 1 george george 38186 Apr 23 17:00 generators.py&lt;/span&gt;
&lt;span class="s1"&gt;-rw-r--r-- 1 george george 30603 Apr 23 17:00 utils.py&lt;/span&gt;
&lt;span class="s1"&gt;-rw-r--r-- 1 george george 27685 Apr 23 17:00 readers.py&lt;/span&gt;
&lt;span class="s1"&gt;-rw-r--r-- 1 george george 25993 Apr 23 17:00 settings.py&lt;/span&gt;
&lt;span class="s1"&gt;-rw-r--r-- 1 george george 23017 Apr 23 17:00 contents.py&lt;/span&gt;
&lt;span class="s1"&gt;-rw-r--r-- 1 george george 22475 Apr 23 17:00 __init__.py&lt;/span&gt;
&lt;span class="s1"&gt;-rw-r--r-- 1 george george 11345 Apr 23 17:00 writers.py&lt;/span&gt;
&lt;span class="s1"&gt;-rw-r--r-- 1 george george  8038 Apr 23 17:00 log.py&lt;/span&gt;
&lt;span class="s1"&gt;-rw-r--r-- 1 george george  5466 Apr 23 17:00 paginator.py&lt;/span&gt;
&lt;span class="s1"&gt;-rw-r--r-- 1 george george  5283 Apr 23 17:00 server.py&lt;/span&gt;
&lt;span class="s1"&gt;-rw-r--r-- 1 george george  5247 Apr 23 17:00 cache.py&lt;/span&gt;
&lt;span class="s1"&gt;-rw-r--r-- 1 george george  3980 Apr 23 17:00 urlwrappers.py&lt;/span&gt;
&lt;span class="s1"&gt;-rw-r--r-- 1 george george  3026 Apr 23 17:00 rstdirectives.py&lt;/span&gt;
&lt;span class="s1"&gt;-rw-r--r-- 1 george george  1770 Apr 23 17:00 signals.py&lt;/span&gt;
&lt;span class="s1"&gt;-rw-r--r-- 1 george george   165 Apr 23 17:00 __main__.py&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fnlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;filenames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;fns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;filenames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;filenames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# print(filenames)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;filenames&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;cwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./pelican/pelican&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;filenames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fnlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;enscript --fancy-header=enscript_mod --line-numbers &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
        &lt;span class="s1"&gt;&amp;#39;-p ../../pelican_code_print.ps &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
        &lt;span class="s1"&gt;&amp;#39;--highlight=python &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
        &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--color=1 -c &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;filenames&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;shell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;capture_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After those steps. the final pdf file (&lt;span class="caps"&gt;277KB&lt;/span&gt;) of Pelican 4.2 source code can be downloaded &lt;a class="reference external" href="/files/pelican_code_print.pdf"&gt;here&lt;/a&gt;.
If you print it out, it will be 103 pages on letter size paper.&lt;/p&gt;
</content><category term="posts"></category><category term="python"></category><category term="pelican"></category><category term="software utility"></category></entry><entry><title>Pelican Source Code and Plugin</title><link href="https://www.georgexyz.com/pelican-source-code-plugin.html" rel="alternate"></link><published>2020-04-19T22:08:00-04:00</published><updated>2020-04-19T22:08:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-04-19:/pelican-source-code-plugin.html</id><summary type="html">&lt;p&gt;Articles on this website before this one are all written in markdown format. I want to
write some articles in reStructuredText (rst) format but the default &lt;code&gt;docutils&lt;/code&gt; tool
that comes …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Articles on this website before this one are all written in markdown format. I want to
write some articles in reStructuredText (rst) format but the default &lt;code&gt;docutils&lt;/code&gt; tool
that comes with Pelican has a flaw causing me to stay away from the rst format.&lt;/p&gt;
&lt;p&gt;The problem is that the top title of an aritle (e.g. &amp;#8220;Pelican Source Code and Plugin&amp;#8221;
on this page) is rendered as &lt;code&gt;h2&lt;/code&gt; html tag, and section title (e.g. &amp;#8220;Pelican Plugin&amp;#8221;
section below) starts with &lt;code&gt;h3&lt;/code&gt; tag. It is designed this way since the start of the website.
In a markdown file, I can add two &lt;code&gt;#&lt;/code&gt; to specify a title as &lt;code&gt;h2&lt;/code&gt;.  There is
no easy way to specify the heading levels in rst files.&lt;/p&gt;
&lt;p&gt;The same problem is described in this &lt;a class="reference external" href="https://github.com/github/markup/issues/567"&gt;question&lt;/a&gt; on github.&lt;/p&gt;
&lt;div class="section" id="pelican-plugin"&gt;
&lt;h3&gt;Pelican Plugin&lt;/h3&gt;
&lt;p&gt;When I am reading Pelican source code, I find that the Pelican class in the
&lt;code&gt;__init__.py&lt;/code&gt; file has an &lt;code&gt;init_plugins&lt;/code&gt; method. This method calls each plugin&amp;#8217;s
register function as shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init_plugins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;plugin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PLUGINS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="o"&gt;.....&lt;/span&gt;
        &lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Pelican plugin page has an existing plugin &lt;code&gt;headerid&lt;/code&gt; which implements a similar
function.  It adds anchor tags to headings in rst files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="override-docutils-method"&gt;
&lt;h3&gt;Override Docutils Method&lt;/h3&gt;
&lt;p&gt;Google searching class names
in the &lt;code&gt;headerid&lt;/code&gt; plugin lead me to a very nice article
&lt;a class="reference external" href="https://www.devdungeon.com/content/restructuredtext-rst-tutorial-0"&gt;reStructureText(&lt;span class="caps"&gt;RST&lt;/span&gt;) Tutorial&lt;/a&gt;.
This article discusses the exact same heading problem I have with the rst format and
has code examples on how to solve it.  It becomes easy for me to modify the code in
this article to a Pelican plugin which is very similar to &lt;code&gt;headerid&lt;/code&gt;.  I name this new
Pelican plugin &lt;code&gt;headinglower&lt;/code&gt; which lowers the heading levels in rst files.&lt;/p&gt;
&lt;div class="section" id="headinglower-code"&gt;
&lt;h4&gt;Headinglower Code&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;headinglower&lt;/code&gt; plugin has two files. The &lt;code&gt;__init__.py&lt;/code&gt; file only has one line of code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# __init__.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.headinglower&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;headinglower.py&lt;/code&gt; file has the following code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# headinglower.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pelican&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;readers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pelican.readers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PelicanHTMLTranslator&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pelican&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;docutils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init_headinglower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Init Headinglower Plugin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialized&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;init_headinglower&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ModPelicanHTMLTranslator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PelicanHTMLTranslator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;visit_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Only 6 section levels are supported by HTML.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
            &lt;span class="n"&gt;close_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;topic&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starttag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CLASS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;topic-title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sidebar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starttag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CLASS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sidebar-title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Admonition&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starttag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CLASS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admonition-title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starttag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;caption&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;close_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/caption&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starttag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;h1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CLASS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;close_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;in_document_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="c1"&gt;## revise here, comment out ( - 1 )&lt;/span&gt;
                &lt;span class="n"&gt;h_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;section_level&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initial_header_level&lt;/span&gt; &lt;span class="c1"&gt;# - 1&lt;/span&gt;
                &lt;span class="n"&gt;atts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
                    &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subtitle&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                    &lt;span class="n"&gt;atts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CLASS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;with-subtitle&amp;#39;&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starttag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;h&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;h_level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;atts&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;atts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;atts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;toc-backref&amp;#39;&lt;/span&gt;
                    &lt;span class="n"&gt;atts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;atts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starttag&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;atts&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                    &lt;span class="n"&gt;close_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/a&amp;gt;&amp;lt;/h&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h_level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;close_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/h&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h_level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;close_tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;readers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PelicanHTMLTranslator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ModPelicanHTMLTranslator&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code add a method &lt;code&gt;visit_title&lt;/code&gt; to the PelicanHTMLTranslator class.  It overrides a method
defined in &lt;code&gt;HTMLTranslator&lt;/code&gt; class of docutils.writers._html_base module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="plugin-settings"&gt;
&lt;h4&gt;Plugin Settings&lt;/h4&gt;
&lt;p&gt;Add the following settings to the &lt;code&gt;pelicanconf.py&lt;/code&gt;. Pelican will automatically load the
plugin.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PLUGIN_PATHS = [&amp;#39;plugin/&amp;#39;, ]
PLUGINS=[&amp;#39;headinglower&amp;#39;,]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="better-way"&gt;
&lt;h3&gt;Better Way&lt;/h3&gt;
&lt;p&gt;The above method works well and solves my problem.  But there is a better and easier
way to solve the exact problem.  Pelican has over 100 settings, and one
of them is &lt;code&gt;DOCUTILS_SETTINGS&lt;/code&gt;.  It is described on the &lt;a class="reference external" href="https://docs.getpelican.com/en/stable/settings.html"&gt;documentation&lt;/a&gt; page as:&lt;/p&gt;
&lt;blockquote&gt;
Extra configuration settings for the docutils publisher (applicable only to
reStructuredText). See Docutils Configuration settings for more details.&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;RstReader&lt;/code&gt; class in &lt;code&gt;readers.py&lt;/code&gt; file of Pelican source code has a method
&lt;code&gt;_get_publisher&lt;/code&gt;. It has the following lines of code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;extra_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;initial_header_level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s1"&gt;&amp;#39;syntax_highlight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;short&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s1"&gt;&amp;#39;input_encoding&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s1"&gt;&amp;#39;language_code&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_language_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s1"&gt;&amp;#39;halt_level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s1"&gt;&amp;#39;traceback&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s1"&gt;&amp;#39;warning_stream&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                    &lt;span class="s1"&gt;&amp;#39;embed_stylesheet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;user_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DOCUTILS_SETTINGS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user_params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;extra_params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can simply set the &lt;code&gt;initial_header_level&lt;/code&gt; value to 3 and the problem is solved.
Add the following settings in the &lt;code&gt;pelicanconf.py&lt;/code&gt;, the first section title heading will
become &lt;code&gt;h3&lt;/code&gt;.  Note the article title heading level &lt;code&gt;h2&lt;/code&gt; is actually set in the
&lt;code&gt;article.html&lt;/code&gt; template file. I also comment out the two plugin settings
shown in the previous section.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DOCUTILS_SETTINGS = {&amp;#39;initial_header_level&amp;#39;: &amp;#39;3&amp;#39;, }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="rst-file-of-this-article"&gt;
&lt;h3&gt;Rst File of This Article&lt;/h3&gt;
&lt;p&gt;The rst file of this article is available on github. &lt;a class="reference external" href="https://github.com/georgexyz19/georgexyz.com/blob/master/content/posts/pelican-source-code-plugin.rst"&gt;Click here&lt;/a&gt; to read the source file and click
&amp;#8220;Raw&amp;#8221; button to see the text file.&lt;/p&gt;
&lt;/div&gt;
</content><category term="posts"></category><category term="python"></category><category term="pelican"></category></entry><entry><title>New Pelican Theme</title><link href="https://www.georgexyz.com/new-theme-2020.html" rel="alternate"></link><published>2020-04-11T22:31:00-04:00</published><updated>2020-04-11T22:31:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-04-11:/new-theme-2020.html</id><summary type="html">&lt;p&gt;This site has been online for more than one year.  It is time to revise the pelican 
theme to present a new look.  I spend a few hours revising the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This site has been online for more than one year.  It is time to revise the pelican 
theme to present a new look.  I spend a few hours revising the code, and now 
it is easier for myself to publish or revise articles. &lt;/p&gt;
&lt;p&gt;The Bootstrap theme css file is now compiled on my computer.  It is not too difficult to 
compile Bootstrap scss to css. This 17 minute long youtube video explains it very well. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/6Ovw43Dkp44"&gt;Bootstrap 4 Theme Customization with Sass&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I install Node version of Sass and Minify in Linux Mint with these commands. The Minify 
tool removes extra blanks and line breaks in the css, and it also works for js and html files. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$sudo npm install -g sass
$sudo npm install -g minify

#compile sass to css
$sass main.scss main.css
$minify main.css &amp;gt; main.min.css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The main.scss for the new theme has those contents. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$font-size-base: 1.1rem;
$h5-font-size: $font-size-base * 1.0;
$h4-font-size: $font-size-base * 1.1;
$h3-font-size: $font-size-base * 1.4;
$h2-font-size: $font-size-base * 1.6;
$h1-font-size: $font-size-base * 1.8;

$paragraph-margin-bottom: 1.2rem;
$headings-margin-bottom:  1.0rem;

$body-color: #111;
$headings-color: #333;
$link-color: #0017c7;
$code-color: #15228a;
$code-font-size: 88%;

$print-page-size: letter;

@import &amp;quot;node_modules/bootstrap/scss/bootstrap&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The light blue color of the navbar is set in the &lt;code&gt;base.html&lt;/code&gt; file, which is copied from
Bootstrap documentation. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;lt;nav class=&amp;quot;navbar navbar-expand-md navbar-light&amp;quot; style=&amp;quot;background-color: #e3f2fd;&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;pelicanconf.py&lt;/code&gt; file also has a few changes.  I remove default index.html page and 
change the previous about page to new homepage.  The Python &lt;code&gt;Typogrify&lt;/code&gt; package makes 
&amp;#8220;double quotes&amp;#8221; and other html elements look better. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# DEFAULT_PAGINATION = 3&lt;/span&gt;
&lt;span class="n"&gt;INDEX_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SUMMARY_MAX_LENGTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;

&lt;span class="c1"&gt;# link to this file in base.html&lt;/span&gt;
&lt;span class="c1"&gt;# work computer blocks archives.html web page&lt;/span&gt;
&lt;span class="n"&gt;ARCHIVES_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;articlelist.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TYPOGRIFY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;tasks.py&lt;/code&gt; file created by the pelican-quickstart command has a &lt;code&gt;livereload&lt;/code&gt; task, which 
requires installing a Python package with the same name &lt;code&gt;livereload&lt;/code&gt;.  The live reload function
is really nice.  This is something you do not think you need before trying it, but after trying 
it you fall love with it.  The default setting only watches for markdown and &lt;span class="caps"&gt;RST&lt;/span&gt; 
file types, you can add html to the list of files to watch. &lt;/p&gt;
&lt;p&gt;I also change the github repo to &lt;span class="caps"&gt;SSH&lt;/span&gt; connection instead of &lt;span class="caps"&gt;HTTPS&lt;/span&gt; connection and add a public
&lt;span class="caps"&gt;SSH&lt;/span&gt; key to the github account, so I do not need to type password when I update the github 
repo.  This stackoverflow Q/A shows how to do it. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/14762034/push-to-github-without-password-using-ssh-key"&gt;How to Push to Github with &lt;span class="caps"&gt;SSH&lt;/span&gt; Key&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To end this post, below is a screen shot of this site with old theme.&lt;/p&gt;
&lt;div style="max-width:800px"&gt;
  &lt;img class="img-fluid pb-3" src="/images/homepage2019.png" alt="Old theme"&gt; 
&lt;/div&gt;</content><category term="posts"></category><category term="web development"></category><category term="pelican"></category></entry><entry><title>What is RSS/ATOM Feed?</title><link href="https://www.georgexyz.com/rss-feed.html" rel="alternate"></link><published>2020-04-10T09:27:00-04:00</published><updated>2020-04-10T09:27:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-04-10:/rss-feed.html</id><summary type="html">&lt;p&gt;The 
&lt;a href="https://docs.getpelican.com/en/4.2.0/themes.html#feeds"&gt;Pelican documention&lt;/a&gt;
has a short section on &lt;span class="caps"&gt;ATOM&lt;/span&gt;/&lt;span class="caps"&gt;RSS&lt;/span&gt; feed.  I have seen &lt;span class="caps"&gt;RSS&lt;/span&gt;/&lt;span class="caps"&gt;ATOM&lt;/span&gt; feed links somewhere before, but never paid 
much attention to them.  A Google search …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The 
&lt;a href="https://docs.getpelican.com/en/4.2.0/themes.html#feeds"&gt;Pelican documention&lt;/a&gt;
has a short section on &lt;span class="caps"&gt;ATOM&lt;/span&gt;/&lt;span class="caps"&gt;RSS&lt;/span&gt; feed.  I have seen &lt;span class="caps"&gt;RSS&lt;/span&gt;/&lt;span class="caps"&gt;ATOM&lt;/span&gt; feed links somewhere before, but never paid 
much attention to them.  A Google search finds these two nice introduction articles. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.business2community.com/blogging/a-few-simple-benefits-of-using-an-rss-feed-0144503"&gt;A Few Simple Benefits of Using An &lt;span class="caps"&gt;RSS&lt;/span&gt; Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thesitewizard.com/faqs/howtoreadsitefeeds.shtml"&gt;How to Subscribe to or Read an &lt;span class="caps"&gt;RSS&lt;/span&gt; Site Feed or an &lt;span class="caps"&gt;ATOM&lt;/span&gt; Feed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first linked article has a sentence which explains the benefit of &lt;span class="caps"&gt;RSS&lt;/span&gt;/&lt;span class="caps"&gt;ATOM&lt;/span&gt; Feed very well. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The main benefit of &lt;span class="caps"&gt;RSS&lt;/span&gt; is that instead of having to go out to each individual 
website and see if there is any new content, content comes to you in one centralized location. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Firefox web browser has an extension Feedbro which is easy to use.  I subscribe five 
websites I often visit and it works well. Most major websites have &lt;span class="caps"&gt;RSS&lt;/span&gt; feeds available, and only 
one website I visit often does not have one. &lt;/p&gt;
&lt;div style="max-width:800px"&gt;
  &lt;img class="img-fluid pb-3" src="/images/feedbro.png" alt="Feedbro Screenshot"&gt; 
&lt;/div&gt;

&lt;p&gt;It is really easy to provide &lt;span class="caps"&gt;RSS&lt;/span&gt; feeds for this personal blog site because Pelican can 
generate feeds. In the pelican setting file, change 
&lt;code&gt;SITEURL&lt;/code&gt; and &lt;code&gt;FEED_ALL_ATOM&lt;/code&gt; settings to the values shown below to tell Pelican 
to generate feeds for all blog posts. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;SITEURL = &amp;#39;https://www.georgexyz.com&amp;#39;
FEED_ALL_ATOM = &amp;#39;feeds/all.atom.xml&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can subscribe to the &lt;span class="caps"&gt;ATOM&lt;/span&gt; feed of this website thru this link 
&lt;a href="https://www.georgexyz.com/feeds/all.atom.xml"&gt;https://www.georgexyz.com/feeds/all.atom.xml&lt;/a&gt;.&lt;/p&gt;</content><category term="posts"></category><category term="web development"></category></entry><entry><title>Python Dictionary Methods</title><link href="https://www.georgexyz.com/dict-methods.html" rel="alternate"></link><published>2020-04-06T09:40:00-04:00</published><updated>2020-04-06T09:40:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-04-06:/dict-methods.html</id><summary type="html">&lt;p&gt;Some Python code I read yesterday uses dictionary methods &lt;code&gt;copy&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt;. 
This prompted me to test those two methods and check all other python dictionary methods. &lt;/p&gt;
&lt;p&gt;Here is the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some Python code I read yesterday uses dictionary methods &lt;code&gt;copy&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt;. 
This prompted me to test those two methods and check all other python dictionary methods. &lt;/p&gt;
&lt;p&gt;Here is the code testing the two methods:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python official documentation lists dictionary methods on the 
&lt;a href="https://docs.python.org/3/library/stdtypes.html"&gt;Built-in Types&lt;/a&gt; 
page. The page has a seciton 
&lt;a href="https://docs.python.org/3/library/stdtypes.html#typesmapping"&gt;Mapping Types - dict&lt;/a&gt;
which lists all dictionary methods. The notable class methods are &lt;code&gt;clear&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt;, 
&lt;code&gt;fromkeys&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;items&lt;/code&gt;, &lt;code&gt;keys&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;popitem&lt;/code&gt;, &lt;code&gt;setdefault&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, and 
&lt;code&gt;values&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;I found some interesting online documentation when searching for the topic. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This blog post 
&lt;a href="https://www.ibisc.univ-evry.fr/~fpommereau/blog/2009-05-12-copy-a-python-dict-with-updates.html"&gt;Copy a Python Dict with Updates&lt;/a&gt; 
has an example of &lt;code&gt;copy&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; methods.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/5551672/how-to-copy-a-dict-and-modify-it-in-one-line-of-code"&gt;This stackoverflow Q&amp;amp;A&lt;/a&gt; 
discusses the same problem&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/python/python_ref_dictionary.asp"&gt;This webpage&lt;/a&gt; 
on W3schools.com has a list of python dictionary methods. &lt;/li&gt;
&lt;li&gt;Realpython.com has an article 
&lt;a href="https://realpython.com/python-dicts/#restrictions-on-dictionary-values"&gt;Dictionaries in Python&lt;/a&gt;
which discusses the dictionary with more details. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The dictionary is so fundamental in Python and programmers should become familar with those methods. &lt;/p&gt;</content><category term="posts"></category><category term="python"></category></entry><entry><title>A Collection of Web Links</title><link href="https://www.georgexyz.com/web-links.html" rel="alternate"></link><published>2020-04-01T23:30:00-04:00</published><updated>2020-04-09T08:54:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-04-01:/web-links.html</id><summary type="html">&lt;p&gt;This page has a collection of web links that I visit often.&lt;/p&gt;
&lt;h3&gt;Flask Web Framework&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://flask.palletsprojects.com/en/1.1.x/tutorial/"&gt;Official Flask Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pallets/flask/tree/master/examples/tutorial"&gt;Official Flask Tutorial Source Code on Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;The Flask Mega-Tutorial by Miguel …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;This page has a collection of web links that I visit often.&lt;/p&gt;
&lt;h3&gt;Flask Web Framework&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://flask.palletsprojects.com/en/1.1.x/tutorial/"&gt;Official Flask Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pallets/flask/tree/master/examples/tutorial"&gt;Official Flask Tutorial Source Code on Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;The Flask Mega-Tutorial by Miguel Grinberg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/miguelgrinberg/flasky"&gt;Flask Web Framework Book Source Code on Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mbr/flask-bootstrap"&gt;Flask Extension Flask-Bootstrap Source Code&lt;/a&gt;&lt;/p&gt;
&lt;p class="pl-3"&gt;Flask-Bootstrap still bundles with Bootstrap 3.X.  Use Flask-&lt;span class="caps"&gt;BS4&lt;/span&gt; instead. (4/4/2020)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/hfilimonescu/flask-bs4"&gt;Flask Extension Flask-&lt;span class="caps"&gt;BS4&lt;/span&gt; Source Code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/miguelgrinberg/Flask-Moment"&gt;Flask Extension Flask-Moment Source Code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://flask-sqlalchemy.palletsprojects.com/en/2.x/"&gt;Flask Extension Flask-SQLAlchemy Documentaion&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://flask-migrate.readthedocs.io/en/latest/"&gt;Flask Extension Flask-Migrate Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/Flask-Mail/"&gt;Flask Extension Flask-Mail Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://flask-login.readthedocs.io/en/latest/"&gt;Flask Extension Flask-Login Documentation&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PL-osiE80TeTs4UjLw5MM6OjgkjFeUxCYH"&gt;Flask Tutorial by Corey Schafer on Youtube &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/CoreyMSchafer/code_snippets/tree/master/Python/Flask_Blog"&gt;Flask Tutorial by Corey Schafer Source Code&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Python Language&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://automatetheboringstuff.com/"&gt;Automate The Boring Stuff with Python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://greenteapress.com/thinkpython2/html/index.html"&gt;Think Python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nbviewer.jupyter.org/github/justmarkham/python-reference/blob/master/reference.ipynb"&gt;Python Quick Reference by Data School&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://treyhunner.com/2019/05/python-builtins-worth-learning/"&gt;Python built-ins worth learning&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/OSGv2VnC0go"&gt;Transforming Code into Beautiful, Idiomatic Python Youtube Video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/JeffPaine/beautiful_idiomatic_python"&gt;Transforming Code into Beautiful, Idiomatic Python Code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.google.com/edu/python/"&gt;Google&amp;#8217;s Python Class&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pymotw.com/3/"&gt;Python 3 Module of the Week PyMOTW-3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/tutorial/index.html"&gt;The Python Tutorial on python.org&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Javascript Language&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://eloquentjavascript.net/"&gt;Eloquent Javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://javascript.info/"&gt;The Modern Javascript Tutorial Javascript.info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://momentjs.com/"&gt;Javascript Moment (Momentjs) Date and Time Display Library&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tipue.com/search/"&gt;Tipue Search Tool&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt; and &lt;span class="caps"&gt;CSS&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://getbootstrap.com/"&gt;Front End Web Framework Bootstrap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.internetingishard.com/html-and-css/"&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; &lt;span class="caps"&gt;CSS&lt;/span&gt; Is Hard - Web Book&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Pelican Static Site Generator&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican"&gt;Pelican Python Source Code repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.getpelican.com/en/stable/"&gt;Pelican Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.fullstackpython.com/blog/generating-static-websites-pelican-jinja2-markdown.html"&gt;Full Stack Python Pelican Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.fullstackpython.com/pelican.html"&gt;Pelican Resource Links on Full Stack Python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://python-markdown.github.io/"&gt;Python Markdown Documentation&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Markdown and &lt;span class="caps"&gt;RST&lt;/span&gt; Reference&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet"&gt;Markdown Cheatsheet on Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.markdownguide.org/basic-syntax/"&gt;Markdown Basic Syntax on Markdownguid.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docutils.sourceforge.io/rst.html"&gt;reStructuredText Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ralsina/rst-cheatsheet/blob/master/rst-cheatsheet.rst"&gt;reStructuredText Cheatsheet on Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx - Python Documentation Generator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.devdungeon.com/content/restructuredtext-rst-tutorial-0"&gt;reStructuredText Tutorial on devdungeon.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docutils.readthedocs.io/en/sphinx-docs/index.html#"&gt;docutils Documentation on readthedocs.io&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Database&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.sqlalchemy.org/en/13/"&gt;SQLAlchemy Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.mysqltutorial.org/"&gt;MySql Tutorial Website&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Git and Github&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://product.hubspot.com/blog/git-and-github-tutorial-for-beginners"&gt;An Intro to Git and Github for Beginners (Tutorial) by Meghan Nelson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://realpython.com/python-git-github-intro/"&gt;Intro to Git and Github for Python Developers on Realpython.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://marklodato.github.io/visual-git-guide/index-en.html"&gt;A Visual Git Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=HVsySz-h9r4&amp;amp;list=PL-osiE80TeTuRUfjRe54Eea17-YfnOOAx"&gt;Git Tutorial Youtube Video by Corey Schafer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://git-scm.com/docs"&gt;Git Command Reference on git-scm.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://git-scm.com/book/en/v2"&gt;Pro Git Book on git-scm.com&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Date and Time&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.foragoodstrftime.com/"&gt;For a Good Strftime&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pymotw.com/3/datetime/"&gt;Python datetime Module in PyMOTW-3&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Others&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.google.com/inputtools/try/"&gt;Google Input Tools&lt;/a&gt;&lt;/p&gt;</content><category term="posts"></category><category term="web development"></category></entry><entry><title>Two Flask Books by Miguel Grinberg</title><link href="https://www.georgexyz.com/flask-books.html" rel="alternate"></link><published>2020-04-01T23:00:00-04:00</published><updated>2020-04-01T23:00:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-04-01:/flask-books.html</id><summary type="html">&lt;p&gt;This static blog site started on Github one year ago on April 1, 2009. 
It has been one year, and it is going better than I originally planned. 
The most …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This static blog site started on Github one year ago on April 1, 2009. 
It has been one year, and it is going better than I originally planned. 
The most frequent visitor of the site is most likely myself, and the site 
serves as an online notepad for myself. &lt;/p&gt;
&lt;p&gt;I recently finished reading two Flask books by Miguel Grinberg.  The first 
one is &lt;em&gt;Flask Web Development - Developing Web Applications with Python&lt;/em&gt;, and 
the second book is &lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;The new and Improved Flask Mega Tutorial&lt;/a&gt;. 
Both books are fantastic. They are better than every Django book I have read, and they are 
definitely among the top programming books. &lt;/p&gt;
&lt;div style="max-width:400px"&gt;
  &lt;img class="img-fluid pb-3" src="/images/flask-books.jpg" alt="Flask books"&gt; 
&lt;/div&gt;

&lt;p&gt;Here are some tips to work with the Flask Web Development 
&lt;a href="https://github.com/miguelgrinberg/flasky"&gt;source code flasky&lt;/a&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ git clone https://github.com/miguelgrinberg/flasky.git
$ git checkout 8e
$ git checkout -b exercise
$ python -m venv venv
$ source venv/bin/activate
$ pip3 install -r requirements.txt
$ source setup.sh  # content see below
$ flask db upgrade
$ flask run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;setup.sh&lt;/code&gt; file sets two environment variables. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;flasky.py
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;FLASK_DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;setup FLASK_APP and FLASK_DEBUG&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you run the commands above, the flask app will prompt errors because 
the configuration for the email smtp server is not complete. It is 
easier to setup a local smtp testing server than setup email accounts. 
Open a new terminal window and type the command below. The command 
invokes a standard python module smtpd and starts a debugging email 
server. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$python -m smtpd -n -c DebuggingServer localhost:8025
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the &lt;code&gt;config.py&lt;/code&gt; file, add three lines to the DevelopmentConfig section.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;class DevelopmentConfig(Config):
    DEBUG = True
    SQLALCHEMY_DATABASE_URI = os.environ.get(&amp;#39;DEV_DATABASE_URL&amp;#39;) or \
        &amp;#39;sqlite:///&amp;#39; + os.path.join(basedir, &amp;#39;data-dev.sqlite&amp;#39;)
    MAIL_SERVER = os.environ.get(&amp;#39;MAIL_SERVER&amp;#39;, &amp;#39;localhost&amp;#39;)  ### NEW
    MAIL_PORT = int(os.environ.get(&amp;#39;MAIL_PORT&amp;#39;, &amp;#39;8025&amp;#39;))
    MAIL_USE_TLS = False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You also need to initialize database when running the code base after 
Chapter 9 and Chapter 12. The commands are shown below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ flask shell
&amp;gt;&amp;gt;&amp;gt; Role.insert_roles()
&amp;gt;&amp;gt;&amp;gt; User.add_self_follows()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="posts"></category><category term="flask"></category><category term="books"></category></entry><entry><title>Geany Text Editor</title><link href="https://www.georgexyz.com/geany-editor.html" rel="alternate"></link><published>2020-04-01T22:00:00-04:00</published><updated>2020-04-01T22:00:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-04-01:/geany-editor.html</id><summary type="html">&lt;p&gt;Geany is a lightweight editor mainly for programmers.  I heard Geany 
editor from &lt;em&gt;Python Crash Book&lt;/em&gt; and I liked it. The default settings of 
Geany in Ubuntu are not the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Geany is a lightweight editor mainly for programmers.  I heard Geany 
editor from &lt;em&gt;Python Crash Book&lt;/em&gt; and I liked it. The default settings of 
Geany in Ubuntu are not the best, and this post discusses my preferred 
settings. &lt;/p&gt;
&lt;p&gt;Here is the command to install Geany in Ubuntu. The current version in 
Ubuntu repo is 1.32.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$sudo apt-get install geany
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The commands below install the latest version 1.35.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$sudo add-apt-repository ppa:geany-dev/ppa
$sudo apt-get update
$sudo apt-get install geany
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Those two commands install some plugins for Geany. The addions is 
a must-have for a function I will discuss later in the post. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$sudo apt-get install geany-plugins-common
$sudo apt-get install geany-plugin-addons
$sudo apt-get install geany-plugin-spellcheck
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here are my preferred settings for Geany after the installation. This is under 
menu item &lt;code&gt;Edit → Preferences&lt;/code&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Editor → Features → Line breaking column : 80&lt;/li&gt;
&lt;li&gt;Editor → Indentation → Type: Spaces&lt;/li&gt;
&lt;li&gt;Editor → Display → Display: Long line marker : 80 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The menu item &lt;code&gt;Tools → Plugin Manager&lt;/code&gt; has access to Plugins dialog, turn on 
Addons, File Browser, &lt;span class="caps"&gt;HTML&lt;/span&gt; Characters, and Spell Check options. Click menu item &lt;code&gt;Edit → 
Plugin Preference&lt;/code&gt; and toggle on option &lt;em&gt;Mark all occurrences of a word when 
double-clicking it&lt;/em&gt;. Windows text editor Notepad++ has this nice feature. 
Geany editor also has it, but it takes a little time to configure and turn on 
the feature. &lt;/p&gt;
&lt;div style="max-width:800px"&gt;
  &lt;img class="img-fluid pb-3" src="/images/geany-screenshot.png" alt="Geany Editor"&gt; 
&lt;/div&gt;</content><category term="posts"></category><category term="software utility"></category></entry><entry><title>A Simple Flask App - Temperature Converter</title><link href="https://www.georgexyz.com/a-simple-flask-app.html" rel="alternate"></link><published>2020-03-21T10:19:00-04:00</published><updated>2020-03-21T10:19:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-03-21:/a-simple-flask-app.html</id><summary type="html">&lt;p&gt;I have been studying Flask web framework for some time.  Today I decide to 
write a simple app and deploy it to a Digital Ocean web server under my 
control …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been studying Flask web framework for some time.  Today I decide to 
write a simple app and deploy it to a Digital Ocean web server under my 
control.  The Flask app itself is very simple. It is a temperature converter which 
converts temperature in fahrenheit to celsius. The source code is on github and the 
&lt;a href="https://github.com/georgexyz19/temperature_converter"&gt;link is here&lt;/a&gt;. You can access the live app via 
&lt;a href="https://gotrafficsign.com/convert"&gt;this link&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;The flask app follows the guidance on Miguel Grinberg&amp;#8217;s &lt;em&gt;Flask Web Development&lt;/em&gt; book. 
The only difference is that I used Flask-&lt;span class="caps"&gt;BS4&lt;/span&gt; instead of Flask-Bootstrap package 
because Flask-Bootstrap is still based on Bootstrap 3.  It does not have a database 
backend. &lt;/p&gt;
&lt;p&gt;The web server already have a nginx server installed and configured for a static website. 
I followed &lt;a href="https://medium.com/@jgefroh/a-guide-to-using-nginx-for-static-websites-d96a9d034940"&gt;this medium article&lt;/a&gt; 
to setup the nginx server and letsencrypt certification. At the time I set up 
the server, I did not really understand what I was doing.  A few weeks ago I found 
&lt;a href="http://www.patricksoftwareblog.com/how-to-configure-nginx-for-a-flask-web-application/"&gt;this nginx setting article&lt;/a&gt; 
which details niginx settings very well. I added a location block to pass along (so called reverse 
proxy) http requests to the gunicorn &lt;span class="caps"&gt;WSGI&lt;/span&gt; server. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;location /convert {
    proxy_pass http://localhost:8001;
    proxy_redirect off;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The setting code above is from Miguel Grinberg&amp;#8217;s 
&lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xvii-deployment-on-linux"&gt;Flask Mega-Tutorial Chapter 17&lt;/a&gt;. 
I followed step-by-step guides in this Chapter to set up tools on the server. 
I thought about setting up Docker containers, but decided not to do so 
after reading the chapter a few times.  The main reason is that the Docker containers will 
incur a significant overhead on a $5/mo Digital Ocean server. &lt;/p&gt;
&lt;p&gt;William Shotts&amp;#8217; book &lt;a href="http://linuxcommand.org/tlcl.php"&gt;The Linux Command Line&lt;/a&gt; 
has a section on ssh, scp and sftp. It has a sentence &amp;#8220;the &lt;span class="caps"&gt;SFTP&lt;/span&gt; protocol 
is supported by many of the graphical file managers found in Linux distributions.&amp;#8221; I found 
&lt;a href="https://filezilla-project.org/"&gt;FileZilla&lt;/a&gt; is easy to setup and easy to transfer files between 
a local computer and the server. &lt;/p&gt;</content><category term="posts"></category><category term="python"></category><category term="flask"></category></entry><entry><title>Python Counting With Dictionary</title><link href="https://www.georgexyz.com/python-count-with-dict.html" rel="alternate"></link><published>2020-03-02T02:20:00-05:00</published><updated>2020-03-02T02:20:00-05:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-03-02:/python-count-with-dict.html</id><summary type="html">&lt;p&gt;When I am reading a realpython article 
&lt;a href="https://realpython.com/python-json/"&gt;Working With &lt;span class="caps"&gt;JSON&lt;/span&gt; Data in Python&lt;/a&gt;, I find 
an interesting python technique that reminds me something else I read before. 
It is called …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I am reading a realpython article 
&lt;a href="https://realpython.com/python-json/"&gt;Working With &lt;span class="caps"&gt;JSON&lt;/span&gt; Data in Python&lt;/a&gt;, I find 
an interesting python technique that reminds me something else I read before. 
It is called &lt;em&gt;Counting With Dictionary&lt;/em&gt; by Raymond Hettinger in a python talk.
&lt;a href="https://www.georgexyz.com/python-resources.html"&gt;A previous blog post&lt;/a&gt; has the links 
to the video and the note. &lt;/p&gt;
&lt;p&gt;Given a list such as colors below,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the python code should generate a dictionary. The keys of the dictionary are 
values in the list, and the values of the dictionary are the corresponding number of 
keys in the list.  For the above example, the result dictionary &lt;code&gt;d&lt;/code&gt; is &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are many ways to write the code.  I will summarize these techniques below. &lt;/p&gt;
&lt;h3&gt;Basic Way to Count&lt;/h3&gt;
&lt;p&gt;The basic way is to set the d[color] to 0 when the dictionary sees the color 
first time.  Total line count is 5. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Get Method of Dictionary&lt;/h3&gt;
&lt;p&gt;If the color is not in the dictionary, using &lt;code&gt;d[color]&lt;/code&gt; to access its value raises
a KeyValue exception.  The dictionary &lt;code&gt;get&lt;/code&gt; method returns the second argument 
when the first argument is not already in the dictionary.  Line count is 3. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Use Defaultdict&lt;/h3&gt;
&lt;p&gt;The standard collections package has a defaultdict class. The class sets a default 
value for a key.  Line count is still 5. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Try and Except to Handle Exception&lt;/h3&gt;
&lt;p&gt;The above three methods are from Raymond Hettinger&amp;#8217;s python talk.  The method below
is from the &lt;em&gt;Real Python&lt;/em&gt; article I introduced earlier.  This method takes 6 lines, 
but the logic is very clear. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Setdefault Method of Dictionary&lt;/h3&gt;
&lt;p&gt;This method is between the first two methods.  Line count is also between 5 and 3. 
This method uses dictionary method &lt;code&gt;setdefault&lt;/code&gt;, which is also discussed in 
Raymond Hettinger&amp;#8217;s python talk.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python is very flexible to write once you know the basics, and there are always 
many ways to solve a problem. &lt;/p&gt;
&lt;h3&gt;Counter Class in collections Module&lt;/h3&gt;
&lt;p&gt;When I am browsing &lt;code&gt;collections&lt;/code&gt; module 
&lt;a href="https://docs.python.org/3.8/library/collections.html"&gt;documentation on python.org&lt;/a&gt;, 
I find a &lt;code&gt;Counter&lt;/code&gt; class which is &amp;#8220;a counter tool provided to support convenient 
and rapid tallies&amp;#8221;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This method is probably the easiest and the line count is only 3. &lt;/p&gt;</content><category term="posts"></category><category term="python"></category></entry><entry><title>Click Python Package</title><link href="https://www.georgexyz.com/package-click.html" rel="alternate"></link><published>2020-02-18T14:39:00-05:00</published><updated>2020-02-18T14:39:00-05:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-02-18:/package-click.html</id><summary type="html">&lt;p&gt;I am reading Miguel Grinberg&amp;#8217;s 
&lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;Flask Mega Tutorial&lt;/a&gt; 
and &lt;em&gt;Flask Web Development&lt;/em&gt; book and converting OpenSignTool to a flask app. The 
&lt;a href="https://click.palletsprojects.com/en/7.x/"&gt;Click package&lt;/a&gt; is one of the
tools created …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am reading Miguel Grinberg&amp;#8217;s 
&lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;Flask Mega Tutorial&lt;/a&gt; 
and &lt;em&gt;Flask Web Development&lt;/em&gt; book and converting OpenSignTool to a flask app. The 
&lt;a href="https://click.palletsprojects.com/en/7.x/"&gt;Click package&lt;/a&gt; is one of the
tools created by Armin Ronacher and used by many developers as a standalone 
python package. I decided to read the Click documentation and build a 
simple command line interface for OpenSignTool. &lt;/p&gt;
&lt;p&gt;I found several resources to learn Click:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://youtu.be/kNke39OZ2k0"&gt;Youtube Tutorial Video by Armin&lt;/a&gt;. Armin speaks
fast, and I find 0.75 play speed is good for me. The video content is very good. &lt;/li&gt;
&lt;li&gt;&lt;a href="https://dbader.org/blog/python-commandline-tools-with-click"&gt;Writing Python Command-Line Tools With Click&lt;/a&gt;. 
Seb Vetter wrote two articles about Click on dbader.org.  This is the first one.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dbader.org/blog/mastering-click-advanced-python-command-line-apps"&gt;Mastering Click: Writing Advanced Python Command Line Apps&lt;/a&gt;. 
This is Seb Vetter&amp;#8217;s second article on dbader.org. Both articles are fantastic. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is what I come up with, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# signtool_cli.py&lt;/span&gt;

&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Width of the sign in inches for output svg&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--ratio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Ratio to true scale when drawing the sign, default 1.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;output_filename&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;writable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ratio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;safe_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;output_filename&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;output_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with_suffix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.svg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;out_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;out_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Write the file to &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the help message and command to run the app. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(dev_cli) george@STK2M3:~/dev_cli$ python signtool_cli.py --help
Usage: signtool_cli.py [OPTIONS] FILENAME [OUTPUT_FILENAME]

Options:
  -w, --width INTEGER  Width of the sign in inches for output svg
  -r, --ratio FLOAT    Ratio to true scale when drawing the sign, default 1.0
  --help               Show this message and exit.

(dev_cli) ... $ python signtool_cli.py --ratio 0.1 R2-1.yaml 
Write the file to R2-1.svg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I also created a second python file to read all files under a directory and 
write results to another directory. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# signtool_dir.py&lt;/span&gt;

&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Width of the sign in inches for output svg&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--ratio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Ratio to true scale when drawing the sign, default 1.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;input_dir&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dir_okay&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;file_okay&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nd"&gt;@click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;output_dir&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_okay&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ratio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output_dir&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pathlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;**/*.yaml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pathlist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;safe_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dict_to_obj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;......&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;output_dir&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;output_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input_dir&lt;/span&gt;
        &lt;span class="n"&gt;output_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;output_dir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stem&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.svg&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;out_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;out_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Write the file to &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is how to call this Click app.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(dev_cli) george@STK2M3:~/dev_cli$ python signtool_dir.py --help
Usage: signtool_dir.py [OPTIONS] INPUT_DIR [OUTPUT_DIR]

Options:
  -w, --width INTEGER  Width of the sign in inches for output svg
  -r, --ratio FLOAT    Ratio to true scale when drawing the sign, default 1.0
  --help               Show this message and exit.

(dev_cli) george@STK2M3:~/dev_cli$ python signtool_dir.py ./yaml/ ./svg/
Write the file to ./svg/W8-5P.svg
Write the file to ./svg/R2-1.svg
......
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="posts"></category><category term="python"></category><category term="flask"></category></entry><entry><title>Convert Python 2 Code to Python 3</title><link href="https://www.georgexyz.com/py2-to-py3.html" rel="alternate"></link><published>2020-02-10T12:07:00-05:00</published><updated>2020-02-10T12:07:00-05:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-02-10:/py2-to-py3.html</id><summary type="html">&lt;p&gt;I am working on a personal project putting my OpenSignTool Inkscape 
python extension app online.  I plan to wrap the python code into 
a Flask web app and make the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am working on a personal project putting my OpenSignTool Inkscape 
python extension app online.  I plan to wrap the python code into 
a Flask web app and make the code run on a web server. &lt;/p&gt;
&lt;p&gt;The extension app is written in Summer 2018 and mostly python 3 ready. 
However, they depend on several existing Inkscape extension modules. 
Those are all python 2 code written years ago by others. Specifically, 
the extension code depends on 6 python modules. These are &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;simplestyle.py&lt;/li&gt;
&lt;li&gt;simplepath.py&lt;/li&gt;
&lt;li&gt;simpletransform.py&lt;/li&gt;
&lt;li&gt;inkex.py&lt;/li&gt;
&lt;li&gt;cubicsuperpath.py&lt;/li&gt;
&lt;li&gt;bezmisc.py&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Originally I plan to test my app in python 3.7 and fix any errors 
that pop up. I work on fixing the code for one hour or two, and 
find that this approach is too timing consuming even for a small 
code base of a few hundred lines of code.&lt;/p&gt;
&lt;p&gt;A little Google search finds that Python standard library includes a
2to3 tool that can do the job automatically. 
&lt;a href="https://docs.python.org/3.8/library/2to3.html"&gt;The documenation&lt;/a&gt; is 
pretty straightforward. This is the command I used to convert all python 
files in the current directory. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$2to3 -o ../dev_py3 -W -n ./
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The option &lt;code&gt;-o&lt;/code&gt; is to specify the output directory, &lt;code&gt;-W&lt;/code&gt; is for 
writing files even not changed, and &lt;code&gt;-n&lt;/code&gt; means that backups are not 
needed. &lt;/p&gt;
&lt;p&gt;The tool is very useful, and it can figure out almost all changes. The 
place the tool has trouble figuring out is string encoding.  I change 
a few places that involve string encoding, and the program runs 
perfectly in Python 3. &lt;/p&gt;
&lt;p&gt;The Inkscape project is upgrading the extension system to be Python 3 
compatible.  &lt;a href="https://gitlab.com/inkscape/extensions"&gt;The new extension python code&lt;/a&gt; 
are available online. &lt;/p&gt;</content><category term="posts"></category><category term="python"></category></entry><entry><title>Javascript App - Speed Limit</title><link href="https://www.georgexyz.com/speed-limit-js-app.html" rel="alternate"></link><published>2020-01-03T07:53:00-05:00</published><updated>2020-01-03T07:53:00-05:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2020-01-03:/speed-limit-js-app.html</id><summary type="html">&lt;p&gt;I am reading &lt;a href="https://eloquentjavascript.net/"&gt;Eloquent Javascript&lt;/a&gt; book by
Marijn Haverbeke.  It is a fantastic book, and some people describe it as 
&amp;#8220;a work of art&amp;#8221;.  It is probably the best programming …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am reading &lt;a href="https://eloquentjavascript.net/"&gt;Eloquent Javascript&lt;/a&gt; book by
Marijn Haverbeke.  It is a fantastic book, and some people describe it as 
&amp;#8220;a work of art&amp;#8221;.  It is probably the best programming book I recently read. 
The whole book is freely available on the website in &lt;span class="caps"&gt;HTML&lt;/span&gt; and &lt;span class="caps"&gt;PDF&lt;/span&gt; formats. &lt;/p&gt;
&lt;p&gt;Here is a quote at the beginning of Chapter 1 written by the author. It 
reads more like a poem rather than a sentence from a programming book. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Below the surface of the machine, the program moves. Without effort, it 
expands and contracts. In great harmony, electrons scatter and regroup.
The forms on the monitor are but ripples on the water. The essence stays 
invisibly below. - Master Yuan-Ma, The Book of Programming&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When I am reading Chapter 18 &lt;em&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; and Forms&lt;/em&gt;, I find that I can easily 
write a javascript app showing a speed limit sign.  The speed limit is 
controlled by an option in a dropdown control. &lt;/p&gt;
&lt;h4&gt;Speed Limit Sign App&lt;/h4&gt;
&lt;div class="w-50"&gt;
        &lt;svg xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://creativecommons.org/ns#"
            xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svg="http://www.w3.org/2000/svg"
            xmlns="http://www.w3.org/2000/svg" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
            xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" 
            viewBox="0 0 660.4 812.8" version="1.1" id="svg8" inkscape:version="0.92.3 (2405546, 2018-03-11)"
            sodipodi:docname="SpeedLimit.svg"&gt;
            &lt;sodipodi:namedview id="base" pagecolor="#ffffff" bordercolor="#666666" borderopacity="1.0"
                inkscape:pageopacity="0.0" inkscape:pageshadow="2" inkscape:zoom="0.24748737" inkscape:cx="1194.0851"
                inkscape:cy="1456.4869" inkscape:document-units="mm" inkscape:current-layer="layer18" showgrid="false"
                inkscape:window-width="851" inkscape:window-height="1072" inkscape:window-x="2254"
                inkscape:window-y="157" inkscape:window-maximized="0" /&gt;
            &lt;defs id="defs2" /&gt;
            &lt;metadata id="metadata5"&gt;
                &lt;rdf:RDF&gt;
                    &lt;cc:Work rdf:about=""&gt;
                        &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;
                        &lt;dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage" /&gt;
                        &lt;dc:title /&gt;
                    &lt;/cc:Work&gt;
                &lt;/rdf:RDF&gt;
            &lt;/metadata&gt;
            &lt;g id="layer1" inkscape:groupmode="layer" inkscape:label="Layer 1" /&gt;
            &lt;g id="g22" inkscape:groupmode="layer" inkscape:label="border"&gt;
                &lt;rect id="rect16" transform="matrix(1.000000,0.000000,0.000000,1.000000,25.400000,25.400000)"
                    inkscape:label="border_outside" y="0" x="0" width="609.6"
                    style="stroke:#000000;stroke-width:0.793749999984;fill:none" ry="38.1" rx="38.1" height="762.0" /&gt;
                &lt;path style="fill:#1c1714;stroke:none;stroke-width:3;fill-opacity:1"
                    d="M 240 132 C 180.168 132 132 180.168 132 240 L 132 2832 C 132 2891.832 180.168 2940 240 2940 L 2256 2940 C 2315.832 2940 2364 2891.832 2364 2832 L 2364 240 C 2364 180.168 2315.832 132 2256 132 L 240 132 z M 240 192 L 2256 192 C 2282.592 192 2304 213.408 2304 240 L 2304 2832 C 2304 2858.592 2282.592 2880 2256 2880 L 240 2880 C 213.408 2880 192 2858.592 192 2832 L 192 240 C 192 213.408 213.408 192 240 192 z "
                    transform="scale(0.26458333)" id="rect18" /&gt;
            &lt;/g&gt;
            &lt;g id="g159" inkscape:groupmode="layer" inkscape:label="messages" style="display:inline"&gt;
                &lt;g id="g157" inkscape:label="SPEED" style="fill:none"&gt;
                    &lt;path transform="matrix(1.997747,0,0,1.997747,-1813.7615,115.84601)"
                        inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="m 994.85675,41.675187 c 0,-5.55625 -2.8663,-10.39591 -7.34766,-12.72756 -2.86633,-1.43316 -7.3477,-2.86632 -14.15521,-4.29948 -6.27283,-1.433162 -8.06428,-2.689932 -8.06428,-5.556252 0,-3.2246 3.04271,-5.19795 8.24066,-5.19795 4.83967,0 8.96276,1.61506 12.18738,5.01606 l 6.80751,-6.090941 c -5.19797,-5.3743402 -11.46528,-7.8823692 -18.99489,-7.8823692 -10.39592,0 -17.56171,5.7326392 -17.56171,14.1552002 0,3.22462 1.07487,6.272832 3.22461,8.604482 2.14974,2.50802 4.83967,3.75928 10.03763,5.01605 l 2.50803,0.71659 2.33163,0.53467 2.32613,0.7221 c 2.33164,0.53467 4.305,1.25125 6.09644,1.96783 2.14974,1.07487 3.22462,2.68993 3.22462,4.65777 0,3.7648 -4.65777,6.63112 -11.1125,6.63112 -5.73264,0 -9.85573,-1.96784 -13.62053,-6.44922 l -7.3477,5.73264 c 5.73815,6.631121 12.36927,9.861241 21.15012,9.861241 4.65778,0 9.31554,-1.256771 12.90396,-3.40651 4.83416,-2.866321 7.16576,-6.813021 7.16576,-12.005471 z m 0,0"
                        id="E83" /&gt;
                    &lt;path transform="matrix(2.015262,0,0,2.015262,-1410.3212,115.30283)"
                        inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="m 836.96242,21.068004 c 0,-5.73815 -3.04822,-10.754211 -7.88789,-13.4441412 -2.86632,-1.60955 -5.19796,-2.14974 -9.13915,-2.14974 H 796.10083 V 56.549739 h 9.32105 v -20.06975 h 14.5135 c 3.94119,0 6.27283,-0.35829 9.13915,-1.97335 4.83967,-2.68993 7.88789,-8.06428 7.88789,-13.438635 z m -9.13915,0 c 0,3.759295 -3.04822,6.272835 -7.5296,6.272835 H 805.42188 V 14.613274 h 14.87179 c 4.48138,0 7.5296,2.50803 7.5296,6.45473 z m 0,0"
                        id="E80" /&gt;
                    &lt;path transform="matrix(1.996245,0,0,1.996245,-143.8413,115.89259)" inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="m 257.32848,56.549733 v -9.13915 h -28.85061 v -13.97882 h 15.23008 V 24.110715 H 228.47787 V 14.613279 H 256.43 V 5.4741288 H 219.15682 V 56.549733 Z m 0,0"
                        id="E69" /&gt;
                    &lt;path transform="matrix(1.996245,0,0,1.996245,-47.321299,115.89259)"
                        inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="m 257.32848,56.549733 v -9.13915 h -28.85061 v -13.97882 h 15.23008 V 24.110715 H 228.47787 V 14.613279 H 256.43 V 5.4741288 H 219.15682 V 56.549733 Z m 0,0"
                        id="E69r" /&gt;
                    &lt;path transform="matrix(2.015262,0,0,2.015262,153.68722,115.30283)" inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="m 206.10173,30.923733 c 0,-10.037623 -4.30499,-17.743614 -12.18737,-22.2249942 -3.7648,-2.14974 -7.88789,-3.22461 -12.18737,-3.22461 H 165.24014 V 56.549733 h 16.48685 c 4.12309,0 8.42257,-1.07487 12.00547,-3.04822 8.06428,-4.48138 12.36927,-12.36376 12.36927,-22.57778 z m -9.13915,0 c 0,6.98941 -2.51354,11.64718 -7.88789,14.5135 -2.14974,1.25677 -4.65777,1.97335 -7.3477,1.97335 H 174.5612 V 14.613279 h 7.16579 c 2.68993,0 5.37435,0.716581 7.70599,1.973351 5.01606,2.86632 7.5296,7.524085 7.5296,14.337103 z m 0,0"
                        id="E68" /&gt;
                &lt;/g&gt;
                &lt;g inkscape:label="LIMIT" id="g243" style="fill:none"&gt;
                    &lt;path id="E76"
                        d="m 625.33054,56.549739 v -7.88789 H 596.29803 V 5.4741228 h -9.13915 V 56.549739 Z m 0,0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        inkscape:connector-curvature="0"
                        transform="matrix(1.996245,0,0,1.996245,-1027.8664,268.29259)" /&gt;
                    &lt;path id="E73" d="M 453.09917,56.54974 V 5.4741228 h -9.13915 V 56.54974 Z m 0,0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        inkscape:connector-curvature="0"
                        transform="matrix(2.001061,0,0,2.001061,-650.67248,268.14323)" /&gt;
                    &lt;path id="E77"
                        d="M 682.74199,56.549739 V 5.4741228 h -8.96276 L 658.72554,35.763409 643.85375,5.4741228 H 634.891 V 56.549739 h 8.96275 v -31.18225 l 14.87179,31.18225 15.05369,-31.18225 v 31.18225 z m 0,0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        inkscape:connector-curvature="0"
                        transform="matrix(1.996924,0,0,1.996924,-985.40647,268.27153)" /&gt;
                    &lt;path id="E73e" d="M 453.09917,56.54974 V 5.4741228 h -9.13915 V 56.54974 Z m 0,0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        inkscape:connector-curvature="0"
                        transform="matrix(2.001061,0,0,2.001061,-483.99768,268.14323)" /&gt;
                    &lt;path id="E84"
                        d="M 1045.9928,14.456398 V 5.4936368 h -38.3483 v 8.9627612 h 14.6954 v 42.112873 h 8.9572 V 14.456398 Z m 0,0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        inkscape:connector-curvature="0" transform="matrix(1.98705,0,0,1.98705,-1562.2866,268.53895)" /&gt;
                &lt;/g&gt;
            &lt;/g&gt;
            &lt;g style="display:none" inkscape:groupmode="layer" id="L5" inkscape:label="L5"&gt;
                &lt;g inkscape:label="5" id="g5653" style="display:inline;fill:none"&gt;
                    &lt;path id="E53G"
                        d="m 2992.5821,38.98801 c 0,-10.57231 -8.4226,-18.4602 -20.0697,-18.4602 -3.2302,0 -5.7382,0.35829 -9.8613,1.25677 l 0.5402,-7.347701 h 25.2677 l 0.1819,-8.9627602 h -34.0541 l -1.6095,24.0164512 9.1391,2.32612 c 3.7648,-1.43315 6.4493,-1.96783 9.8558,-1.96783 3.7648,0 6.4547,0.71658 8.2461,2.14974 1.9679,1.60955 3.2247,4.29948 3.2247,6.98941 0,5.73264 -4.6578,9.13915 -12.3638,9.13915 -5.198,0 -10.3959,-1.43316 -14.8773,-4.12309 l -4.8397,7.70599 c 6.4548,3.94118 12.7276,5.73815 19.717,5.73815 12.5401,0 21.5029,-7.70599 21.5029,-18.4602 z m 0,0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        inkscape:connector-curvature="0" transform="matrix(4.99436,0,0,4.99436,-14512.899,401.67162)" /&gt;
                &lt;/g&gt;
            &lt;/g&gt;
            &lt;g inkscape:label="L10" id="L10" inkscape:groupmode="layer" style="display:none"&gt;
                &lt;g style="display:inline;fill:none" id="g5537" inkscape:label="10"&gt;
                    &lt;path transform="matrix(4.944199,0,0,4.944199,-13460.075,405.47087)"
                        inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="M 2769.3913,56.54973 V 5.4741198 h -7.3477 c -1.9679,3.22462 -4.1176,4.6577802 -8.0643,5.5562502 l 0.1819,7.3477 h 6.4492 l -0.1764,38.17166 z m 0,0"
                        id="E49r" /&gt;
                    &lt;path transform="matrix(4.984578,0,0,4.984578,-15726.757,404.21864)"
                        inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="m 3256.2456,30.739075 c 0,-12.90395 -6.091,-26.1606802 -21.3266,-26.1606802 -15.0536,0 -21.5029,12.8984402 -21.5029,26.3425802 0,13.43863 6.2729,26.52448 21.5029,26.52448 15.412,0 21.3266,-13.62053 21.3266,-26.70638 z m -9.1392,0 c 0,10.57231 -4.6577,17.56172 -12.1874,17.56172 -7.7059,0 -12.3637,-6.26732 -12.3637,-17.56172 0,-7.52409 3.2246,-17.02153 12.3637,-17.02153 7.706,0 12.1874,6.44922 12.1874,17.20343 z m 0,0"
                        id="E48K" /&gt;
                &lt;/g&gt;
            &lt;/g&gt;
            &lt;g style="display:none" inkscape:groupmode="layer" id="L15" inkscape:label="L15"&gt;
                &lt;g inkscape:label="15" id="g5428" style="display:inline;fill:none"&gt;
                    &lt;path id="E49"
                        d="M 2769.3913,56.54973 V 5.4741198 h -7.3477 c -1.9679,3.22462 -4.1176,4.6577802 -8.0643,5.5562502 l 0.1819,7.3477 h 6.4492 l -0.1764,38.17166 z m 0,0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        inkscape:connector-curvature="0"
                        transform="matrix(4.944199,0,0,4.944199,-13452.455,405.47087)" /&gt;
                    &lt;path id="E539"
                        d="m 496.63351,599.56679 c 0,-52.80192 -42.0655,-92.19688 -100.23531,-92.19688 -16.13278,0 -28.65863,1.78943 -49.25088,6.27676 l 2.69795,-36.69706 h 126.19599 l 0.90848,-44.76325 H 306.8713 l -8.03842,119.9468 45.64396,11.61748 c 18.80276,-7.15767 32.21012,-9.82805 49.22341,-9.82805 18.80277,0 32.2371,3.57886 41.18399,10.73657 9.8284,8.03868 16.10531,21.47315 16.10531,34.90763 0,28.63087 -23.26273,45.64421 -61.74926,45.64421 -25.96069,0 -51.92087,-7.15772 -74.3026,-20.5922 l -24.1712,38.48649 c 32.2376,19.68367 63.56622,28.65839 98.4738,28.65839 62.62977,0 107.39322,-38.48649 107.39322,-92.19689 z m 0,0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:1.76189911"
                        inkscape:connector-curvature="0" /&gt;
                &lt;/g&gt;
            &lt;/g&gt;
            &lt;g inkscape:label="L20" id="L20" inkscape:groupmode="layer" style="display:none"&gt;
                &lt;g style="display:inline;fill:none" id="g5327" inkscape:label="20"&gt;
                    &lt;path transform="matrix(4.99436,0,0,4.99436,-13853.546,406.14517)" inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="m 2834.8669,56.54973 v -9.13915 h -30.1074 c 1.7914,-3.40651 3.2246,-5.37435 5.5562,-7.3477 3.0483,-2.68993 5.0161,-3.5829 11.8291,-5.55625 3.5829,-1.07487 5.9146,-2.33164 7.5241,-3.5829 3.4065,-2.86632 5.198,-6.81302 5.198,-11.1125 0,-9.32104 -7.706,-15.2300702 -19.7115,-15.2300702 -8.2462,0 -15.5939,2.68442 -21.5084,7.8823802 l 6.2728,6.98941 c 4.2995,-3.9412 9.1392,-5.55625 15.7703,-5.55625 6.4547,0 10.0376,2.14974 10.0376,5.91453 0,3.04822 -1.9733,4.83967 -7.706,6.44922 -9.321,2.51354 -15.7702,7.17131 -20.2516,14.6954 -2.8663,5.02157 -4.1231,9.50295 -4.1231,15.59388 z m 0,0"
                        id="E50l" /&gt;
                    &lt;path transform="matrix(4.984578,0,0,4.984578,-15669.543,404.21864)"
                        inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="m 3256.2456,30.739075 c 0,-12.90395 -6.091,-26.1606802 -21.3266,-26.1606802 -15.0536,0 -21.5029,12.8984402 -21.5029,26.3425802 0,13.43863 6.2729,26.52448 21.5029,26.52448 15.412,0 21.3266,-13.62053 21.3266,-26.70638 z m -9.1392,0 c 0,10.57231 -4.6577,17.56172 -12.1874,17.56172 -7.7059,0 -12.3637,-6.26732 -12.3637,-17.56172 0,-7.52409 3.2246,-17.02153 12.3637,-17.02153 7.706,0 12.1874,6.44922 12.1874,17.20343 z m 0,0"
                        id="E48Q" /&gt;
                &lt;/g&gt;
            &lt;/g&gt;
            &lt;g style="display:none" inkscape:groupmode="layer" id="L25" inkscape:label="L25"&gt;
                &lt;g inkscape:label="25" id="L25" style="display:inline;fill:none"&gt;
                    &lt;path id="E50"
                        d="m 2834.8669,56.54973 v -9.13915 h -30.1074 c 1.7914,-3.40651 3.2246,-5.37435 5.5562,-7.3477 3.0483,-2.68993 5.0161,-3.5829 11.8291,-5.55625 3.5829,-1.07487 5.9146,-2.33164 7.5241,-3.5829 3.4065,-2.86632 5.198,-6.81302 5.198,-11.1125 0,-9.32104 -7.706,-15.2300702 -19.7115,-15.2300702 -8.2462,0 -15.5939,2.68442 -21.5084,7.8823802 l 6.2728,6.98941 c 4.2995,-3.9412 9.1392,-5.55625 15.7703,-5.55625 6.4547,0 10.0376,2.14974 10.0376,5.91453 0,3.04822 -1.9733,4.83967 -7.706,6.44922 -9.321,2.51354 -15.7702,7.17131 -20.2516,14.6954 -2.8663,5.02157 -4.1231,9.50295 -4.1231,15.59388 z m 0,0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        inkscape:connector-curvature="0" transform="matrix(4.99436,0,0,4.99436,-13845.926,406.14517)" /&gt;
                    &lt;path id="E53a"
                        d="m 553.84701,604.32932 c 0,-52.80192 -42.0655,-92.19688 -100.23531,-92.19688 -16.13278,0 -28.65863,1.78943 -49.25088,6.27676 l 2.69795,-36.69706 h 126.19599 l 0.90848,-44.76325 H 364.0848 l -8.03842,119.9468 45.64396,11.61748 c 18.80276,-7.15767 32.21012,-9.82805 49.22341,-9.82805 18.80277,0 32.2371,3.57886 41.18399,10.73657 9.8284,8.03868 16.10531,21.47315 16.10531,34.90763 0,28.63087 -23.26273,45.64421 -61.74926,45.64421 -25.96069,0 -51.92087,-7.15772 -74.3026,-20.5922 l -24.1712,38.48649 c 32.2376,19.68367 63.56622,28.65839 98.4738,28.65839 62.62977,0 107.39322,-38.48649 107.39322,-92.19689 z m 0,0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:1.76189911"
                        inkscape:connector-curvature="0" /&gt;
                &lt;/g&gt;
            &lt;/g&gt;
            &lt;g inkscape:label="L30" id="L30" inkscape:groupmode="layer" style="display:none"&gt;
                &lt;g style="display:inline;fill:none" id="g5149" inkscape:label="30"&gt;
                    &lt;path transform="matrix(4.99436,0,0,4.99436,-14116.108,403.9015)" inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="m 2887.4387,40.59756 c 0,-4.83416 -1.4332,-7.52409 -6.4492,-12.00547 3.0427,-3.94119 4.1175,-6.27283 4.1175,-9.67934 0,-8.24066 -7.5241,-14.3315902 -17.7381,-14.3315902 -7.3477,0 -13.6205,2.68442 -18.6421,7.8823802 l 6.8131,6.27282 c 3.0482,-3.22461 6.9894,-5.01605 11.2888,-5.01605 5.3744,0 8.9628,2.32613 8.9628,5.37434 0,2.86632 -2.8663,5.01606 -6.813,5.01606 h -2.1498 v 9.13915 h 2.5081 c 1.9733,0 3.5884,0.35829 5.0215,1.08038 2.3262,1.25126 3.9412,4.11758 3.9412,6.62561 0,4.30499 -4.2995,7.17131 -10.5723,7.17131 -5.9145,0 -10.5778,-1.97335 -14.1607,-6.63112 l -7.3477,5.55625 c 1.7915,2.14974 2.6899,3.04822 3.9467,4.12309 4.4759,4.11758 10.7487,6.27283 17.0215,6.27283 11.4708,0 20.2517,-7.3477 20.2517,-16.85065 z m 0,0"
                        id="E518" /&gt;
                    &lt;path transform="matrix(4.984578,0,0,4.984578,-15669.543,404.21864)"
                        inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="m 3256.2456,30.739075 c 0,-12.90395 -6.091,-26.1606802 -21.3266,-26.1606802 -15.0536,0 -21.5029,12.8984402 -21.5029,26.3425802 0,13.43863 6.2729,26.52448 21.5029,26.52448 15.412,0 21.3266,-13.62053 21.3266,-26.70638 z m -9.1392,0 c 0,10.57231 -4.6577,17.56172 -12.1874,17.56172 -7.7059,0 -12.3637,-6.26732 -12.3637,-17.56172 0,-7.52409 3.2246,-17.02153 12.3637,-17.02153 7.706,0 12.1874,6.44922 12.1874,17.20343 z m 0,0"
                        id="E481" /&gt;
                &lt;/g&gt;
            &lt;/g&gt;
            &lt;g style="display:none" inkscape:groupmode="layer" id="L35" inkscape:label="L35"&gt;
                &lt;g inkscape:label="35" id="g5072" style="display:inline;fill:none"&gt;
                    &lt;path id="E51"
                        d="m 2887.4387,40.59756 c 0,-4.83416 -1.4332,-7.52409 -6.4492,-12.00547 3.0427,-3.94119 4.1175,-6.27283 4.1175,-9.67934 0,-8.24066 -7.5241,-14.3315902 -17.7381,-14.3315902 -7.3477,0 -13.6205,2.68442 -18.6421,7.8823802 l 6.8131,6.27282 c 3.0482,-3.22461 6.9894,-5.01605 11.2888,-5.01605 5.3744,0 8.9628,2.32613 8.9628,5.37434 0,2.86632 -2.8663,5.01606 -6.813,5.01606 h -2.1498 v 9.13915 h 2.5081 c 1.9733,0 3.5884,0.35829 5.0215,1.08038 2.3262,1.25126 3.9412,4.11758 3.9412,6.62561 0,4.30499 -4.2995,7.17131 -10.5723,7.17131 -5.9145,0 -10.5778,-1.97335 -14.1607,-6.63112 l -7.3477,5.55625 c 1.7915,2.14974 2.6899,3.04822 3.9467,4.12309 4.4759,4.11758 10.7487,6.27283 17.0215,6.27283 11.4708,0 20.2517,-7.3477 20.2517,-16.85065 z m 0,0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        inkscape:connector-curvature="0" transform="matrix(4.99436,0,0,4.99436,-14108.488,403.9015)" /&gt;
                    &lt;path id="E53y"
                        d="m 2992.5821,38.98801 c 0,-10.57231 -8.4226,-18.4602 -20.0697,-18.4602 -3.2302,0 -5.7382,0.35829 -9.8613,1.25677 l 0.5402,-7.347701 h 25.2677 l 0.1819,-8.9627602 h -34.0541 l -1.6095,24.0164512 9.1391,2.32612 c 3.7648,-1.43315 6.4493,-1.96783 9.8558,-1.96783 3.7648,0 6.4547,0.71658 8.2461,2.14974 1.9679,1.60955 3.2247,4.29948 3.2247,6.98941 0,5.73264 -4.6578,9.13915 -12.3638,9.13915 -5.198,0 -10.3959,-1.43316 -14.8773,-4.12309 l -4.8397,7.70599 c 6.4548,3.94118 12.7276,5.73815 19.717,5.73815 12.5401,0 21.5029,-7.70599 21.5029,-18.4602 z m 0,0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        inkscape:connector-curvature="0" transform="matrix(4.99436,0,0,4.99436,-14392.185,401.67162)" /&gt;
                &lt;/g&gt;
            &lt;/g&gt;
            &lt;g inkscape:label="L40" id="L40" inkscape:groupmode="layer" style="display:none"&gt;
                &lt;g style="display:inline;fill:none" id="g5003" inkscape:label="40"&gt;
                    &lt;path transform="matrix(4.973973,0,0,4.973973,-14322.963,404.54752)"
                        inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="m 2943.4142,46.15381 v -8.24067 h -7.5296 V 5.4741198 h -8.9572 L 2895.3868,37.91314 v 8.24067 h 31.5406 v 10.39592 h 8.9572 V 46.15381 Z m -16.4868,-8.24067 h -19.8934 l 19.8934,-20.43355 z m 0,0"
                        id="E52D" /&gt;
                    &lt;path transform="matrix(4.984578,0,0,4.984578,-15649.223,404.21864)"
                        inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="m 3256.2456,30.739075 c 0,-12.90395 -6.091,-26.1606802 -21.3266,-26.1606802 -15.0536,0 -21.5029,12.8984402 -21.5029,26.3425802 0,13.43863 6.2729,26.52448 21.5029,26.52448 15.412,0 21.3266,-13.62053 21.3266,-26.70638 z m -9.1392,0 c 0,10.57231 -4.6577,17.56172 -12.1874,17.56172 -7.7059,0 -12.3637,-6.26732 -12.3637,-17.56172 0,-7.52409 3.2246,-17.02153 12.3637,-17.02153 7.706,0 12.1874,6.44922 12.1874,17.20343 z m 0,0"
                        id="E48f" /&gt;
                &lt;/g&gt;
            &lt;/g&gt;
            &lt;g style="display:none" inkscape:groupmode="layer" id="L45" inkscape:label="L45"&gt;
                &lt;g inkscape:label="45" id="g4942" style="display:inline;fill:none"&gt;
                    &lt;path id="E52"
                        d="m 2943.4142,46.15381 v -8.24067 h -7.5296 V 5.4741198 h -8.9572 L 2895.3868,37.91314 v 8.24067 h 31.5406 v 10.39592 h 8.9572 V 46.15381 Z m -16.4868,-8.24067 h -19.8934 l 19.8934,-20.43355 z m 0,0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        inkscape:connector-curvature="0"
                        transform="matrix(4.973973,0,0,4.973973,-14315.343,404.54752)" /&gt;
                    &lt;path id="E53u"
                        d="m 2992.5821,38.98801 c 0,-10.57231 -8.4226,-18.4602 -20.0697,-18.4602 -3.2302,0 -5.7382,0.35829 -9.8613,1.25677 l 0.5402,-7.347701 h 25.2677 l 0.1819,-8.9627602 h -34.0541 l -1.6095,24.0164512 9.1391,2.32612 c 3.7648,-1.43315 6.4493,-1.96783 9.8558,-1.96783 3.7648,0 6.4547,0.71658 8.2461,2.14974 1.9679,1.60955 3.2247,4.29948 3.2247,6.98941 0,5.73264 -4.6578,9.13915 -12.3638,9.13915 -5.198,0 -10.3959,-1.43316 -14.8773,-4.12309 l -4.8397,7.70599 c 6.4548,3.94118 12.7276,5.73815 19.717,5.73815 12.5401,0 21.5029,-7.70599 21.5029,-18.4602 z m 0,0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        inkscape:connector-curvature="0" transform="matrix(4.99436,0,0,4.99436,-14371.865,401.67162)" /&gt;
                &lt;/g&gt;
            &lt;/g&gt;
            &lt;g inkscape:groupmode="layer" id="L50" inkscape:label="L50" style="display:none"&gt;
                &lt;g style="fill:none" id="g337" inkscape:label="50"&gt;
                    &lt;path transform="matrix(4.99436,0,0,4.99436,-14641.232,401.67162)" inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="m 2992.5821,38.98801 c 0,-10.57231 -8.4226,-18.4602 -20.0697,-18.4602 -3.2302,0 -5.7382,0.35829 -9.8613,1.25677 l 0.5402,-7.347701 h 25.2677 l 0.1819,-8.9627602 h -34.0541 l -1.6095,24.0164512 9.1391,2.32612 c 3.7648,-1.43315 6.4493,-1.96783 9.8558,-1.96783 3.7648,0 6.4547,0.71658 8.2461,2.14974 1.9679,1.60955 3.2247,4.29948 3.2247,6.98941 0,5.73264 -4.6578,9.13915 -12.3638,9.13915 -5.198,0 -10.3959,-1.43316 -14.8773,-4.12309 l -4.8397,7.70599 c 6.4548,3.94118 12.7276,5.73815 19.717,5.73815 12.5401,0 21.5029,-7.70599 21.5029,-18.4602 z m 0,0"
                        id="E53" /&gt;
                    &lt;path transform="matrix(4.984578,0,0,4.984578,-15669.543,404.21864)"
                        inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="m 3256.2456,30.739075 c 0,-12.90395 -6.091,-26.1606802 -21.3266,-26.1606802 -15.0536,0 -21.5029,12.8984402 -21.5029,26.3425802 0,13.43863 6.2729,26.52448 21.5029,26.52448 15.412,0 21.3266,-13.62053 21.3266,-26.70638 z m -9.1392,0 c 0,10.57231 -4.6577,17.56172 -12.1874,17.56172 -7.7059,0 -12.3637,-6.26732 -12.3637,-17.56172 0,-7.52409 3.2246,-17.02153 12.3637,-17.02153 7.706,0 12.1874,6.44922 12.1874,17.20343 z m 0,0"
                        id="E48" /&gt;
                &lt;/g&gt;
            &lt;/g&gt;
            &lt;g inkscape:label="L55" id="L55" inkscape:groupmode="layer" style="display:none"&gt;
                &lt;g style="display:inline;fill:none" id="g5776" inkscape:label="55"&gt;
                    &lt;path transform="matrix(4.99436,0,0,4.99436,-14633.612,401.67162)" inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="m 2992.5821,38.98801 c 0,-10.57231 -8.4226,-18.4602 -20.0697,-18.4602 -3.2302,0 -5.7382,0.35829 -9.8613,1.25677 l 0.5402,-7.347701 h 25.2677 l 0.1819,-8.9627602 h -34.0541 l -1.6095,24.0164512 9.1391,2.32612 c 3.7648,-1.43315 6.4493,-1.96783 9.8558,-1.96783 3.7648,0 6.4547,0.71658 8.2461,2.14974 1.9679,1.60955 3.2247,4.29948 3.2247,6.98941 0,5.73264 -4.6578,9.13915 -12.3638,9.13915 -5.198,0 -10.3959,-1.43316 -14.8773,-4.12309 l -4.8397,7.70599 c 6.4548,3.94118 12.7276,5.73815 19.717,5.73815 12.5401,0 21.5029,-7.70599 21.5029,-18.4602 z m 0,0"
                        id="E536" /&gt;
                    &lt;path transform="matrix(4.99436,0,0,4.99436,-14392.185,401.67162)" inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="m 2992.5821,38.98801 c 0,-10.57231 -8.4226,-18.4602 -20.0697,-18.4602 -3.2302,0 -5.7382,0.35829 -9.8613,1.25677 l 0.5402,-7.347701 h 25.2677 l 0.1819,-8.9627602 h -34.0541 l -1.6095,24.0164512 9.1391,2.32612 c 3.7648,-1.43315 6.4493,-1.96783 9.8558,-1.96783 3.7648,0 6.4547,0.71658 8.2461,2.14974 1.9679,1.60955 3.2247,4.29948 3.2247,6.98941 0,5.73264 -4.6578,9.13915 -12.3638,9.13915 -5.198,0 -10.3959,-1.43316 -14.8773,-4.12309 l -4.8397,7.70599 c 6.4548,3.94118 12.7276,5.73815 19.717,5.73815 12.5401,0 21.5029,-7.70599 21.5029,-18.4602 z m 0,0"
                        id="E53t" /&gt;
                &lt;/g&gt;
            &lt;/g&gt;
            &lt;g style="display:none" inkscape:groupmode="layer" id="L60" inkscape:label="L60"&gt;
                &lt;g inkscape:label="60" id="g5907" style="display:inline;fill:none"&gt;
                    &lt;path id="E54"
                        d="m 3045.154,41.67794 c 0,-8.96276 -8.0643,-15.4175 -19.1768,-15.4175 -4.123,0 -6.9894,0.3583 -11.4707,1.61507 2.508,-5.37435 5.1979,-8.422572 9.8557,-11.112503 3.5884,-2.149739 7.3477,-3.042708 12.7275,-3.042708 h 0.893 V 4.5811498 c -8.7809,0 -14.6954,1.609549 -20.6099,5.7326392 -8.599,5.914538 -13.4387,15.230081 -13.4387,25.984291 0,6.98941 1.9734,12.00547 6.091,15.59388 4.1231,3.5829 9.4974,5.55625 15.5939,5.55625 11.4707,0 19.535,-6.63112 19.535,-15.77027 z m -9.1391,0.17639 c 0,3.7648 -4.305,6.27283 -10.7542,6.27283 -6.2729,0 -10.5723,-2.50803 -10.5723,-6.44922 0,-3.7648 4.2994,-6.27283 10.5723,-6.27283 6.4492,0 10.7542,2.50803 10.7542,6.44922 z m 0,0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        inkscape:connector-curvature="0" transform="matrix(4.99436,0,0,4.99436,-14907.605,403.90152)" /&gt;
                    &lt;path id="E484"
                        d="m 3256.2456,30.739075 c 0,-12.90395 -6.091,-26.1606802 -21.3266,-26.1606802 -15.0536,0 -21.5029,12.8984402 -21.5029,26.3425802 0,13.43863 6.2729,26.52448 21.5029,26.52448 15.412,0 21.3266,-13.62053 21.3266,-26.70638 z m -9.1392,0 c 0,10.57231 -4.6577,17.56172 -12.1874,17.56172 -7.7059,0 -12.3637,-6.26732 -12.3637,-17.56172 0,-7.52409 3.2246,-17.02153 12.3637,-17.02153 7.706,0 12.1874,6.44922 12.1874,17.20343 z m 0,0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        inkscape:connector-curvature="0"
                        transform="matrix(4.984578,0,0,4.984578,-15665.733,404.21864)" /&gt;
                &lt;/g&gt;
            &lt;/g&gt;
            &lt;g inkscape:label="L65" id="L65" inkscape:groupmode="layer" style="display:none"&gt;
                &lt;g style="display:inline;fill:none" id="g6046" inkscape:label="65"&gt;
                    &lt;path transform="matrix(4.99436,0,0,4.99436,-14899.985,403.90152)" inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="m 3045.154,41.67794 c 0,-8.96276 -8.0643,-15.4175 -19.1768,-15.4175 -4.123,0 -6.9894,0.3583 -11.4707,1.61507 2.508,-5.37435 5.1979,-8.422572 9.8557,-11.112503 3.5884,-2.149739 7.3477,-3.042708 12.7275,-3.042708 h 0.893 V 4.5811498 c -8.7809,0 -14.6954,1.609549 -20.6099,5.7326392 -8.599,5.914538 -13.4387,15.230081 -13.4387,25.984291 0,6.98941 1.9734,12.00547 6.091,15.59388 4.1231,3.5829 9.4974,5.55625 15.5939,5.55625 11.4707,0 19.535,-6.63112 19.535,-15.77027 z m -9.1391,0.17639 c 0,3.7648 -4.305,6.27283 -10.7542,6.27283 -6.2729,0 -10.5723,-2.50803 -10.5723,-6.44922 0,-3.7648 4.2994,-6.27283 10.5723,-6.27283 6.4492,0 10.7542,2.50803 10.7542,6.44922 z m 0,0"
                        id="E54s" /&gt;
                    &lt;path transform="matrix(4.99436,0,0,4.99436,-14388.375,401.67162)" inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="m 2992.5821,38.98801 c 0,-10.57231 -8.4226,-18.4602 -20.0697,-18.4602 -3.2302,0 -5.7382,0.35829 -9.8613,1.25677 l 0.5402,-7.347701 h 25.2677 l 0.1819,-8.9627602 h -34.0541 l -1.6095,24.0164512 9.1391,2.32612 c 3.7648,-1.43315 6.4493,-1.96783 9.8558,-1.96783 3.7648,0 6.4547,0.71658 8.2461,2.14974 1.9679,1.60955 3.2247,4.29948 3.2247,6.98941 0,5.73264 -4.6578,9.13915 -12.3638,9.13915 -5.198,0 -10.3959,-1.43316 -14.8773,-4.12309 l -4.8397,7.70599 c 6.4548,3.94118 12.7276,5.73815 19.717,5.73815 12.5401,0 21.5029,-7.70599 21.5029,-18.4602 z m 0,0"
                        id="E53i" /&gt;
                &lt;/g&gt;
            &lt;/g&gt;
            &lt;g style="display:none" inkscape:groupmode="layer" id="L70" inkscape:label="L70"&gt;
                &lt;g inkscape:label="70" id="g6193" style="display:inline;fill:none"&gt;
                    &lt;path id="E55"
                        d="M 3097.8138,14.613268 V 5.4741188 h -41.3963 l 0.1764,8.9627602 h 28.8562 c -2.1553,3.224607 -3.2302,4.83967 -4.1231,6.449221 -3.0483,5.01606 -5.5563,10.93059 -7.3477,17.38533 -1.6151,6.27283 -2.1498,10.57231 -2.3317,18.2783 h 9.1392 c 0.1819,-7.70599 0.8985,-12.36376 2.8663,-18.46021 1.9733,-5.91453 5.198,-12.72204 8.6045,-17.37981 1.2567,-1.973352 2.1497,-2.871835 5.5562,-6.096442 z m 0,0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        inkscape:connector-curvature="0"
                        transform="matrix(4.973077,0,0,4.973077,-15104.677,404.57531)" /&gt;
                    &lt;path id="E48u"
                        d="m 3256.2456,30.739075 c 0,-12.90395 -6.091,-26.1606802 -21.3266,-26.1606802 -15.0536,0 -21.5029,12.8984402 -21.5029,26.3425802 0,13.43863 6.2729,26.52448 21.5029,26.52448 15.412,0 21.3266,-13.62053 21.3266,-26.70638 z m -9.1392,0 c 0,10.57231 -4.6577,17.56172 -12.1874,17.56172 -7.7059,0 -12.3637,-6.26732 -12.3637,-17.56172 0,-7.52409 3.2246,-17.02153 12.3637,-17.02153 7.706,0 12.1874,6.44922 12.1874,17.20343 z m 0,0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        inkscape:connector-curvature="0"
                        transform="matrix(4.984578,0,0,4.984578,-15665.733,404.21864)" /&gt;
                &lt;/g&gt;
            &lt;/g&gt;
            &lt;g inkscape:label="L75" id="L75" inkscape:groupmode="layer" style="display:none"&gt;
                &lt;g style="display:inline;fill:none" id="g6348" inkscape:label="75"&gt;
                    &lt;path transform="matrix(4.973077,0,0,4.973077,-15097.057,404.57531)"
                        inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="M 3097.8138,14.613268 V 5.4741188 h -41.3963 l 0.1764,8.9627602 h 28.8562 c -2.1553,3.224607 -3.2302,4.83967 -4.1231,6.449221 -3.0483,5.01606 -5.5563,10.93059 -7.3477,17.38533 -1.6151,6.27283 -2.1498,10.57231 -2.3317,18.2783 h 9.1392 c 0.1819,-7.70599 0.8985,-12.36376 2.8663,-18.46021 1.9733,-5.91453 5.198,-12.72204 8.6045,-17.37981 1.2567,-1.973352 2.1497,-2.871835 5.5562,-6.096442 z m 0,0"
                        id="E55m" /&gt;
                    &lt;path transform="matrix(4.99436,0,0,4.99436,-14388.375,401.67162)" inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="m 2992.5821,38.98801 c 0,-10.57231 -8.4226,-18.4602 -20.0697,-18.4602 -3.2302,0 -5.7382,0.35829 -9.8613,1.25677 l 0.5402,-7.347701 h 25.2677 l 0.1819,-8.9627602 h -34.0541 l -1.6095,24.0164512 9.1391,2.32612 c 3.7648,-1.43315 6.4493,-1.96783 9.8558,-1.96783 3.7648,0 6.4547,0.71658 8.2461,2.14974 1.9679,1.60955 3.2247,4.29948 3.2247,6.98941 0,5.73264 -4.6578,9.13915 -12.3638,9.13915 -5.198,0 -10.3959,-1.43316 -14.8773,-4.12309 l -4.8397,7.70599 c 6.4548,3.94118 12.7276,5.73815 19.717,5.73815 12.5401,0 21.5029,-7.70599 21.5029,-18.4602 z m 0,0"
                        id="E53n" /&gt;
                &lt;/g&gt;
            &lt;/g&gt;
            &lt;g style="display:none" inkscape:groupmode="layer" id="L80" inkscape:label="L80"&gt;
                &lt;g inkscape:label="80" id="g6511" style="display:inline;fill:none"&gt;
                    &lt;path id="E56"
                        d="m 3150.2974,40.236515 c 0,-4.83416 -1.7914,-8.95725 -5.5562,-12.36376 3.0482,-3.7648 3.9411,-5.91454 3.9411,-9.32105 0,-8.42257 -7.524,-13.9733102 -18.9948,-13.9733102 -11.2889,0 -18.9949,5.5507402 -18.9949,13.9733102 0,3.40651 0.893,5.55625 4.1231,9.32105 -3.7648,3.40651 -5.7382,7.5296 -5.7382,12.36376 0,10.39592 8.0643,17.20894 20.61,17.20894 10.5723,0 20.6099,-5.02157 20.6099,-17.20894 z m -10.7542,-21.8612 c 0,3.04822 -3.5829,4.83967 -9.8557,4.83967 -6.2729,0 -9.8558,-1.79145 -9.8558,-4.83967 0,-2.86632 3.5829,-4.65777 9.8558,-4.65777 6.2728,0 9.8557,1.79145 9.8557,4.65777 z m 1.6151,21.8612 c 0,2.15525 -0.8985,4.12309 -2.69,5.73815 -1.7914,1.60955 -4.4814,2.14974 -8.7808,2.14974 -3.0483,0 -6.2729,-0.54019 -7.706,-1.43316 -2.3317,-1.43316 -3.7648,-3.94119 -3.7648,-6.45473 0,-5.01606 4.1231,-7.88238 11.4708,-7.88238 7.3477,0 11.4708,2.86632 11.4708,7.88238 z m 0,0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        inkscape:connector-curvature="0" transform="matrix(4.99436,0,0,4.99436,-15428.919,403.91528)" /&gt;
                    &lt;path id="E48C"
                        d="m 3256.2456,30.739075 c 0,-12.90395 -6.091,-26.1606802 -21.3266,-26.1606802 -15.0536,0 -21.5029,12.8984402 -21.5029,26.3425802 0,13.43863 6.2729,26.52448 21.5029,26.52448 15.412,0 21.3266,-13.62053 21.3266,-26.70638 z m -9.1392,0 c 0,10.57231 -4.6577,17.56172 -12.1874,17.56172 -7.7059,0 -12.3637,-6.26732 -12.3637,-17.56172 0,-7.52409 3.2246,-17.02153 12.3637,-17.02153 7.706,0 12.1874,6.44922 12.1874,17.20343 z m 0,0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        inkscape:connector-curvature="0"
                        transform="matrix(4.984578,0,0,4.984578,-15669.543,404.21864)" /&gt;
                &lt;/g&gt;
            &lt;/g&gt;
            &lt;g inkscape:label="L85" id="L85" inkscape:groupmode="layer" style="display:none"&gt;
                &lt;g style="display:inline;fill:none" id="g6682" inkscape:label="85"&gt;
                    &lt;path transform="matrix(4.99436,0,0,4.99436,-15421.299,403.91528)" inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="m 3150.2974,40.236515 c 0,-4.83416 -1.7914,-8.95725 -5.5562,-12.36376 3.0482,-3.7648 3.9411,-5.91454 3.9411,-9.32105 0,-8.42257 -7.524,-13.9733102 -18.9948,-13.9733102 -11.2889,0 -18.9949,5.5507402 -18.9949,13.9733102 0,3.40651 0.893,5.55625 4.1231,9.32105 -3.7648,3.40651 -5.7382,7.5296 -5.7382,12.36376 0,10.39592 8.0643,17.20894 20.61,17.20894 10.5723,0 20.6099,-5.02157 20.6099,-17.20894 z m -10.7542,-21.8612 c 0,3.04822 -3.5829,4.83967 -9.8557,4.83967 -6.2729,0 -9.8558,-1.79145 -9.8558,-4.83967 0,-2.86632 3.5829,-4.65777 9.8558,-4.65777 6.2728,0 9.8557,1.79145 9.8557,4.65777 z m 1.6151,21.8612 c 0,2.15525 -0.8985,4.12309 -2.69,5.73815 -1.7914,1.60955 -4.4814,2.14974 -8.7808,2.14974 -3.0483,0 -6.2729,-0.54019 -7.706,-1.43316 -2.3317,-1.43316 -3.7648,-3.94119 -3.7648,-6.45473 0,-5.01606 4.1231,-7.88238 11.4708,-7.88238 7.3477,0 11.4708,2.86632 11.4708,7.88238 z m 0,0"
                        id="E56X" /&gt;
                    &lt;path transform="matrix(4.99436,0,0,4.99436,-14392.185,401.67162)" inkscape:connector-curvature="0"
                        style="fill:#1c1714;fill-opacity:1;stroke:none;stroke-width:0.35277775"
                        d="m 2992.5821,38.98801 c 0,-10.57231 -8.4226,-18.4602 -20.0697,-18.4602 -3.2302,0 -5.7382,0.35829 -9.8613,1.25677 l 0.5402,-7.347701 h 25.2677 l 0.1819,-8.9627602 h -34.0541 l -1.6095,24.0164512 9.1391,2.32612 c 3.7648,-1.43315 6.4493,-1.96783 9.8558,-1.96783 3.7648,0 6.4547,0.71658 8.2461,2.14974 1.9679,1.60955 3.2247,4.29948 3.2247,6.98941 0,5.73264 -4.6578,9.13915 -12.3638,9.13915 -5.198,0 -10.3959,-1.43316 -14.8773,-4.12309 l -4.8397,7.70599 c 6.4548,3.94118 12.7276,5.73815 19.717,5.73815 12.5401,0 21.5029,-7.70599 21.5029,-18.4602 z m 0,0"
                        id="E53k" /&gt;
                &lt;/g&gt;
            &lt;/g&gt;
        &lt;/svg&gt;

&lt;/div&gt;

&lt;div&gt;
    &lt;p&gt;Select Speed Limit:
        &lt;select name="speed" id="speedSelector"&gt;
            &lt;option value="L5"&gt;5 &lt;span class="caps"&gt;MPH&lt;/span&gt;&lt;/option&gt;
            &lt;option value="L10"&gt;10 &lt;span class="caps"&gt;MPH&lt;/span&gt;&lt;/option&gt;
            &lt;option value="L15"&gt;15 &lt;span class="caps"&gt;MPH&lt;/span&gt;&lt;/option&gt;
            &lt;option value="L20"&gt;20 &lt;span class="caps"&gt;MPH&lt;/span&gt;&lt;/option&gt;
            &lt;option value="L25"&gt;25 &lt;span class="caps"&gt;MPH&lt;/span&gt;&lt;/option&gt;
            &lt;option value="L30"&gt;30 &lt;span class="caps"&gt;MPH&lt;/span&gt;&lt;/option&gt;
            &lt;option value="L35"&gt;35 &lt;span class="caps"&gt;MPH&lt;/span&gt;&lt;/option&gt;
            &lt;option value="L40"&gt;40 &lt;span class="caps"&gt;MPH&lt;/span&gt;&lt;/option&gt;
            &lt;option value="L45"&gt;45 &lt;span class="caps"&gt;MPH&lt;/span&gt;&lt;/option&gt;
            &lt;option value="L50"&gt;50 &lt;span class="caps"&gt;MPH&lt;/span&gt;&lt;/option&gt;
            &lt;option value="L55"&gt;55 &lt;span class="caps"&gt;MPH&lt;/span&gt;&lt;/option&gt;
            &lt;option value="L60"&gt;60 &lt;span class="caps"&gt;MPH&lt;/span&gt;&lt;/option&gt;
            &lt;option value="L65"&gt;65 &lt;span class="caps"&gt;MPH&lt;/span&gt;&lt;/option&gt;
            &lt;option value="L70"&gt;70 &lt;span class="caps"&gt;MPH&lt;/span&gt;&lt;/option&gt;
            &lt;option value="L75"&gt;75 &lt;span class="caps"&gt;MPH&lt;/span&gt;&lt;/option&gt;
            &lt;option value="L80"&gt;80 &lt;span class="caps"&gt;MPH&lt;/span&gt;&lt;/option&gt;
            &lt;option value="L85"&gt;85 &lt;span class="caps"&gt;MPH&lt;/span&gt;&lt;/option&gt;
        &lt;/select&gt;
    &lt;/p&gt;
&lt;/div&gt;

&lt;script type="text/javascript"&gt;

    window.addEventListener("load", updateSVGs);
    function updateSVGs() {

        let layerNames = ["L5", "L10", "L15", "L20", "L25", "L30",
            "L35", "L40", "L45", "L50", "L55", "L60",
            "L65", "L70", "L75", "L80", "L85"];

        let randomLayer = randomPick(layerNames);

        let layer = document.getElementById(randomLayer);
        layer.setAttributeNS(null, 'style', "display: inline;");

        let speedSelector = document.getElementById("speedSelector");
        speedSelector.value = randomLayer; 

        speedSelector.addEventListener("change", () =&gt; {
            //console.log(speedSelector.value); 
            turnOff(layerNames);
            turnOn(speedSelector.value);
        });

    }

    function turnOn(value) {
        let layer = document.getElementById(value);
        layer.setAttributeNS(null, 'style', "display: inline;");
    }

    function turnOff(layerNames) {
        for (let layer of layerNames) {
            let layerNode = document.getElementById(layer);
            layerNode.setAttributeNS(null, "style", "display: none;");
        }
    }

    function randomPick(array) {
        let choice = Math.floor(Math.random() * array.length);
        return array[choice];
    }

&lt;/script&gt;

&lt;h4&gt;How Does It Work?&lt;/h4&gt;
&lt;p&gt;The speed limit sign was created with Inkscape and 
&lt;a href="https://gotrafficsign.com/"&gt;OpenSignTool&lt;/a&gt;.  The &lt;span class="caps"&gt;SVG&lt;/span&gt; file has 17 layers 
for different speed limit numbers from 5 &lt;span class="caps"&gt;MPH&lt;/span&gt; to 85 &lt;span class="caps"&gt;MPH&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;When the page loads, the javascript program picks a random speed and 
turns on the &lt;span class="caps"&gt;SVG&lt;/span&gt; layer with that speed. When a user chooses a speed 
on the dropdown box, the program turns off the previous layer and turns 
on the chosen layer.  You can view the code by right click the webpage 
and choose &amp;#8220;View Page Source&amp;#8221; menu. &lt;/p&gt;
&lt;p&gt;Next step for the app is to add another dropdown control for file 
formats (&lt;span class="caps"&gt;SVG&lt;/span&gt;, &lt;span class="caps"&gt;EMF&lt;/span&gt;, &lt;span class="caps"&gt;PNG&lt;/span&gt;) and a download button for user to download 
a file to local computer. &lt;/p&gt;
&lt;p&gt;I also referenced those two online articles when working on this
blog post. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.petercollingridge.co.uk/tutorials/svg/interactive/javascript/"&gt;&lt;em&gt;Using Javascript With &lt;span class="caps"&gt;SVG&lt;/span&gt;&lt;/em&gt;&lt;/a&gt; by Peter Collingridge.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tympanus.net/codrops/2014/08/19/making-svgs-responsive-with-css/"&gt;&lt;em&gt;Making SVGs Responsive with &lt;span class="caps"&gt;CSS&lt;/span&gt;&lt;/em&gt;&lt;/a&gt; by Sara Soueidan.&lt;/li&gt;
&lt;/ol&gt;</content><category term="posts"></category><category term="web development"></category><category term="javascript"></category></entry><entry><title>HTML, CSS, and Others</title><link href="https://www.georgexyz.com/html-css-others.html" rel="alternate"></link><published>2019-11-25T13:07:00-05:00</published><updated>2019-11-25T13:07:00-05:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-11-25:/html-css-others.html</id><summary type="html">&lt;p&gt;This post is an update on what I am working on. &lt;/p&gt;
&lt;h4&gt;&lt;span class="caps"&gt;CSS&lt;/span&gt; Books&lt;/h4&gt;
&lt;p&gt;I recently re-read the online book &lt;a href="https://internetingishard.com/"&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt;/&lt;span class="caps"&gt;CSS&lt;/span&gt; Is Hard&lt;/a&gt; which 
is an excellent resource to learn …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post is an update on what I am working on. &lt;/p&gt;
&lt;h4&gt;&lt;span class="caps"&gt;CSS&lt;/span&gt; Books&lt;/h4&gt;
&lt;p&gt;I recently re-read the online book &lt;a href="https://internetingishard.com/"&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt;/&lt;span class="caps"&gt;CSS&lt;/span&gt; Is Hard&lt;/a&gt; which 
is an excellent resource to learn &lt;span class="caps"&gt;CSS&lt;/span&gt;.  Jon Duckett’s &lt;em&gt;Web Design with &lt;span class="caps"&gt;HTML&lt;/span&gt; and &lt;span class="caps"&gt;CSS&lt;/span&gt;&lt;/em&gt; 
book is a good introductory book, but it does not cover advanced &lt;span class="caps"&gt;CSS&lt;/span&gt; features.  This 
online book covers these topics very well. The illustrations in the book are wonderful.&lt;/p&gt;
&lt;p&gt;I also read another &lt;span class="caps"&gt;CSS&lt;/span&gt; book &lt;em&gt;&lt;span class="caps"&gt;CSS&lt;/span&gt; In Depth&lt;/em&gt; by Keith Grant which is also an excellent 
book.  The basic rules of &lt;span class="caps"&gt;CSS&lt;/span&gt; are straightforward, but it is not easy to layout 
a nice webpage for both mobile devices and desktops.  This book discusses many 
advanced topics in &lt;span class="caps"&gt;CSS&lt;/span&gt;.&lt;/p&gt;
&lt;h4&gt;Wget to Download Website&lt;/h4&gt;
&lt;p&gt;I searched and found an online article Q/A post 
“&lt;a href="https://superuser.com/questions/14403/how-can-i-download-an-entire-website"&gt;How can I download an entire website&lt;/a&gt;”. The post has an answer which shows how to download a website to local hard drive
with Linux command line tool wget.  The command is shown below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wget -m -p -E -k www.excample.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;-m : &amp;#8212;mirror recursion and time stamping&lt;/li&gt;
&lt;li&gt;-p : all images&lt;/li&gt;
&lt;li&gt;-E : adjust extension&lt;/li&gt;
&lt;li&gt;-k : convert links for local file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I tested the command on internetingishard.com and it worked well. &lt;/p&gt;
&lt;p&gt;This &lt;a href="https://www.gnu.org/software/wget/manual/html_node/Recursive-Retrieval-Options.html"&gt;&lt;span class="caps"&gt;GNU&lt;/span&gt; Wget manual&lt;/a&gt; 
web page lists other recursive options.  If you want to retrieval one level down, you can use 
options &lt;code&gt;-r -l 1&lt;/code&gt; instead of option &lt;code&gt;-m&lt;/code&gt;. &lt;/p&gt;
&lt;h4&gt;&lt;span class="caps"&gt;VS&lt;/span&gt; Code&lt;/h4&gt;
&lt;p&gt;Vim has been my main text editor for some time.  But it is not ideal for 
coding &lt;span class="caps"&gt;HTML&lt;/span&gt;/&lt;span class="caps"&gt;CSS&lt;/span&gt; webpages.  &lt;span class="caps"&gt;VS&lt;/span&gt; code installed in Linux Mint works very well. 
It also has Emmet auto completion built in. It makes coding &lt;span class="caps"&gt;HTML&lt;/span&gt;/&lt;span class="caps"&gt;CSS&lt;/span&gt; 
much easier and faster. Youtube has &lt;a href="https://youtu.be/5BIAdWNcr8Y"&gt;a nice tutorial on how to use Emmet&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;The other nice feature of &lt;span class="caps"&gt;VS&lt;/span&gt; Code is that it is easy to install plugins. 
I installed Live Server Addon plugin with a few mouse clicks.  It takes efforts
to make plugins work in vim. &lt;/p&gt;
&lt;h4&gt;Inkscape 1.0 Beta Testing&lt;/h4&gt;
&lt;p&gt;Inkscape 1.0 Beta is out.  I test it out in Windows and it crashes often. 
It is not ready for production work yet.  The built in Python system has been 
upgraded to 3.7, which is long overdue.  One plugin I wrote (Draw Sign Arrow) for 
Inkscape 0.9.2 works fine in Inkscape 1.0 beta without any changes. &lt;/p&gt;
&lt;p&gt;I plan to upgrade all my Inkscape python programs to 3.7 in near future. &lt;/p&gt;</content><category term="posts"></category><category term="web development"></category></entry><entry><title>Bash Command Line Editing Shortcuts</title><link href="https://www.georgexyz.com/bash-shortcuts.html" rel="alternate"></link><published>2019-10-12T13:19:00-04:00</published><updated>2019-10-12T13:19:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-10-12:/bash-shortcuts.html</id><summary type="html">&lt;p&gt;I recently spent sometime reading two Linux command line books.  The first is William Shotts&amp;#8217; 
&lt;em&gt;The Linux Command Line (2e)&lt;/em&gt;, and the second one is &lt;em&gt;Learning the Bash Shell&lt;/em&gt; 
by …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently spent sometime reading two Linux command line books.  The first is William Shotts&amp;#8217; 
&lt;em&gt;The Linux Command Line (2e)&lt;/em&gt;, and the second one is &lt;em&gt;Learning the Bash Shell&lt;/em&gt; 
by Cameron Newbam and Bill Rosenblatt. Both books are good.  The first book is 
written in a tutorial style and easy to understand.  The second one is on 
Bash shell only and is more thorough. &lt;/p&gt;
&lt;div style="max-width:800px"&gt;
  &lt;img class="img-fluid pb-3" src="/images/bash-books-crop.jpg" alt="bash-books"&gt; 
&lt;/div&gt;

&lt;p&gt;The &lt;em&gt;Learning the Bash Shell&lt;/em&gt; book is in its third edition, and the book was 
published in April 2005.  The first edition was published in 1995, so it is an 
old book.  The third edition covers Bash 3.0.  Bash 5.0 has already been 
released. However, most contents in the book still apply to current release. &lt;/p&gt;
&lt;p&gt;Chapter 2 of the book describes that Bash has two editing mode: emacs and vi. 
The default is emacs mode. When you open a Terminal window (Ctrl + Alt + T) in 
Ubuntu, the command line is in emacs editing mode.  You can change it to vi mode 
by command &lt;code&gt;set -o vi&lt;/code&gt; and change it back by &lt;code&gt;set -o emacs&lt;/code&gt;.  The emacs mode 
is adequate for most situations. The mode has some useful shortcuts (listed
below) in addition to common ones like Tab, Arrow Up, Arrow Down. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Ctrl + a&lt;/code&gt; : Move cursor to the beginning of the line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + e&lt;/code&gt; : Move cursor to the end&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + r&lt;/code&gt; : Search command history (Reverse incremental search)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + j&lt;/code&gt; : Work with &lt;code&gt;Ctrl + r&lt;/code&gt;, copy command to command line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + k&lt;/code&gt; : Delete from cursor to the end of the line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + u&lt;/code&gt; : Delete from the beginning of the line to cursor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + l&lt;/code&gt; : Clear the screen&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + t&lt;/code&gt; : Transpose two character&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A reddit post 
&amp;#8220;&lt;a href="https://www.reddit.com/r/vim/comments/a65qfe/do_you_use_bash_vi_mode/"&gt;do you use bash vi mode&lt;/a&gt;&amp;#8221; 
has some interesting discussion on 
whether to use vi mode.  I personally think emacs mode with the above shortcuts 
is good enough. &lt;/p&gt;</content><category term="posts"></category><category term="linux"></category><category term="bash"></category></entry><entry><title>Python Doctest</title><link href="https://www.georgexyz.com/python-doctest.html" rel="alternate"></link><published>2019-10-05T15:42:00-04:00</published><updated>2019-10-05T15:42:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-10-05:/python-doctest.html</id><summary type="html">&lt;p&gt;Python doctest is easier to use than unittest and pytest. A developer writes the 
test cases in the documentation and doctest module verifies the results. There are 
examples in the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python doctest is easier to use than unittest and pytest. A developer writes the 
test cases in the documentation and doctest module verifies the results. There are 
examples in the &lt;em&gt;Fluent Python&lt;/em&gt; book that use doctest, but I have not seen them 
used often. &lt;/p&gt;
&lt;p&gt;The Python Module of The Week web site has 
&lt;a href="https://pymotw.com/3/doctest/"&gt;a page on doctest&lt;/a&gt;.  It is a nice introduction on
how to use doctest. The doctest module is useful in some situations. &lt;/p&gt;
&lt;p&gt;Below is a python file which includes a single function. The function has a docstring
which also serves as doctest. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="c1"&gt;# nested_sum adds up elements from a list of lists of integers&lt;/span&gt;
&lt;span class="c1"&gt;#            file name: nested_sum.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nested_sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; t = [[1, 2], [3], [4, 5, 6]]&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; nested_sum(t)&lt;/span&gt;
&lt;span class="sd"&gt;    21&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run the python file with the following command in bash. Note the &lt;code&gt;-m&lt;/code&gt; option 
loads doctest module. The &lt;code&gt;-v&lt;/code&gt; option represents verbose. Without the &lt;code&gt;-v&lt;/code&gt; 
option, the command outputs nothing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python -m doctest -v nested_sum.py 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here are the doctest results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Trying:
    t = [[1, 2], [3], [4, 5, 6]]
Expecting nothing
ok
Trying:
    nested_sum(t)
Expecting:
    21
ok
1 items had no tests:
    nested_sum
1 items passed all tests:
   2 tests in nested_sum.nested_sum
2 tests in 2 items.
2 passed and 0 failed.
Test passed.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="posts"></category><category term="python"></category></entry><entry><title>Linux Mint Default Command Prompt String</title><link href="https://www.georgexyz.com/linux-command-prompt.html" rel="alternate"></link><published>2019-09-07T01:31:00-04:00</published><updated>2019-09-07T01:31:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-09-07:/linux-command-prompt.html</id><summary type="html">&lt;p&gt;William Shotts&amp;#8217; &lt;em&gt;The Linux Command Line&lt;/em&gt; is an excellent book. It is written 
in a tutorial style and very easy to understand. The &lt;span class="caps"&gt;PDF&lt;/span&gt; file of the whole book is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;William Shotts&amp;#8217; &lt;em&gt;The Linux Command Line&lt;/em&gt; is an excellent book. It is written 
in a tutorial style and very easy to understand. The &lt;span class="caps"&gt;PDF&lt;/span&gt; file of the whole book is 
&lt;a href="http://linuxcommand.org/tlcl.php"&gt;freely available online&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Chapter 13 of the book discusses how to customize linux command prompt. The default 
command prompt is defined by an environment variable named &lt;code&gt;PS1&lt;/code&gt;. The &lt;code&gt;PS1&lt;/code&gt; is 
defined as a long string in Linux Mint (or Ubuntu). See the screenshot below:&lt;/p&gt;
&lt;p&gt;&lt;img class="img-fluid pb-3" src="/images/command-prompt.png" alt="command-prompt"&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;PS1&lt;/code&gt; string can be divided into three parts:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;\[\e]0;\u@\h: \w\a\]
${debian_chroot:+($debian_chroot)}
\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is a little hard to understand the &lt;code&gt;PS1&lt;/code&gt; string even after reading the book chapter. 
A few Google searches find other people are also asking the meaning of the string, 
and it has already been answered by someone. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\[\e]0;\u@\h: \w\a\]&lt;/code&gt; sets the title bar of terminal&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\[&lt;/code&gt; starts a series of one or more non-printing characters&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\e]0;&lt;/code&gt; is for setting terminal title, &lt;code&gt;\e&lt;/code&gt; is the same as &lt;code&gt;\033&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\u@\h \w&lt;/code&gt; means username@hostname and working directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\a&lt;/code&gt; marks the end of the title&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\]&lt;/code&gt; ends non-printing characters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${var:+value}&lt;/code&gt; means if &lt;code&gt;$var&lt;/code&gt; is defined; then use &lt;code&gt;value&lt;/code&gt;; else do nothing. The 
  &lt;code&gt;debian_chroot&lt;/code&gt; on the second line is defined in the &lt;code&gt;/etc/bash.bashrc&lt;/code&gt; file (discussed
   later in this article).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$&lt;/code&gt; is the actual
  command prompt&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\033[01;32m&lt;/code&gt; is for color light green (Table 13-2 in the book)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\033[00m&lt;/code&gt; turns off color&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\033[01;34m&lt;/code&gt; is for color light blue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The variable &lt;code&gt;debian_chroot&lt;/code&gt; is defined in the &lt;code&gt;/etc/bash.bashrc&lt;/code&gt; file as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;if [ -z &amp;quot;${debian_chroot:-}&amp;quot; ] &amp;amp;&amp;amp; [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It means that if the variable &lt;code&gt;$debian_chroot&lt;/code&gt; is empty and the file &lt;code&gt;/etc/debian_chroot&lt;/code&gt; 
is readable, the variable is assigned the content of the file.&lt;/p&gt;
&lt;p&gt;Most explanations above are from two askubuntu web pages: 
&lt;a href="https://askubuntu.com/questions/404341/where-can-i-find-a-complete-reference-for-the-ps1-variable"&gt;question 404341&lt;/a&gt; 
and 
&lt;a href="https://askubuntu.com/questions/372849/what-does-debian-chrootdebian-chroot-do-in-my-terminal-prompt"&gt;question 372849&lt;/a&gt;. &lt;/p&gt;</content><category term="posts"></category><category term="linux"></category><category term="linux mint"></category><category term="bash"></category></entry><entry><title>Python Pipenv Tool</title><link href="https://www.georgexyz.com/python-pipenv-tool.html" rel="alternate"></link><published>2019-09-02T00:32:00-04:00</published><updated>2020-02-27T15:40:00-05:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-09-02:/python-pipenv-tool.html</id><summary type="html">&lt;p&gt;Pyenv is the tool I use to install multiple versions of python in Linux, and I have 
&lt;a href="https://www.georgexyz.com/pyenv-python-tool.html"&gt;a short post on how to install pyenv&lt;/a&gt;. I simply 
use the python …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pyenv is the tool I use to install multiple versions of python in Linux, and I have 
&lt;a href="https://www.georgexyz.com/pyenv-python-tool.html"&gt;a short post on how to install pyenv&lt;/a&gt;. I simply 
use the python built-in tool venv to manage virtual environment. It works fine 
for most tasks. &lt;/p&gt;
&lt;p&gt;William Vicent recommends pipenv tool in his &lt;em&gt;Django for Beginners&lt;/em&gt; book. Corey Schafer also 
favors pipenv in this youtube tutorials. I take a close look at the tool and I like it. &lt;/p&gt;
&lt;p&gt;Here are the links to two youtube videos and an article on real python website. 
Those are very nice resources to learn pipenv. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/zDYL22QNiWk"&gt;Corey Schafer&amp;#8217;s Pipenv Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/GBQAKldqgZs"&gt;Pipenv Author Kenneth Reitz&amp;#8217;s Pycon Talk on Pipenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/pipenv-guide/"&gt;Pipenv Tutorial on Realpython.com&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will use pipenv to manage virtual environment and packages in my future projects. 
The shell script file for updating this website has been modified to like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# commit_change.sh
if [ -z &amp;quot;$1&amp;quot; ]  # if no command line arg, exit
then
    echo &amp;quot;\$1 is empty&amp;quot;
    exit
fi

# pipenv shell # does not work
pipenv run invoke clean build # see stack overflow 48056606
git status
git add -A
#echo $1
git commit -m &amp;quot;$1&amp;quot;
git push origin master # update source code

pipenv run ghp-import output -b gh-pages
git push origin gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The website is updated with the bash command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;source commit_change.sh &amp;quot;git commit message&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here are some common pipenv commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$pip install pipenv      # global install
$pipenv install requests # virtualenv in ~/.local/share/virtualenvs/...
$pipenv shell

$pipenv run python ...   # no need to activate
&amp;gt;&amp;gt;&amp;gt; import requests

$pipenv install -r requirements.txt
$pipenv lock -r &amp;gt; requirements.txt   # create

$pipenv install pytest --dev
$pipenv uninstall requests

$pipenv --python 3.6
$pipenv --rm      # remove virtual env
$pipenv install   # from Pipfile
$pipenv --venv    # show path

$pipenv check
$pipenv graph     # show dependency
$pipenv install --ignore-pipfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When I am reading Miguel Grinberg&amp;#8217;s Flask Mega Tutorial Chapter 15 
&lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xv-a-better-application-structure"&gt;A Better Application Structure&lt;/a&gt;. 
He recommends to use a python package &lt;code&gt;python-dotenv&lt;/code&gt; to load environment variables. 
Corey Schafer&amp;#8217;s tutorial video mentioned that pipenv can load environment variables as well. &lt;/p&gt;
&lt;p&gt;This &lt;a href="https://pipenv-fork.readthedocs.io/en/latest/advanced.html"&gt;Pipenv documentation page&lt;/a&gt; 
has a section &lt;em&gt;Automatic Loading of .env&lt;/em&gt;. If a project directory has a .env file, pipenv 
commands &lt;code&gt;$pipenv shell&lt;/code&gt; and &lt;code&gt;$pipenv run&lt;/code&gt; will automatically load it. You can set the 
&lt;code&gt;PIPENV_DOTENV_LOCATION&lt;/code&gt; to change the file location or file name. You can also set 
&lt;code&gt;PIPENV_DONT_LOAD_ENV =1&lt;/code&gt; to prevent pipenv from loading the .env file.&lt;/p&gt;</content><category term="posts"></category><category term="python"></category></entry><entry><title>Django Model and Form Validation</title><link href="https://www.georgexyz.com/django-model-form-validation.html" rel="alternate"></link><published>2019-08-15T00:59:00-04:00</published><updated>2019-08-15T00:59:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-08-15:/django-model-form-validation.html</id><summary type="html">&lt;p&gt;Django model and form validation is a somewhat complicated and 
confusing topic in Django app development.  A developer needs to understand 
several basic concepts such as model, model field, form …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Django model and form validation is a somewhat complicated and 
confusing topic in Django app development.  A developer needs to understand 
several basic concepts such as model, model field, form, model form, etc. to 
have a good understanding of validation.  Most Django books and online tutorials 
do not have a good discussion on validation. &lt;/p&gt;
&lt;p&gt;Django official documentation has detailed descriptions on validation. 
However, the contents are dispersed on several places.  This post describes the 
materials I have read on this topic. &lt;/p&gt;
&lt;h3&gt;Validator Function&lt;/h3&gt;
&lt;p&gt;The 
&lt;a href="https://docs.djangoproject.com/en/2.2/ref/validators/#django.core.validators.EmailValidator"&gt;validator official documentation page&lt;/a&gt; 
is a good starting point to study model and form validation. &lt;/p&gt;
&lt;p&gt;The validator function is a callable that takes a value and raises a 
ValidationError if not validated. Here is an example from the page:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;from django.core.exceptions import ValidationError
from django.utils.translation import gettext_lazy as _

def validate_even(value):
    if value % 2 != 0:
        raise ValidationError(
            _(&amp;#39;%(value)s is not an even number&amp;#39;),
            params={&amp;#39;value&amp;#39;: value},
        )

from django.db import models

class MyModel(models.Model):
    even_field = models.IntegerField(validators=[validate_even])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The subsection &lt;em&gt;how validators are run&lt;/em&gt; on the validator
page has three links. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The second link &lt;em&gt;validating objects&lt;/em&gt; is about 
&lt;em&gt;model validation&lt;/em&gt;.  The link points to a subsection on the 
&lt;a href="https://docs.djangoproject.com/en/2.2/ref/models/instances/#validating-objects"&gt;model instance reference&lt;/a&gt; 
page. &lt;/li&gt;
&lt;li&gt;The first link &lt;em&gt;form validation&lt;/em&gt; points 
to a separate page about 
&lt;a href="https://docs.djangoproject.com/en/2.2/ref/forms/validation/"&gt;&lt;em&gt;form validation&lt;/em&gt;&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;The third link goes to the ModelForm page. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Model Validation&lt;/h3&gt;
&lt;p&gt;A model&amp;#8217;s &lt;code&gt;full_clean()&lt;/code&gt; method performs model validation. The method calls 
three other methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clean_fields()&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clean()&lt;/code&gt; method, as a whole&lt;/li&gt;
&lt;li&gt;&lt;code&gt;validate_unique()&lt;/code&gt; method&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The model &lt;code&gt;save()&lt;/code&gt; method does &lt;span class="caps"&gt;NOT&lt;/span&gt; call &lt;code&gt;full_clean()&lt;/code&gt; method automatically. 
A programmer needs to call it manually to trigger model validation like 
the below code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;try:
    article.full_clean()
except ValidationError as e:
    ...
    # handle the error
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/7366363/adding-custom-django-model-validation"&gt;A stack overflow answer&lt;/a&gt; 
shows a typical pattern to conduct custom model validation. The model class overrides the 
&lt;code&gt;clean()&lt;/code&gt; method to provide custom model validation and the &lt;code&gt;save()&lt;/code&gt; method 
to call &lt;code&gt;full_clean&lt;/code&gt; method.  The example code is shown below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;class BaseModel(models.Model):
    # model fields 

    def clean(self, *args, **kwargs):
        # add custom validation here
        super(BaseModel, self).clean(*args, **kwargs)

    def save(self, *args, **kwargs):
        self.full_clean()
        super(BaseModel, self).save(*args, **kwargs)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/42003866/django-validation-at-model-not-forms-level"&gt;Another stack overflow answer&lt;/a&gt; 
shows how to use custom model validation or simply use model field&amp;#8217;s built-in 
validator.&lt;/p&gt;
&lt;p&gt;Model field&amp;#8217;s validation will not kick in unless the &lt;code&gt;full_clean()&lt;/code&gt; method 
is explicitly called. For example, the &lt;code&gt;p2.save()&lt;/code&gt; below would not raise an 
exception when called. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;class PageModel(models.Model):
    name = models.CharField(max_length=50)
    slug = models.SlugField(max_length=50)

&amp;gt;&amp;gt;&amp;gt; from page.models import PageModel #page app name
&amp;gt;&amp;gt;&amp;gt; p1 = PageModel(name=&amp;#39;Page1&amp;#39;, slug=&amp;#39;page1&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; p1.save()
&amp;gt;&amp;gt;&amp;gt; p2 = PageModel(name=&amp;#39;Page2&amp;#39;, slug=&amp;#39;page2#$%&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; p2.save()        # no error
&amp;gt;&amp;gt;&amp;gt; p2.full_clean()  # raise exception
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Checking &lt;code&gt;clean_fields()&lt;/code&gt; method source code, it has the following lines. 
The &lt;code&gt;f.clean(...)&lt;/code&gt; method calls validation method on a model field.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;try:
    setattr(self, f.attname, f.clean(raw_value, self))
except ValidationError as e:
    errors[f.name] = e.error_list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Form Validation&lt;/h3&gt;
&lt;p&gt;While model validation is a subsection on a Django documentation page, the 
&lt;a href="https://docs.djangoproject.com/en/2.2/ref/forms/validation/"&gt;form validation&lt;/a&gt; 
is on a separate page. Form validation is normally executed when the &lt;code&gt;is_valid()&lt;/code&gt; 
method is called on a form. A programmer can also trigger form validation 
by accessing &lt;code&gt;errors&lt;/code&gt; attribute or call &lt;code&gt;full_clean()&lt;/code&gt; method of a form.&lt;/p&gt;
&lt;p&gt;Form validation has a series of steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;to_python()&lt;/code&gt; method on a field, correct data type&lt;/li&gt;
&lt;li&gt;&lt;code&gt;validation()&lt;/code&gt; method on a field&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run_validators()&lt;/code&gt; method on a field&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clean()&lt;/code&gt; method on a Field subclass, which calls above three methods and returns the clean data&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clean_&amp;lt;fieldname&amp;gt;()&lt;/code&gt; method has access to cleaned_data Python object and returns value that replaces data in cleaned_data&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clean()&lt;/code&gt; method of form, for multiple fields&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The same documetation page has several nice examples, which are based on the 
model shown below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;class ContactForm(forms.Form):
    subject = forms.CharField(max_length=100)
    message = forms.CharField()
    sender = forms.EmailField()
    recipients = MultiEmailField()
    cc_myself = forms.BooleanField(required=False)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The same page points out that &amp;#8220;there are special considerations when overriding 
the &lt;code&gt;clean()&lt;/code&gt; method of a ModelForm subclass.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Chapter 7 of Andrew Pinkham&amp;#8217;s &lt;em&gt;Django Unleashed&lt;/em&gt; book, titled &lt;em&gt;allowing user 
input with forms&lt;/em&gt;, has good example on how to override &lt;code&gt;clean_&amp;lt;fieldname&amp;gt;&lt;/code&gt; 
method. The discussion on model validation and form validation in this chapter 
is better than other Django books I have read. &lt;/p&gt;
&lt;h3&gt;ModelForm Validation&lt;/h3&gt;
&lt;p&gt;The form validation steps described in the previous section also apply to 
ModelForm validation.  In addition to that, &lt;code&gt;Model.full_clean()&lt;/code&gt; method is 
triggered after the form&amp;#8217;s &lt;code&gt;clean()&lt;/code&gt; method is called. So, model validation 
methods are not triggered by model &lt;code&gt;save()&lt;/code&gt; method, but model validation methods 
are triggered by ModelForm validation. 
&lt;a href="https://stackoverflow.com/questions/40881708/django-model-validator-not-working-on-create"&gt;This stack overflow question&lt;/a&gt; 
discusses this exact issue. The accepted answer also has code example on 
model validation. &lt;/p&gt;
&lt;p&gt;Error messages at the form field level take precedence over the error messages 
defined at the model field level. &lt;/p&gt;</content><category term="posts"></category><category term="django"></category></entry><entry><title>Linux Command Grep</title><link href="https://www.georgexyz.com/linux-command-grep.html" rel="alternate"></link><published>2019-07-19T15:07:00-04:00</published><updated>2019-07-19T16:00:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-07-19:/linux-command-grep.html</id><summary type="html">&lt;p&gt;Grep command searches file contents to find lines that contain a pattern.  The 
pattern is described in Regular Expression (regex) language. Here are three 
youtube video links about Grep and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Grep command searches file contents to find lines that contain a pattern.  The 
pattern is described in Regular Expression (regex) language. Here are three 
youtube video links about Grep and regular expressions. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=NTfOnGZUZDk"&gt;Brian Kernighan Youtube Talk on Grep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/VGgTmxXp7xQ"&gt;Corey Schafer Linux Terminal Tutorial for Grep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/kWyoYtvJpe4"&gt;Nick Parlante&amp;#8217;s Python Regex Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ryan&amp;#8217;s Tutorials website has &lt;a href="https://ryanstutorials.net/linuxtutorial/grep.php"&gt;a nice introduction&lt;/a&gt; 
to &lt;em&gt;Grep and Regular Expression&lt;/em&gt;.  Note egrep is a shortcut to &lt;code&gt;grep -E&lt;/code&gt; in 
Ubuntu. The man page of grep describes that &amp;#8220;in &lt;span class="caps"&gt;GNU&lt;/span&gt; grep there is no difference 
in available functionality between basic and  extended syntaxes&amp;#8221;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$which egrep
/bin/egrep
$file /bin/egrep
/bin/egrep: POSIX shell script, ASCII text executable
$vim /bin/egrep  # file content is
#!/bin/sh
exec grep -E &amp;quot;$@&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is a very simple grep example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$grep &amp;quot;Jane Williams&amp;quot; filename.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The grep command has many options. A few common ones are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-w : Whole word&lt;/li&gt;
&lt;li&gt;-i : ignore case&lt;/li&gt;
&lt;li&gt;-n  : line number&lt;/li&gt;
&lt;li&gt;-B 4 : 4 lines before&lt;/li&gt;
&lt;li&gt;-A 4 : 4 lines after&lt;/li&gt;
&lt;li&gt;-C 2 : 2 lines before, 2 lines after&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;filename.txt&lt;/code&gt; in the above example could be either &lt;code&gt;./*&lt;/code&gt; or &lt;code&gt;./*.txt&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;For example, this command will search current directory and subdirectories. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$grep -winr &amp;quot;Jane Williams&amp;quot; ./
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here are a few more options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-r : recursive&lt;/li&gt;
&lt;li&gt;-l : file name only&lt;/li&gt;
&lt;li&gt;-c : count, print a count&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can use pipes to search the results of another command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$history | grep &amp;quot;git commit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The grep &lt;code&gt;-P&lt;/code&gt; option interprets the pattern as a Perl-compatible regex. The 
Python and Perl &amp;#8220;essentially has the same regex syntax&amp;#8221;.  So with the &lt;code&gt;-P&lt;/code&gt; 
option turned on, the grep command will accept Python style special characters 
in pattern. Here is a list of common regex special characters in Python:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.(dot) : any char&lt;/li&gt;
&lt;li&gt;\w : word char &amp;#8216;A-Za-z0-9_&amp;#8217;&lt;/li&gt;
&lt;li&gt;\d : digit&lt;/li&gt;
&lt;li&gt;\s : white space&lt;/li&gt;
&lt;li&gt;* : zero or more&lt;/li&gt;
&lt;li&gt;+ : one or more&lt;/li&gt;
&lt;/ul&gt;
&lt;div style="margin-bottom:.4in;"&gt;&lt;/div&gt;

&lt;hr&gt;

&lt;p&gt;&lt;em&gt;Update on 8/28/2020:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Today I want to see how many blog posts I have written this year and compare the number with last year. 
I want to search &lt;code&gt;date: 2020-&lt;/code&gt;, but find grep does not like the character &lt;code&gt;-&lt;/code&gt;.  A Google search 
with phrases &amp;#8220;grep search dash&amp;#8221; finds 
&lt;a href="https://stackoverflow.com/questions/2427913/how-can-i-grep-for-a-string-that-begins-with-a-dash-hyphen"&gt;an stackoverflow post&lt;/a&gt;.
It turns out that the dash character needs to escape twice like this &lt;code&gt;date: 2020\\-&lt;/code&gt;. So the command 
to tally blog posts becomes like this,  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;grep -r &amp;quot;date: 2020\\-&amp;quot; | wc -l
grep -r &amp;quot;date: 2019\\-&amp;quot; | wc -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The result is 26 v.s. 26. The 2019 only covers 9 months starting from 4/1 and 2020 covers 8 months 
so far, so it is close. &lt;/p&gt;</content><category term="posts"></category><category term="linux"></category><category term="software utility"></category></entry><entry><title>Django Pagination</title><link href="https://www.georgexyz.com/django-pagination.html" rel="alternate"></link><published>2019-07-17T10:05:00-04:00</published><updated>2020-04-30T12:58:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-07-17:/django-pagination.html</id><summary type="html">&lt;p&gt;Merriam-Webster dictionary defines pagination as &amp;#8220;the action of paging&amp;#8221;. In web 
design world, pagination means separating a large list of contents onto 
different pages for easy web navigation.   &lt;/p&gt;
&lt;p&gt;Django provides …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Merriam-Webster dictionary defines pagination as &amp;#8220;the action of paging&amp;#8221;. In web 
design world, pagination means separating a large list of contents onto 
different pages for easy web navigation.   &lt;/p&gt;
&lt;p&gt;Django provides a few classes that help you manage pagination.  The official documentation has 
&lt;a href="https://docs.djangoproject.com/en/2.2/topics/pagination/"&gt;one page on Pagination&lt;/a&gt;.
The source code is in one file django/core/paginator.py, which has 195 lines 
(version 2.2.2). The Paginator and Page classes defined in this file are very 
good python class examples. &lt;/p&gt;
&lt;p&gt;The Paginator class has those public methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;validate_number&lt;/li&gt;
&lt;li&gt;get_page : calls page method, handles exception&lt;/li&gt;
&lt;li&gt;page : page number is 1-based&lt;/li&gt;
&lt;li&gt;count : cached_property&lt;/li&gt;
&lt;li&gt;num_pages&lt;/li&gt;
&lt;li&gt;page_range&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Page class is derived from collections.abc.Sequence, and it has those 
public methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;has_next&lt;/li&gt;
&lt;li&gt;has_previous&lt;/li&gt;
&lt;li&gt;has_other_pages&lt;/li&gt;
&lt;li&gt;next_page_number&lt;/li&gt;
&lt;li&gt;previous_page_number&lt;/li&gt;
&lt;li&gt;start_index&lt;/li&gt;
&lt;li&gt;end_index&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Page class also defines &lt;code&gt;__len__&lt;/code&gt; and &lt;code&gt;__getitem__&lt;/code&gt; methods, and it has 
three attributes: object_list, number, and paginator.&lt;/p&gt;
&lt;p&gt;Chapter 14 of &lt;em&gt;Django Unleashed&lt;/em&gt; book covers how to use the django pagination 
in detail. An online article 
&lt;a href="https://simpleisbetterthancomplex.com/tutorial/2016/08/03/how-to-paginate-with-django.html"&gt;How to Paginate with Django&lt;/a&gt; 
is also a nice summary on how to use paginator.  In class based views, all 
it takes is to add one line of code to use Django paginator.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;paginate_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The template will be rendered with a context object with those contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;context = {
            &amp;#39;paginator&amp;#39;: paginator,
            &amp;#39;page_obj&amp;#39;: page,
            &amp;#39;is_paginated&amp;#39;: is_paginated,
            &amp;#39;object_list&amp;#39;: queryset
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The context object is defined in the &lt;code&gt;get_context_data&lt;/code&gt; method of MultipleObjectMixin. The 
&lt;code&gt;queryset&lt;/code&gt; value of &lt;code&gt;context&lt;/code&gt; dictionary is returned by &lt;code&gt;paginate_queryset&lt;/code&gt; method, and it is 
&lt;code&gt;page.object_list&lt;/code&gt;.  You can easliy navigate the source code on this 
&lt;a href="https://ccbv.co.uk/projects/Django/2.2/django.views.generic.list/ListView/"&gt;Class &lt;span class="caps"&gt;CBV&lt;/span&gt; website&lt;/a&gt;. &lt;/p&gt;</content><category term="posts"></category><category term="django"></category></entry><entry><title>Django Messages Contrib App</title><link href="https://www.georgexyz.com/django-messages.html" rel="alternate"></link><published>2019-07-15T11:25:00-04:00</published><updated>2019-07-15T11:25:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-07-15:/django-messages.html</id><summary type="html">&lt;p&gt;Django messages app is used to &amp;#8220;display one-time notification message to the 
user after processing a form or some other types of user input.&amp;#8221; Django 
official documentation has a page …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Django messages app is used to &amp;#8220;display one-time notification message to the 
user after processing a form or some other types of user input.&amp;#8221; Django 
official documentation has a page 
&lt;a href="https://docs.djangoproject.com/en/2.2/ref/contrib/messages/"&gt;the messages framework&lt;/a&gt; 
for the app. &lt;/p&gt;
&lt;h3&gt;How to Use Messages App&lt;/h3&gt;
&lt;p&gt;Chapter 11 of &lt;em&gt;Django Unleashed&lt;/em&gt; book utilizes the app to convey a message 
that an email has been successfully sent. The code is easy to understand. 
The view adds a success message to the message queue. The next web page 
(redirected page &lt;code&gt;blog_post_list&lt;/code&gt;) will show the message.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# contact/views.py&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.messages&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContactView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;....&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;bound_form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bound_form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;mail_sent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bound_form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_email&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;mail_sent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Email successfully sent.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;------&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blog_post_list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;             &lt;span class="c1"&gt;# &amp;lt;------&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bound_form&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code to show the messages is in the base.html file, and all web pages 
extended from the base.html will show the messages. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  {% for message in messages %}
    {% if message.tags %}
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ message.tags }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    {% else %}
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    {% endif %}
    {{ message }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  {% endfor %}
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code above is very similar to the code shown on the Django official 
documentation page (shown below). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{% if messages %}
&amp;lt;ul class=&amp;quot;messages&amp;quot;&amp;gt;
    {% for message in messages %}
    &amp;lt;li{% if message.tags %} class=&amp;quot;{{ message.tags }}&amp;quot;{% endif %}&amp;gt;
      {{ message }}&amp;lt;/li&amp;gt;
    {% endfor %}
&amp;lt;/ul&amp;gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Source Code Files&lt;/h3&gt;
&lt;p&gt;The source code for the messages app is in the django/contrib/messages directory. 
It consists of 13 python files, and the total line count is 647 in Django 2.2.2.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;george@STK2M3:~$ find . -name &lt;span class="s1"&gt;&amp;#39;*.py&amp;#39;&lt;/span&gt; -exec wc -l &lt;span class="o"&gt;{}&lt;/span&gt; +
   &lt;span class="m"&gt;26&lt;/span&gt; ./middleware.py
    &lt;span class="m"&gt;4&lt;/span&gt; ./__init__.py
   &lt;span class="m"&gt;21&lt;/span&gt; ./constants.py
   &lt;span class="m"&gt;96&lt;/span&gt; ./api.py
   &lt;span class="m"&gt;18&lt;/span&gt; ./views.py
   &lt;span class="m"&gt;13&lt;/span&gt; ./context_processors.py
   &lt;span class="m"&gt;12&lt;/span&gt; ./utils.py
    &lt;span class="m"&gt;7&lt;/span&gt; ./apps.py
  &lt;span class="m"&gt;170&lt;/span&gt; ./storage/base.py       &lt;span class="c1"&gt;#  &amp;lt;----- backend storage&lt;/span&gt;
   &lt;span class="m"&gt;12&lt;/span&gt; ./storage/__init__.py
   &lt;span class="m"&gt;48&lt;/span&gt; ./storage/session.py
  &lt;span class="m"&gt;166&lt;/span&gt; ./storage/cookie.py
   &lt;span class="m"&gt;54&lt;/span&gt; ./storage/fallback.py
  &lt;span class="m"&gt;647&lt;/span&gt; total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Messages App &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;The __init__.py file imports all from api.py and constants.py. The api.py 
file defines the &lt;span class="caps"&gt;API&lt;/span&gt; of the messages app, which includes those functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add_message&lt;/li&gt;
&lt;li&gt;get_message&lt;/li&gt;
&lt;li&gt;get_level&lt;/li&gt;
&lt;li&gt;set_level&lt;/li&gt;
&lt;li&gt;debug, info, warning, success, and error (call add_message)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The functions shows that the attribute &lt;code&gt;_message&lt;/code&gt; of request is the message 
storage.&lt;/p&gt;
&lt;p&gt;The constants.py defines a few constants:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# messages/constants.py&lt;/span&gt;

&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;SUCCESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;span class="n"&gt;WARNING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="n"&gt;ERROR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_TAGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;SUCCESS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;warning&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_LEVELS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;DEBUG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;INFO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;SUCCESS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SUCCESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;WARNING&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;ERROR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The middleware.py code is an good example of how to write a middleware for 
Django. The class derives from MiddlewareMixin and defines two methods 
&lt;code&gt;process_request&lt;/code&gt; and &lt;code&gt;process_response&lt;/code&gt;.  The &lt;code&gt;process_request&lt;/code&gt; adds 
&lt;code&gt;_messages&lt;/code&gt; attribute to the request and &lt;code&gt;process_response&lt;/code&gt; stores the messages 
by calling &lt;code&gt;update&lt;/code&gt; method of &lt;code&gt;_message&lt;/code&gt; and raises an exception if messages 
are not all stored.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# messages/middleware.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.messages.storage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;default_storage&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.deprecation&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MiddlewareMixin&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MessageMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MiddlewareMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Middleware that handles temporary messages.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;default_storage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Update the storage backend (i.e., save the messages).&lt;/span&gt;

&lt;span class="sd"&gt;        Raise ValueError if not all messages could be stored and DEBUG is True.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# A higher middleware layer may return a request which does not contain&lt;/span&gt;
        &lt;span class="c1"&gt;# messages storage, so make no assumption that it will be there.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;unstored_messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_messages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;unstored_messages&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Not all temporary messages could be stored.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The context_processor.py defines a function &lt;code&gt;messages&lt;/code&gt; which simply returns a 
dictionary of two context variables.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# messages/context_processor.py &lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.messages.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_messages&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.messages.constants&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DEFAULT_LEVELS&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Return a lazy &amp;#39;messages&amp;#39; context variable as well as&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;DEFAULT_MESSAGE_LEVELS&amp;#39;.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_messages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;DEFAULT_MESSAGE_LEVELS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DEFAULT_LEVELS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;views.py&lt;/code&gt; defines a SuccessMessageMixin, which adds a success message 
attribute to class based views. It is probably easier for a programmer 
to call &lt;code&gt;success&lt;/code&gt; &lt;span class="caps"&gt;API&lt;/span&gt; method directly to add a message. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;utils.py&lt;/code&gt; file defines a &lt;code&gt;get_level_tags&lt;/code&gt; function which returns a 
dictionary of level tags. &lt;/p&gt;
&lt;h3&gt;Messages Backend Storage&lt;/h3&gt;
&lt;p&gt;The interesting part of the messages app is its storage. The __init__.py in 
the storage defines a &lt;code&gt;default_storage&lt;/code&gt; function. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# messages/storage/__init__.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.module_loading&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;import_string&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;default_storage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Callable with the same interface as the storage classes.&lt;/span&gt;

&lt;span class="sd"&gt;    This isn&amp;#39;t just default_storage = import_string(settings.MESSAGE_STORAGE)&lt;/span&gt;
&lt;span class="sd"&gt;    to avoid accessing the settings at the module level.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;import_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MESSAGE_STORAGE&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The grep command results show that &lt;code&gt;MESSAGE_STORAGE&lt;/code&gt; is assigned FallBackStorage 
class which is defined in the fallback.py file. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;george@STK2M3:~/Desktop/django-2.2.2$ grep -nr &amp;#39;MESSAGE_STORAGE&amp;#39; ./
./django/contrib/messages/storage/__init__.py:9: 
   This isn&amp;#39;t just default_storage = import_string(settings.MESSAGE_STORAGE)
./django/contrib/messages/storage/__init__.py:12: 
   return import_string(settings.MESSAGE_STORAGE)(request)
./django/conf/global_settings.py:554:MESSAGE_STORAGE = 
   &amp;#39;django.contrib.messages.storage.fallback.FallbackStorage&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;import_string&lt;/code&gt; function is defined in the module_loading.py file, which 
&amp;#8220;imports a dotted module path and return the attribute/class designated by the 
last name in the path.&amp;#8221;&lt;/p&gt;
&lt;p&gt;The base.py file defines Message class, which has three attributes: 
level, message, and extra_tags. It also defines BaseStorage class, 
which is an abstraction of messages storage.  Two methods of the class &lt;code&gt;_get&lt;/code&gt; 
and &lt;code&gt;_store&lt;/code&gt; are placeholders and they must be overridden. &lt;/p&gt;
&lt;p&gt;To understand code in the BaseStorage class, we need to think about 
how an object of Message class is instantiated, stored, and retrieved. Here are 
the steps in which methods in BaseStorage are called. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A request comes to Django. Messages middleware initializes a default_storage
   backend and assigns it to the &lt;code&gt;_messages&lt;/code&gt; attribute of request.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;add_message&lt;/code&gt; method of message &lt;span class="caps"&gt;API&lt;/span&gt; is called. It calls the add method in 
   BaseStorage, which changes &lt;code&gt;added_new&lt;/code&gt; attribute to &lt;code&gt;True&lt;/code&gt; and append the 
   message into the &lt;code&gt;_queued_messages&lt;/code&gt; list. &lt;/li&gt;
&lt;li&gt;If the view function does not call the template render function, the 
   &lt;code&gt;__iter__&lt;/code&gt; method of BaseStorage is not called.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;process_response&lt;/code&gt; method of middleware class calls &lt;code&gt;update&lt;/code&gt; method of 
   BaseStorage, which stores unread messages. Let&amp;#8217;s assume messages are saved 
   in a cookie (session works in a similar way). They are stored in client&amp;#8217;s 
   browser storage, not on the server. &lt;/li&gt;
&lt;li&gt;A new request comes in, Django does the same as step 1.&lt;/li&gt;
&lt;li&gt;The view function calls the template &lt;code&gt;render&lt;/code&gt; method, which calls the 
   &lt;code&gt;__iter__&lt;/code&gt; method of BaseStorage.  It changes &lt;code&gt;used&lt;/code&gt; attribute to &lt;code&gt;True&lt;/code&gt;. 
   The &lt;code&gt;_queued_messages&lt;/code&gt; is empty at this time, and it is not the 
   same object described in step 2. It then calls &lt;code&gt;_loaded_messages&lt;/code&gt; property 
   and calls &lt;code&gt;_get&lt;/code&gt; method to retrieve the stored message. All cookies from 
   this domain will be uploaded to the server. &lt;/li&gt;
&lt;li&gt;The &lt;code&gt;process_response&lt;/code&gt; method of middleware class calls &lt;code&gt;update&lt;/code&gt; method 
   of BaseStorage. In this case the &lt;code&gt;_queued_messages&lt;/code&gt; list is empty, and 
   nothing is stored. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The logic in the &lt;code&gt;update&lt;/code&gt; method of BaseStorage is smart. If two consecutive 
requests add two messages without displaying them, both messages will be 
stored. Here is the source code. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# update method of BaseStorage class&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Store all unread messages.&lt;/span&gt;

&lt;span class="sd"&gt;    If the backend has yet to be iterated, store previously stored messages&lt;/span&gt;
&lt;span class="sd"&gt;    again. Otherwise, only store messages added after the last iteration.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_prepare_messages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_queued_messages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;used&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_queued_messages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# normally empty&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;added_new&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_loaded_messages&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_queued_messages&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Cookies and Sessions&lt;/h3&gt;
&lt;p&gt;The discussion of the messages app has already became convoluted, and it will 
become even more complicated when we examine how cookies and sessions work. 
I will have a general dicussion on cookies and sessions and stop here.  It will 
be in another post to have a detailed discussion of those topics. Tango with 
Django book has 
&lt;a href="https://www.tangowithdjango.com/book17/chapters/cookie.html"&gt;a chapter on cookies and sessions&lt;/a&gt; 
which is very good. &lt;/p&gt;
&lt;p&gt;Internet cookies is &amp;#8220;a small piece of data sent from a web server and stored 
on the user&amp;#8217;s computer&amp;#8221;.  The 
&lt;a href="https://en.wikipedia.org/wiki/HTTP_cookie"&gt;wikipedia http cookie page&lt;/a&gt; 
provides a good overview of the topic. The cookie information is sent via the 
http header, which usually has a size limit. The session cookie 
contains a unique session id, and the infomation is saved in server database. 
Django web framework also comes with a sessions contrib app.  Here is the link 
to the 
&lt;a href="https://docs.djangoproject.com/en/2.2/topics/http/sessions/"&gt;official documentation&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;The SessionStorage class does not need to consider the size limit when saving 
messages, so the code is simpler than in CookieStorage class.  Here is the 
source code of session.py file. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# messages/storage/session.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.messages.storage.base&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseStorage&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.messages.storage.cookie&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;MessageDecoder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MessageEncoder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SessionStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseStorage&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Store messages in the session (that is, django.contrib.sessions).&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;session_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_messages&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;session&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The session-based temporary &amp;quot;&lt;/span&gt;\
            &lt;span class="s2"&gt;&amp;quot;message storage requires session middleware to be installed, &amp;quot;&lt;/span&gt;\
            &lt;span class="s2"&gt;&amp;quot;and come before the message middleware in the &amp;quot;&lt;/span&gt;\
            &lt;span class="s2"&gt;&amp;quot;MIDDLEWARE&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; list.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_CLASSES&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MIDDLEWARE&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Retrieve a list of messages from the request&amp;#39;s session. This storage&lt;/span&gt;
&lt;span class="sd"&gt;        always stores everything it is given, so return True for the&lt;/span&gt;
&lt;span class="sd"&gt;        all_retrieved flag.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deserialize_messages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session_key&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Store a list of messages to the request&amp;#39;s session.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session_key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serialize_messages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;serialize_messages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;encoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MessageEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;separators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deserialize_messages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MessageDecoder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;The messages app is easy to use in a Django app, but the implementation of 
the app is not simple.  Reading the source code helps us understand how the 
Django messages app works.   &lt;/p&gt;</content><category term="posts"></category><category term="django"></category></entry><entry><title>Django HttpRequest and HttpResponse</title><link href="https://www.georgexyz.com/django-httprequest-httpresponse.html" rel="alternate"></link><published>2019-07-11T23:45:00-04:00</published><updated>2019-07-11T23:45:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-07-11:/django-httprequest-httpresponse.html</id><summary type="html">&lt;p&gt;Django view &amp;#8220;is simply a Python function that takes a web request and 
returns a response.&amp;#8221; A typical view function loads template, retrieves 
some data from database, and returns a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Django view &amp;#8220;is simply a Python function that takes a web request and 
returns a response.&amp;#8221; A typical view function loads template, retrieves 
some data from database, and returns a response. Django 1.3 starts supporting 
class-based views, which makes writing views easier. The drawback is that 
the code is not as straightforward to understand as function-based view. &lt;/p&gt;
&lt;p&gt;Here is a typical Django view function from official Django tutorial. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;latest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-pub_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;polls/index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;latest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The request object passed to the view function is a WSGIRequest object, and 
WSGIRequest is a subclass of HttpRequest.  When web browser sends an http/https
request to the web server, Django web framework receives the infomation in 
the form of an environ object, and creates the request object.  Yes, Django 
creates this object and passes it to the view function.  This is a 
typical example of &lt;em&gt;inversion of control&lt;/em&gt;. A web app developer does not have
control over the flow of a program when using a web framework. &lt;/p&gt;
&lt;p&gt;The HttpRequest and HttpResponse classes are defined in the request.py and 
response.py files in http directory. The response.py file also defines 
several other classes such as Http404 and HttpResponseRedirect. &lt;/p&gt;
&lt;p&gt;The Django official documentation has 
&lt;a href="https://docs.djangoproject.com/en/2.2/ref/request-response/"&gt;a reference page&lt;/a&gt; 
for HttpRequest and HttpResponse. It is probably to easier to read the source 
code directly. Here is a list of files in the http directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;george@STK2M3:~/Desktop/django-2.2.2/django$ wc -l http/*.py
   26 http/cookie.py
   21 http/__init__.py
  688 http/multipartparser.py
  602 http/request.py
  559 http/response.py
 1896 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How do I find this information? The grep command below shows that HttpRequest 
only appears a few places in Django source code. The wsgi.py file defines the 
WSGIRequst class as a subclass of HttpRequest. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;george@STK2M3:~/Desktop/django-2.2.2/django$ grep -r &amp;quot;HttpRequest&amp;quot; ./
./template/context.py:    Create a suitable Context from a plain dict ...
./core/handlers/base.py:        &amp;quot;&amp;quot;&amp;quot;Return an HttpResponse object for  ...
./core/handlers/wsgi.py:from django.http import HttpRequest, QueryDict, parse_cookie
./core/handlers/wsgi.py:class WSGIRequest(HttpRequest):    ++++++ Notice ++++
./core/files/uploadhandler.py:        &amp;gt;&amp;gt;&amp;gt; from django.http import HttpRequest
./core/files/uploadhandler.py:        &amp;gt;&amp;gt;&amp;gt; request = HttpRequest()
./views/decorators/debug.py:from django.http import HttpRequest
......
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can then try to find where the WSGIRequest object is defined and passed along 
to other functions as an argument. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;george@STK2M3:~/Desktop/django-2.2.2/django$ grep -rn &amp;quot;WSGIRequest&amp;quot; ./core
./core/management/commands/runserver.py:57:   # way to reach WSGIRequestHandler....
./core/handlers/wsgi.py:66:class WSGIRequest(HttpRequest):
./core/handlers/wsgi.py:131:    request_class = WSGIRequest
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the file wsgi.py line 131, it assigns WSGIRequest class to &lt;code&gt;request_class&lt;/code&gt;. 
Let&amp;#8217;s try to find where &lt;code&gt;request_class&lt;/code&gt; is instantiated. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;george@STK2M3:~/Desktop/django-2.2.2/django$ grep -rn &amp;quot;request_class&amp;quot; ./core
./core/handlers/wsgi.py:131:    request_class = WSGIRequest
./core/handlers/wsgi.py:140:        request = self.request_class(environ)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Grep command can also see the lines before and after the target line.  The command 
below shows the context code. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;george@STK2M3:~/Desktop/django-2.2.2/django$ grep -rn -C 5 &amp;quot;request_class&amp;quot; ./core
....
./core/handlers/wsgi.py-130-class WSGIHandler(base.BaseHandler):
./core/handlers/wsgi.py:131:    request_class = WSGIRequest
./core/handlers/wsgi.py-132-
./core/handlers/wsgi.py-133-    def __init__(self, *args, **kwargs):
./core/handlers/wsgi.py-134-        super().__init__(*args, **kwargs)
./core/handlers/wsgi.py-135-        self.load_middleware()
./core/handlers/wsgi.py-136-
./core/handlers/wsgi.py-137-    def __call__(self, environ, start_response):
./core/handlers/wsgi.py-138-        set_script_prefix(get_script_name(environ))
./core/handlers/wsgi.py-139-        signals.request_started.send(sender=self.__class__, environ=environ)
./core/handlers/wsgi.py:140:        request = self.request_class(environ)
./core/handlers/wsgi.py-141-        response = self.get_response(request)
./core/handlers/wsgi.py-142-
./core/handlers/wsgi.py-143-        response._handler_class = self.__class__
./core/handlers/wsgi.py-144-
./core/handlers/wsgi.py-145-        status = &amp;#39;%d %s&amp;#39; % (response.status_code, response.reason_phrase)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The wsgi.py line 141 &lt;code&gt;response = self.get_response(request)&lt;/code&gt; is where 
the request is passed to the view function. It is also where the response created 
in the view function passed back to the Django. 
&lt;a href="https://www.georgexyz.com/django-WSGI.html"&gt;The &lt;span class="caps"&gt;WSGI&lt;/span&gt; discussion&lt;/a&gt; 
clearly shows that the &lt;code&gt;environ&lt;/code&gt; argument is the one passed on by the web 
server. &lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;The &lt;code&gt;get_response&lt;/code&gt; method is where nearly all of the activity happens.&amp;#8221; James 
Bennett&amp;#8217;s article 
&lt;a href="https://www.b-list.org/weblog/2006/jun/13/how-django-processes-request/"&gt;How Django processes a request&lt;/a&gt; 
has a very detailed discussion on the topic. &lt;/p&gt;
&lt;p&gt;If you want to find out what information is contained in the reqeust object, the 
view function below displays the contents. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;display_meta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# from django book&lt;/span&gt;
    &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;table&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/table&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# added by me&lt;/span&gt;
    &lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;Number of items in META : &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt; 
    &lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;request.path : &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt; 
    &lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;request.get_host() : &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_host&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt; 
    &lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;request.get_full_path() : &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_full_path&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt; 
    &lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;request.is_secure() : &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_secure&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt; 
    &lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;request.method : &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt; 
    &lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;request.encoding : &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt; 
    &lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;request.content_type : &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt; 
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# for debug only&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is the partial output from the &lt;code&gt;display_meta&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;......
XDG_SESSION_DESKTOP cinnamon
XDG_SESSION_ID  c2
XDG_SESSION_PATH    /org/freedesktop/DisplayManager/Session0
XDG_SESSION_TYPE    x11
XDG_VTNR    7
_   /home/george/.venv/django/bin/python
wsgi.errors &amp;lt;_io.TextIOWrapper name=&amp;#39;&amp;#39; mode=&amp;#39;w&amp;#39; encoding=&amp;#39;UTF-8&amp;#39;&amp;gt;
wsgi.file_wrapper   
wsgi.input  
wsgi.multiprocess   False
wsgi.multithread    True
wsgi.run_once   False
wsgi.url_scheme http
wsgi.version    (1, 0)

Number of items in META : 85
request.path : /info/
request.get_host() : 127.0.0.1:8000
request.get_full_path() : /info/
request.is_secure() : False
request.method : GET
request.encoding : None
request.content_type : text/plain
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="posts"></category><category term="django"></category></entry><entry><title>A Close Look at Django Template System</title><link href="https://www.georgexyz.com/django-templates.html" rel="alternate"></link><published>2019-07-02T13:40:00-04:00</published><updated>2019-07-02T13:40:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-07-02:/django-templates.html</id><summary type="html">&lt;p&gt;Django has a built-in template system. It is relatively easy to understand, and 
the source code is not as complicated as other parts of Django. This article is 
a summary …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Django has a built-in template system. It is relatively easy to understand, and 
the source code is not as complicated as other parts of Django. This article is 
a summary of the notes I took  when studying the system. &lt;/p&gt;
&lt;h3&gt;Official Documentation&lt;/h3&gt;
&lt;p&gt;The online Django documentation has 5 pages dedicated to template. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intro to template (&lt;a href="https://docs.djangoproject.com/en/2.2/topics/templates/"&gt;link&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Template language reference (&lt;a href="https://docs.djangoproject.com/en/2.2/ref/templates/language/"&gt;link&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;Built-in tags and filters (&lt;a href="https://docs.djangoproject.com/en/2.2/ref/templates/builtins/"&gt;link&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;How to use template system (&lt;a href="https://docs.djangoproject.com/en/2.2/ref/templates/api/"&gt;link&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Custom tags and filters (&lt;a href="https://docs.djangoproject.com/en/2.2/howto/custom-template-tags/"&gt;link&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A Django application developer probably does not need to know all of those details. 
But it is always a good thing for programmers to know how things work behind the scene. &lt;/p&gt;
&lt;h3&gt;Template Language Summary&lt;/h3&gt;
&lt;p&gt;Django Template Language (&lt;span class="caps"&gt;DTL&lt;/span&gt;) syntax mainly consists of three elements: variable, 
tag, and filter. Here are some examples:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;variable&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{{ variable }}
{{ tag.name }}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;tag&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{% expression %}
{% for startup in tag.startup_set.all %}
  ...
{% endfor %}

{% extends &amp;quot;base.html&amp;quot; %}
{% block title %}
  {{ block.super }} - Tag List
{% endblock title %}

{% if/else/endif %}
{% if not tag.startup_set all and not tag.blog_posts.all %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;filter&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{{ startup_date|date:&amp;quot;F jS, Y&amp;quot; }}  ▶ July 2nd, 2019
{{ startup.website|urlize }}
{{ startup.description|linebreaks }}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;other filters&lt;/em&gt;:  title, pluralize, truncatewords:20, default:&amp;#8221;base.html&amp;#8221;&lt;/p&gt;
&lt;h3&gt;How to Load Templates&lt;/h3&gt;
&lt;h4&gt;Method 1&lt;/h4&gt;
&lt;p&gt;The django.template.loader module defines &lt;code&gt;get_template&lt;/code&gt; and &lt;code&gt;select_template&lt;/code&gt; 
functions. Both functions can load template files and render them agaist a dict. 
The difference is that &lt;code&gt;get_template&lt;/code&gt; accepts a template name and 
&lt;code&gt;select_template&lt;/code&gt; accepts a list of template names. Here is an example from 
Django official tutorial. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;latest_question_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-pub_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;polls/index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;latest_question_list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;latest_question_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Method 2&lt;/h4&gt;
&lt;p&gt;The more common code is to use the &lt;code&gt;render&lt;/code&gt; function defined in django.shortcuts 
module in views.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;template_name.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;render&lt;/code&gt; function itself (Django2.2.2 source code) is very simple and short. 
It calls &lt;code&gt;render_to_string&lt;/code&gt; function in django.template.loader module, which in 
turn calls &lt;code&gt;get_template&lt;/code&gt; or &lt;code&gt;select_template&lt;/code&gt; depending on template_name. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# in django.shortcuts&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
           &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Return a HttpResponse whose content is filled with the result of calling&lt;/span&gt;
&lt;span class="sd"&gt;    django.template.loader.render_to_string() with the passed arguments.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                      &lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# in django.template.loader &lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Load a template and render it with a context. Return a string.&lt;/span&gt;
&lt;span class="sd"&gt;    template_name may be a string or a list of strings.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Method 3&lt;/h4&gt;
&lt;p&gt;The django.template module has two classes Template and Context. Those 
are template system&amp;#8217;s lower level APIs. Here is an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;from django.template import Template, Context
template = Template(&amp;#39;Hi, my name is {{ name }}.&amp;#39;)
context = Context({&amp;#39;name&amp;#39;: &amp;#39;Andrew&amp;#39;})
template.render(context)
#  result is &amp;#39;Hi, my name is Andrew.&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Template System Source Code&lt;/h3&gt;
&lt;p&gt;The source code for Django template system is in django/template directory, and 
consists of 26 python files. &lt;/p&gt;
&lt;p&gt;Bash command &lt;code&gt;wc&lt;/code&gt; outputs number of lines in a file. We know that total number 
of lines of Django template system code is 5,863 (Django 2.2.2). The output 
below also shows that two files &lt;code&gt;base.py&lt;/code&gt; and &lt;code&gt;defaulttags.py&lt;/code&gt; have over 1,000 
lines of code each. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;george@STK2M3:~/django-2.2.2/django/template$ wc -l *.py
  1044 base.py
    81 context_processors.py
   280 context.py
   907 defaultfilters.py
  1474 defaulttags.py
   180 engine.py
    42 exceptions.py
    68 __init__.py
   328 library.py
    66 loader.py
   317 loader_tags.py
   145 response.py
   208 smartif.py
   107 utils.py
  5247 total
george@STK2M3:~/django-2.2.2/django/template$ wc -l loaders/*.py
  14 loaders/app_directories.py
  49 loaders/base.py
  95 loaders/cached.py
  46 loaders/filesystem.py
   0 loaders/__init__.py
  27 loaders/locmem.py
 231 total
george@STK2M3:~/django-2.2.2/django/template$ wc -l backends/*.py
   81 backends/base.py
  129 backends/django.py
   53 backends/dummy.py
    0 backends/__init__.py
  108 backends/jinja2.py
   14 backends/utils.py
  385 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="posts"></category><category term="django"></category></entry><entry><title>Setup Linux Mint on a New Computer</title><link href="https://www.georgexyz.com/linux-mint.html" rel="alternate"></link><published>2019-06-26T12:32:00-04:00</published><updated>2019-06-26T12:32:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-06-26:/linux-mint.html</id><summary type="html">&lt;p&gt;I have been using Xubuntu since version 17.10. This week I read some articles on 
Linux Mint and I decided to give it a try. It is not a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been using Xubuntu since version 17.10. This week I read some articles on 
Linux Mint and I decided to give it a try. It is not a big change because Linux 
Mint is an ubuntu based distro. &lt;/p&gt;
&lt;p&gt;Linux Mint has a very nice user interface built on 
Cinnamon desktop system. It definitely looks better than Xubuntu which is known 
for its lightweight Xfce desktop environment. &lt;/p&gt;
&lt;p&gt;Omg!ubuntu website has an article about 
&lt;a href="https://www.omgubuntu.co.uk/2019/06/linux-mint-19-wine-4-available"&gt;Wine 4.0 in Linux Mint 19&lt;/a&gt;. 
Linux developers backported Wine 4.0 to the Linux Mint repositories.  It becomes 
very easy for users to install Wine 4. Here is the single command to install: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$sudo apt install --install-recommends wine-installer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I find two issues when setting up Linux Mint. The first one is that when I run 
&lt;code&gt;sudo apt upgrade&lt;/code&gt; command after installation, the system reports an error like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Fetched 902 kB in 3s (247 kB/s)
Preconfiguring packages ...
dpkg: dependency problems prevent processing triggers for gconf2:
 gconf2 depends on dbus-x11; however:
  Package dbus-x11 is not configured yet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A Google search finds 
&lt;a href="https://forums.linuxmint.com/viewtopic.php?t=276119"&gt;a solution&lt;/a&gt; 
posted on Linxu Mint forum.  Running 
two commands below solves the issue. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$sudo dpkg --configure -a
$sudo apt-get install -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The man pages of dpkg and apt-get have the following paragraphs about those two 
commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dpkg
   --configure package...|-a|--pending
    Configure  a  package  which  has  been  unpacked  but  not  yet
    configured.  If -a or --pending is given instead of package, all
    unpacked but unconfigured packages are configured.

    To  reconfigure a package which has already been configured, try
    the dpkg-reconfigure(8) command instead.

    Configuring consists of the following steps:

    1. Unpack the conffiles, and at the same time back  up  the  old
    conffiles, so that they can be restored if something goes wrong.

    2. Run postinst script, if provided by the package.

apt-get
  -f, --fix-broken
    Fix; attempt to correct a system with broken dependencies in place.
    This option, when used with install/remove, can omit any packages
    to permit APT to deduce a likely solution. If packages are
    specified, these have to completely correct the problem. The option
    is sometimes necessary when running APT for the first time; APT
    itself does not allow broken package dependencies to exist on a
    system. It is possible that a system&amp;#39;s dependency structure can be
    so corrupt as to require manual intervention (which usually means
    using dpkg --remove to eliminate some of the offending packages).
    Use of this option together with -m may produce an error in some
    situations. Configuration Item: APT::Get::Fix-Broken.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The other issue I encountered is that the system does not respond 
to logitech wireless mouse and keyboard after going into suspend (sleep). &lt;/p&gt;
&lt;div style="max-width:800px"&gt;
  &lt;img class="img-fluid pb-3" src="/images/logitech-k375s-m585.jpg" alt="keyboard mouse"&gt; 
&lt;/div&gt;

&lt;p&gt;&lt;a href="https://askubuntu.com/questions/848698/wake-up-from-suspend-using-wireless-usb-keyboard-or-mouse-for-any-linux-distro"&gt;An article&lt;/a&gt; 
on askubuntu.com provides a working solution.  Here are the commands to make it 
work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;george@STK2M3:~$ grep . /sys/bus/usb/devices/*/product
/sys/bus/usb/devices/1-3/product:USB Receiver     # PORT !!!
/sys/bus/usb/devices/1-5/product:USB2.0 Hub
/sys/bus/usb/devices/2-3.1/product:Flash Drive
/sys/bus/usb/devices/2-3/product:USB3.0 Hub
/sys/bus/usb/devices/usb1/product:xHCI Host Controller
/sys/bus/usb/devices/usb2/product:xHCI Host Controller

george@STK2M3:~$ grep . /sys/bus/usb/devices/*/power/wakeup
/sys/bus/usb/devices/1-3/power/wakeup:disabled    # DEFAULT DISABLED  !!!
/sys/bus/usb/devices/1-5/power/wakeup:disabled
/sys/bus/usb/devices/1-7/power/wakeup:disabled
/sys/bus/usb/devices/2-3/power/wakeup:disabled
/sys/bus/usb/devices/usb1/power/wakeup:disabled
/sys/bus/usb/devices/usb2/power/wakeup:disabled

george@STK2M3:~$ lsusb
Bus 002 Device 003: ID 090c:1000 Silicon Motion, Inc. 
Bus 002 Device 002: ID 2109:0813 VIA Labs, Inc. 
Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
Bus 001 Device 004: ID 8087:0a2b Intel Corp. 
Bus 001 Device 003: ID 2109:2813 VIA Labs, Inc. 
Bus 001 Device 002: ID 046d:c52b Logitech, Inc. Unifying Receiver  # DEVICE !!!
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub

george@STK2M3:~$ sudo vim /etc/udev/rules.d/10-wakeup.rules 
[sudo] password for george: 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the contents below to the 10-wakeup.rules file.  The idVendor and idProduct 
values are from the &lt;code&gt;lsusb&lt;/code&gt; command, and the path &lt;code&gt;/sys/bus/...&lt;/code&gt; is from the first 
grep command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ACTION==&amp;quot;add&amp;quot;, SUBSYSTEM==&amp;quot;usb&amp;quot;, ATTRS{idVendor}==&amp;quot;046d&amp;quot;, ATTRS{idProduct}==&amp;quot;c52b&amp;quot; 
RUN+=&amp;quot;/bin/sh -c &amp;#39;echo enabled &amp;gt; /sys/bus/usb/devices/1-3/power/wakeup&amp;#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After the above steps, the logitech mouse and keyboard wake up the Linxu Mint just fine. 
I never got the sleep/wakeup function working properly in Xubuntu system. So, this is 
a large improvement for me. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update: 9/4/2020&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Linux Mint 20 has been released for a few months now.  I install a copy 
in my desktop and it is awesome.  Here is 
&lt;a href="http://ubuntuhandbook.org/index.php/2020/07/onstall-wine-5-12-ubuntu-20-04-linux-mint-20/"&gt;a link to install Wine 5 in Linux Mint 20&lt;/a&gt;. 
I follow the steps and it works well. &lt;/p&gt;</content><category term="posts"></category><category term="linux"></category><category term="linux mint"></category></entry><entry><title>Good Python Learning Resources</title><link href="https://www.georgexyz.com/python-resources.html" rel="alternate"></link><published>2019-06-10T09:58:00-04:00</published><updated>2019-06-10T09:58:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-06-10:/python-resources.html</id><summary type="html">&lt;p&gt;This post describes some good python resources that I found useful. Python has many 
resources, sometimes it becomes difficult for people to figure out which are good 
and which are …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post describes some good python resources that I found useful. Python has many 
resources, sometimes it becomes difficult for people to figure out which are good 
and which are not. &lt;/p&gt;
&lt;div style="max-width:800px"&gt;
  &lt;img class="img-fluid pb-3" src="/images/python-books.jpg" alt="python-books"&gt; 
&lt;/div&gt;

&lt;h4&gt;Automate The Boring Stuff with Python&lt;/h4&gt;
&lt;p&gt;I am a big fan of Al Sweigart&amp;#8217;s book. He is very kind to provide the &lt;a href="https://automatetheboringstuff.com/"&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt; version 
of the book&lt;/a&gt; online for free. I bought the hard 
copy and Udemy class, but the online version is very handy when I want to look 
something up quickly. &lt;/p&gt;
&lt;p&gt;A presentation on youtube titled &lt;a href="https://youtu.be/AfBqVVKg4GE"&gt;Recursion for Beginners: A Beginner&amp;#8217;s Guide to 
Recursion&lt;/a&gt; by Al Sweigart is also worth watching.&lt;/p&gt;
&lt;h4&gt;Google&amp;#8217;s Python Class&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://developers.google.com/edu/python/"&gt;Google has a free class&lt;/a&gt; 
for people who want to learn Python.  The class was created by Nick Parlante and 
was originally given to new Google employees.  The contents of the class are quite 
good. It also comes with well-designed exercises for each lecture. &lt;/p&gt;
&lt;h4&gt;Think Python&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Think Python&lt;/em&gt; is a nice short introductory book by Allen B. Downey, and it only has 
268 pages. Each chapter of the book has many nice exercises. The book is an easy read 
if you take programming courses before. The book is also freely available online. Here is
&lt;a href="http://greenteapress.com/thinkpython2/html/index.html"&gt;the link&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;A Byte of Python (&lt;span class="caps"&gt;OOP&lt;/span&gt; Chapter)&lt;/h4&gt;
&lt;p&gt;Most introductory Python materials do not discuss python classes.  Classes and 
Object Oriented Programming (&lt;span class="caps"&gt;OOP&lt;/span&gt;) concepts are everywhere for any serious Python 
work. I found the 
&lt;a href="https://python.swaroopch.com/oop.html"&gt;&lt;span class="caps"&gt;OOP&lt;/span&gt; chapter&lt;/a&gt; 
of a free online book &lt;em&gt;A Byte of Python&lt;/em&gt; by Swaroop C H is a good introduction to the topic. &lt;/p&gt;
&lt;h4&gt;Online References&lt;/h4&gt;
&lt;p&gt;This &lt;a href="https://github.com/justmarkham/python-reference"&gt;Python Reference&lt;/a&gt; 
github page by Kevin Markham is a very nice summary of Python language features.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://treyhunner.com/2019/05/python-builtins-worth-learning/"&gt;This online article by Trey Hunner&lt;/a&gt; 
examines all 69 python 3 built-in functions/callables. It is an excellent 
summary of python 
built-ins. Python 2 actually have a few more built-in callables.&lt;/p&gt;
&lt;h4&gt;Transforming Code into Beautiful, Idiomatic Python&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://youtu.be/OSGv2VnC0go"&gt;This presentation&lt;/a&gt; 
 by Raymond Hettinger is excellent.  Someone has prepared the 
 notes and posted them on github.  Here is the link to 
 &lt;a href="https://github.com/JeffPaine/beautiful_idiomatic_python"&gt;the github notes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I read the notes a few times and found that many examples apply to my existing python code. 
If I get a chance to revise those code, I will make sure they follow those recommendations.&lt;/p&gt;
&lt;h4&gt;Fluent Python&lt;/h4&gt;
&lt;p&gt;I am currently reading Luciano Ramalho&amp;#8217;s &lt;em&gt;Fluent Python&lt;/em&gt; book.  I am half way through the 
book and it is good.  The book covers many contents that I probably will never use, but it is 
always good to know more than we need. &lt;/p&gt;
&lt;h4&gt;Podcasts&lt;/h4&gt;
&lt;p&gt;I regularly listen to &lt;em&gt;Talk Python To Me&lt;/em&gt; and &lt;em&gt;Python Bytes&lt;/em&gt; podcasts.  They keep me in 
the loop of a larger Python community. &lt;/p&gt;</content><category term="posts"></category><category term="python"></category></entry><entry><title>Python Descriptor and Django Model Field</title><link href="https://www.georgexyz.com/python-descriptor-django-model.html" rel="alternate"></link><published>2019-05-12T17:48:00-04:00</published><updated>2019-05-12T17:48:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-05-12:/python-descriptor-django-model.html</id><summary type="html">&lt;p&gt;Django model fields are descriptors. The descriptor is a Python intermediate feature. 
It is almost impossible to understand FileField and ImageField source code 
without knowing Python descriptor.  Marty Alchin&amp;#8217;s …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Django model fields are descriptors. The descriptor is a Python intermediate feature. 
It is almost impossible to understand FileField and ImageField source code 
without knowing Python descriptor.  Marty Alchin&amp;#8217;s book &lt;em&gt;Pro Django&lt;/em&gt; has 
a short section on descriptors (Page 31 to 33), but it lacks detail. &lt;/p&gt;
&lt;h3&gt;Descriptor Online Articles&lt;/h3&gt;
&lt;p&gt;After some google search, I found several articles on Python descriptors. 
The first article is Michael Driscoll&amp;#8217;s 
&lt;a href="https://www.blog.pythonlibrary.org/2016/06/10/python-201-what-are-descriptors/"&gt;Python 201: What are descriptors?&lt;/a&gt;, 
which is a good introduction. The webpage has a link 
to Ned Batchelder&amp;#8217;s blog site. I heard Ned Batchelder on 
&lt;a href="https://talkpython.fm/"&gt;Talk Python To Me Podcase&lt;/a&gt; and read his excellent 
&lt;a href="https://nedbatchelder.com/text/unipain.html"&gt;article on Unicode&lt;/a&gt; before. His blog post 
on descriptor is actually recommending a lightning talk and an article by Chris 
Beaumont. &lt;/p&gt;
&lt;p&gt;Chris Beaumont&amp;#8217;s article 
&lt;a href="https://nbviewer.jupyter.org/urls/gist.github.com/ChrisBeaumont/5758381/raw/descriptor_writeup.ipynb"&gt;Python Descriptors Demystified&lt;/a&gt; 
is possibly the best writing on descriptors.  Many descriptor techniques 
discussed in the article are directly used in Django Model source code. Here are the main points 
of the article:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Descriptors are reusable properties&lt;/li&gt;
&lt;li&gt;Put descriptors at class level&lt;/li&gt;
&lt;li&gt;Keep instance level data instance specific&lt;/li&gt;
&lt;li&gt;Label your descriptor&lt;/li&gt;
&lt;li&gt;Label descriptors with Metaclasses&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The article itself is not very long, but the content takes time to understand. The article 
also beriefly discussed property. A short online article 
&lt;a href="https://www.machinelearningplus.com/python/python-property/"&gt;Property Explained – How to Use and When&lt;/a&gt; 
has nice Python property examples. The article also mentions meta classes.  Real 
Python website has 
&lt;a href="https://realpython.com/python-metaclasses/"&gt;a nice introductory article on meta classes&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Python official documentation has an article 
&lt;a href="https://docs.python.org/3/howto/descriptor.html"&gt;Descriptor HowTo Guide&lt;/a&gt; 
by Raymond Hettinger. This article is not easy and it takes time to digest. &lt;/p&gt;
&lt;p&gt;Here is the 
&lt;a href="https://github.com/georgexyz19/PythonDescriptor"&gt;link to my Github repo&lt;/a&gt; 
which consists of code examples in those articles. &lt;/p&gt;
&lt;h3&gt;Django Model Code&lt;/h3&gt;
&lt;p&gt;This section is trying to answer the question &amp;#8220;how does a class variable &amp;#8216;name&amp;#8217; 
become an instance variable&amp;#8221;? The Django source code and line number reference below are from Django 
&lt;a href="https://github.com/django/django/tree/2.1"&gt;version 2.1&lt;/a&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The two lines of code below are from base.py ModelBase class (L138-139), which is
a metaclass for Model.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;new_class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_to_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The attrs is the fourth argument to the &lt;code&gt;__new__&lt;/code&gt; method in metaclass ModelBase. 
The obj_name refers to &amp;#8216;name&amp;#8217; and obj refers to &lt;code&gt;models.CharField(max_length=255)&lt;/code&gt; 
where name is a field in Book model class. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;add_to_class&lt;/code&gt; method is defined on L301.  The method checks if the 
value being added has &lt;code&gt;contribute_to_class&lt;/code&gt; method, and if it does it will call 
this method. Otherwise, the method calls &lt;code&gt;setattr&lt;/code&gt; to set (name, value) pair 
as class attribute.  The &lt;code&gt;getattr&lt;/code&gt; and &lt;code&gt;setattr&lt;/code&gt; are python built-in functions. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_to_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# We should call the contribute_to_class method only if it&amp;#39;s bound&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;contribute_to_class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contribute_to_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# call this if Book has a field price = 50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;contribute_to_class&lt;/code&gt; method is defined in &lt;code&gt;db/models/fields/__init__.py&lt;/code&gt; L727. 
It is a method in Field class. 
This is where the actual magic happens.  The self, cls, and name in &lt;code&gt;contribute_to_class&lt;/code&gt; 
are &lt;code&gt;models.CharField(max_length=255)&lt;/code&gt;, &lt;code&gt;Book&lt;/code&gt;, and &lt;code&gt;name&lt;/code&gt;, respectively. &lt;/p&gt;
&lt;p&gt;The first thing &lt;code&gt;contribute_to_class&lt;/code&gt; does is it takes the value assigned to the 
class variable and stores it in class attribute _meta, which is an Options object. &lt;/p&gt;
&lt;p&gt;The second thing it does is to assign an instance of a DeferredAttribute class 
to this field.  The class is a Descriptor in python. The construction of 
&lt;code&gt;DeferredAttribute&lt;/code&gt; has an argument &lt;code&gt;self.attname&lt;/code&gt;, which has the same name of 
the field.  It can be shown that for descriptor fields the &lt;code&gt;getattr(cls, self.attname, None)&lt;/code&gt; 
function returns None.  The comments indicate that this line is intended for the class method. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;contribute_to_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;private_only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Register the field with the model class it belongs to.&lt;/span&gt;
&lt;span class="sd"&gt;    If private_only is True, create a separate instance of this field&lt;/span&gt;
&lt;span class="sd"&gt;    for every subclass of cls, even if cls is not an abstract model.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_attributes_from_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;private_only&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_meta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;private&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_meta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Don&amp;#39;t override classmethods with the descriptor. This means that&lt;/span&gt;
        &lt;span class="c1"&gt;# if you have a classmethod and a field with the same name, then&lt;/span&gt;
        &lt;span class="c1"&gt;# such fields can&amp;#39;t be deferred (we don&amp;#39;t have a check for this).&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;   &lt;span class="c1"&gt;# attname is name&lt;/span&gt;
            &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DeferredAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attname&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;get_&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;_display&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;partialmethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_FIELD_display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;DeferredAttribute&lt;/code&gt; descriptor class is defined in db.models.query_utils.py 
file L116.  The code for the class is not long, and they are shown below. 
The instance and cls in &lt;code&gt;__get__&lt;/code&gt; method will be a book instance and cls will 
be Book class. The code in &lt;code&gt;__get__&lt;/code&gt; method shows the subtle differences 
between &lt;code&gt;__dict__&lt;/code&gt; attribute and &lt;code&gt;getattr&lt;/code&gt; (search tree). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DeferredAttribute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    A wrapper for a deferred-loading field. When the value is read from this&lt;/span&gt;
&lt;span class="sd"&gt;    object the first time, the query is executed.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field_name&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__get__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Retrieve and caches the value from the datastore on the first lookup.&lt;/span&gt;
&lt;span class="sd"&gt;        Return the cached value.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# Let&amp;#39;s see if the field is part of the parent chain. If so we&lt;/span&gt;
            &lt;span class="c1"&gt;# might be able to reuse the already loaded value. Refs #18343.&lt;/span&gt;
            &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_check_parent_chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh_from_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_check_parent_chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Check if the field value can be fetched from a parent field already&lt;/span&gt;
&lt;span class="sd"&gt;        loaded in the instance. This can be done if the to-be fetched&lt;/span&gt;
&lt;span class="sd"&gt;        field is a primary key field.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_meta&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;link_field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_ancestor_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primary_key&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;link_field&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link_field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;DeferredAttribute&lt;/code&gt; class does not define a &lt;code&gt;__set__&lt;/code&gt; method as descriptors 
in other articles.  In such a case, the &lt;code&gt;b.name&lt;/code&gt; in a statement &lt;code&gt;b.name = 'Python Tricks&lt;/code&gt; 
refers to instance attribute, which overrides the &lt;code&gt;Book.name&lt;/code&gt; class level attribute. 
The second answer in 
&lt;a href="https://stackoverflow.com/questions/48537906/how-do-keyword-arguments-interact-with-model-django?rq=1"&gt;this stack overflow post&lt;/a&gt; 
discusses this particular issue.  It takes me sometime to understand how it works. &lt;/p&gt;</content><category term="posts"></category><category term="python"></category><category term="django"></category></entry><entry><title>What is WSGI?</title><link href="https://www.georgexyz.com/django-WSGI.html" rel="alternate"></link><published>2019-05-04T12:27:00-04:00</published><updated>2019-05-04T12:27:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-05-04:/django-WSGI.html</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;WSGI&lt;/span&gt; is an abbreviation for Web Server Gateway Interface, which is a &amp;#8220;simple calling 
convention for web servers to forward requests to web applications for frameworks written
in Python.&amp;#8221;   &lt;span class="caps"&gt;WSGI …&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;span class="caps"&gt;WSGI&lt;/span&gt; is an abbreviation for Web Server Gateway Interface, which is a &amp;#8220;simple calling 
convention for web servers to forward requests to web applications for frameworks written
in Python.&amp;#8221;   &lt;span class="caps"&gt;WSGI&lt;/span&gt; is part of Python ecosystem.  It was originally specified in &lt;span class="caps"&gt;PEP&lt;/span&gt;-333
in 2003, and was updated to &lt;span class="caps"&gt;PEP&lt;/span&gt;-3333 for python 3 in 2010.   Python standard library even 
has a wsgiref package (&lt;span class="caps"&gt;WSGI&lt;/span&gt; reference server) built in. &lt;/p&gt;
&lt;p&gt;Why do we need to know &lt;span class="caps"&gt;WSGI&lt;/span&gt;? A Django web app is essentially an &lt;span class="caps"&gt;WSGI&lt;/span&gt; app. A
web framework like Django adds many other functions such as database handling and 
template processing to generate html files. It helps a developer understand 
how web framework works behind the scene. &lt;/p&gt;
&lt;p&gt;The best writing on &lt;span class="caps"&gt;WSGI&lt;/span&gt; is probably 
&lt;a href="http://lucumr.pocoo.org/2007/5/21/getting-started-with-wsgi/"&gt;a blog post&lt;/a&gt; 
by Armin Ronacher, who is the creator of Flask web framework and many other open 
source Python packages.   Three code examples in this article are fantastic 
prototypes showing how &lt;span class="caps"&gt;WSGI&lt;/span&gt; and web framework work. &lt;/p&gt;
&lt;p&gt;I would suggest anyone who is interested to read the article multiple times to get a good understanding 
of the topic.  The article was written in 2007 with Python 2.  A developer needs to
make small changes to the code for Python 3.  Here is the 
&lt;a href="https://github.com/georgexyz19/WSGI_example_code"&gt;link to github repo&lt;/a&gt; 
which contains code I modified for Python 3.&lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;Full Stack Python website has 
&lt;a href="https://www.fullstackpython.com/wsgi-servers.html"&gt;an &lt;span class="caps"&gt;WSGI&lt;/span&gt; article&lt;/a&gt; 
which includes links to many other articles. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.appdynamics.com/blog/engineering/an-introduction-to-python-wsgi-servers-part-1/"&gt;An online article&lt;/a&gt; 
by Kevin Goldberg dicusses several &lt;span class="caps"&gt;WSGI&lt;/span&gt; web servers. &lt;/p&gt;</content><category term="posts"></category><category term="django"></category><category term="WSGI"></category></entry><entry><title>Django Unleashed Book Model Diagram</title><link href="https://www.georgexyz.com/django-unleashed-model.html" rel="alternate"></link><published>2019-04-23T07:47:00-04:00</published><updated>2019-04-29T13:37:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-04-23:/django-unleashed-model.html</id><summary type="html">&lt;p&gt;Andrew Pinkham&amp;#8217;s 
&lt;a href="https://www.amazon.com/gp/product/0321985079/ref=ppx_od_dt_b_asin_title_s00?ie=UTF8&amp;amp;psc=1"&gt;&lt;em&gt;Django Unleashed&lt;/em&gt;&lt;/a&gt;
 is a very good Django book. It covers many aspects of Django Web Framework with an example project. It 
is not a book for complete …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Andrew Pinkham&amp;#8217;s 
&lt;a href="https://www.amazon.com/gp/product/0321985079/ref=ppx_od_dt_b_asin_title_s00?ie=UTF8&amp;amp;psc=1"&gt;&lt;em&gt;Django Unleashed&lt;/em&gt;&lt;/a&gt;
 is a very good Django book. It covers many aspects of Django Web Framework with an example project. It 
is not a book for complete beginners. A reader needs to know a little Python and Django basics to get started.&lt;/p&gt;
&lt;p&gt;The Chapter 3 of the book is about Django Models, discussing the example project models. 
The project has 4 models, 3 many-to-many relations, and 1 many-to-one relation. The book does not 
include a diagram showing the models and relations. Here is the diagram I draw in Inkscape:&lt;/p&gt;
&lt;div style="max-width:800px"&gt;
  &lt;img class="img-fluid" src="/images/django-unleashed-models.svg" alt="django unleashed models"&gt; 
&lt;/div&gt;

&lt;p&gt;Here is the link to the &lt;a href="/files/django-unleashed-models.pdf"&gt;&lt;span class="caps"&gt;PDF&lt;/span&gt; page&lt;/a&gt; of the diagram.&lt;/p&gt;
&lt;p&gt;The 
&lt;a href="https://django-extensions.readthedocs.io/"&gt;django-extensions&lt;/a&gt; has a 
&lt;a href="https://django-extensions.readthedocs.io/en/latest/graph_models.html"&gt;graph_models command&lt;/a&gt; which 
generates similar model diagrams. &lt;/p&gt;
&lt;p&gt;Add the GRAPH_MODELS dictionary to the project settings file. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;GRAPH_MODELS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;all_applications&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="s1"&gt;&amp;#39;group_models&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The extension command depends on the graphviz package and pydot/pyparsing modules.  Install those 
dependencies in Ubuntu 18.04 and run the &lt;code&gt;python manage.py ...&lt;/code&gt; command to generate diagram.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$sudo apt-get install graphviz
(env)$pip install pyparsing pydot

(env)$python manage.py graph_models blog organizer --pydot -o models.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is the result &lt;span class="caps"&gt;PNG&lt;/span&gt; file. &lt;/p&gt;
&lt;div style="max-width:800px"&gt;
  &lt;img class="img-fluid" src="/images/django-unleashed-models.png" alt="django unleashed models"&gt; 
&lt;/div&gt;</content><category term="posts"></category><category term="django"></category></entry><entry><title>Create Static Website With Pelican And Bootstrap</title><link href="https://www.georgexyz.com/pelican-boostrap-website.html" rel="alternate"></link><published>2019-04-14T19:34:00-04:00</published><updated>2019-04-14T19:34:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-04-14:/pelican-boostrap-website.html</id><summary type="html">&lt;p&gt;This website is created with Pelican and Bootstrap, both of which are open-source
software.  When I am learning Django web framework, I want to create a blog site to 
write …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This website is created with Pelican and Bootstrap, both of which are open-source
software.  When I am learning Django web framework, I want to create a blog site to 
write down some notes. A blog site with 50-500 articles does not need full scale 
Django back-end. My original plan is to write some python scripts calling Django Template 
system and python Markdown package.  Then I find Pelican which includes
Jinja2 Template system, Markdown, and many other functions.  It does what 
I want to do and much more. &lt;/p&gt;
&lt;h3&gt;Pelican&lt;/h3&gt;
&lt;p&gt;Pelican is a static website generator written in Python. When a web server is running Django or Flask 
framework, the server creates an html page and sends it back to client 
as the response to a request. If a developer chooses a static site generator like 
Pelican, html pages are created during development.  When a web request comes
to a server, the serve fetches pre-generated static html page and sends it back. 
The response cycle is simpler and faster.  The drawback is that the website is static. 
It does not receive or collect input from a user. &lt;/p&gt;
&lt;p&gt;This &lt;a href="https://www.fullstackpython.com/blog/generating-static-websites-pelican-jinja2-markdown.html"&gt;full stack python article&lt;/a&gt; 
is an excellent tutorial on Pelican. 
&lt;a href="https://docs.getpelican.com/en/stable/"&gt;The Pelican documentation&lt;/a&gt; 
site is a good reference. The fast way to learn Pelican is to look at code of 
two included themes &amp;#8220;simple&amp;#8221; and &amp;#8220;notmyidea&amp;#8221;.  To get started, you can 
write a few blog posts in markdown format and utilize the built-in theme 
&amp;#8220;simple&amp;#8221; to generate a site. The markdown guide website has 
&lt;a href="https://www.markdownguide.org/basic-syntax/"&gt;a nice summary of basic syntax&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;The figure below roughly describes how pelican works. Pelican reads markdown files and 
theme files into memory and produces html pages.  The theme files work as templates for html output. 
Some theme files correspond to multiple outputs, while others only relate to 
one output file. &lt;/p&gt;
&lt;div style="max-width:800px"&gt;
  &lt;img class="img-fluid" src="/images/pelican-bootstrap/img-pelican-work.svg" alt="How Pelican Work"&gt; 
&lt;/div&gt;

&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican/tree/4.0.1/pelican"&gt;The Pelican source code&lt;/a&gt;
consists of 14 python files (version 4.0.1).  The source files has 5,670 lines of 
code. It is a good median size code base to study if you are looking for python 
project to work on. I have not read all pelican source code yet. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# bash command to tally pelican source code lines
find . -maxdepth 1 -name &amp;#39;*.py&amp;#39; -exec wc -l &amp;#39;{}&amp;#39; +
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Bootstrap 4&lt;/h3&gt;
&lt;p&gt;There is an excellent 
&lt;a href="https://github.com/getpelican/pelican-themes/tree/master/pelican-bootstrap3"&gt;&lt;em&gt;pelican-bootstrap3&lt;/em&gt;&lt;/a&gt; 
theme in the pelican-themes repo.  The original author of the theme did a nice work
of including lots of bootstrap features into the theme. &lt;/p&gt;
&lt;p&gt;Bootstrap 4 has been released for a while, so I decide to use Bootstrap 4 and create a theme 
for this website. Whenever I am not sure about a certain pelican theme feature, 
I check the code of the &amp;#8220;pelican-bootstrap3&amp;#8221; and start from there. &lt;/p&gt;
&lt;p&gt;Another nice pelican theme is 
&lt;a href="https://github.com/pR0Ps/pelican-subtle"&gt;&lt;em&gt;pelican-subtle&lt;/em&gt;&lt;/a&gt;. 
The Markdown code style on this website is copied from pelican-subtle. I also read the 
code of this theme to get a better understanding on how pelican and pelican theme work. &lt;/p&gt;
&lt;p&gt;I changed the Bootstrap 4 default colors on the 
&lt;a href="https://bootstrap.build/"&gt;bootstrap.build webiste&lt;/a&gt;. Another website has a 
&lt;a href="https://hackerthemes.com/kit/"&gt;Bootstrap theme kit&lt;/a&gt; if you want to customize 
Bootstrap locally.&lt;/p&gt;
&lt;p&gt;The theme of this website has the following color variables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// _variables.scss &lt;/span&gt;
&lt;span class="nv"&gt;$blue&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#990000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$green&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#720027&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$cyan&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ce4257&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$yellow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ff9b54&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$pink&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#4f000b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$font-size-base&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$h4-font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$font-size-base&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$h5-font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$font-size-base&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="mf"&gt;.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$h3-font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$font-size-base&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$h2-font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$font-size-base&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="mf"&gt;.6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$h1-font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$font-size-base&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="mf"&gt;.8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$h6-font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$font-size-base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$paragraph-margin-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$print-page-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The pelican-theme github repo collects many themes.  However, it seems to me that
few of them are of professional quality. The possible reason is that most 
themes are produced by hobbyists during spare time. &lt;/p&gt;
&lt;p&gt;The three images on the homepage are downloaded from 
&lt;a href="https://www.pexels.com/"&gt;pexels.com&lt;/a&gt;, 
which is a very nice website for free photos. The icons on the Projects page are from 
&lt;a href="https://pixabay.com/"&gt;pixabay.com&lt;/a&gt;, and are modified with &lt;span class="caps"&gt;GIMP&lt;/span&gt;. The favicon is 
generated and downloaded from &lt;a href="https://favicon.io/"&gt;favicon.io website&lt;/a&gt;. Some 
vector graphics are downloaded from &lt;a href="https://openclipart.org/"&gt;openclipart.org&lt;/a&gt;. &lt;/p&gt;
&lt;h3&gt;Invoke Package&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://docs.pyinvoke.org/en/1.2/getting-started.html"&gt;Invoke package&lt;/a&gt;
&amp;#8220;is a Python task execution tool and library&amp;#8221;. It is similar to &lt;span class="caps"&gt;GNU&lt;/span&gt; 
Make program, but the script tasks.py is written in Python.  The tasks.py 
file is an equivalent of Makefile for &lt;span class="caps"&gt;GNU&lt;/span&gt; Make. &lt;/p&gt;
&lt;p&gt;I usually install Invoke package along with pelican and Markdown packages in a
python virtual environment. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt; &lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;Markdown&lt;/span&gt; &lt;span class="n"&gt;invoke&lt;/span&gt; &lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;import2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;pelican-quickstart&lt;/code&gt; command will create a tasks.py file in the project directory. 
One nice feature of Invoke is that you can run multiple tasks in one command. The 
command below cleans the &lt;code&gt;output&lt;/code&gt; directory, rebuilds the project, and serves the 
website at &lt;code&gt;http://localhost:8000&lt;/code&gt; address. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke clean build serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Website Source Code&lt;/h3&gt;
&lt;p&gt;This website is hosted in Github Pages, which is a free service for static sites. 
Source code of this website including markdown files and bootstrap 4 theme files 
are available in this 
&lt;a href="https://github.com/georgexyz19/georgexyz.com"&gt;github repository&lt;/a&gt;. 
The gh-pages branch of the same repository contains generated html files of the website. 
I followed 
&lt;a href="https://docs.getpelican.com/en/stable/tips.html#publishing-to-github"&gt;this pelican documentation page&lt;/a&gt;
and utilized ghp-import python package to streamline the publication process. &lt;/p&gt;
&lt;p&gt;I use the following commands to update posts and github repo. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;source venv.sh  # load virtual env
invoke clean build
git status
git add -A
git commit -m &amp;quot;commit message&amp;quot;
git push origin master # update source code

ghp-import output -b gh-pages
git push origin gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://gist.github.com/jedmao/5053440"&gt;This github page&lt;/a&gt; 
has a nice summary of common github commands. &lt;/p&gt;
&lt;h3&gt;Future Blog Plan&lt;/h3&gt;
&lt;p&gt;My future plan for the blog is to write about one post per month.  That comes 
to about 12 posts per year.  My goal is to write at least 6 posts per year 
even I am busy at work.  Another goal is to keep the blog running for at 
least 10 years, so we will see if the site has 60 posts in the year 2029. &lt;/p&gt;
&lt;p&gt;This site does not track who is reading or visiting. It does not have 
Google Analytics or similar services to track users. &lt;/p&gt;</content><category term="posts"></category><category term="pelican"></category><category term="bootstrap"></category></entry><entry><title>Python Code To Generate Full Size Yearly Calendar in Inkscape</title><link href="https://www.georgexyz.com/python-calendar-app.html" rel="alternate"></link><published>2019-04-12T14:06:00-04:00</published><updated>2019-04-12T14:06:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-04-12:/python-calendar-app.html</id><summary type="html">&lt;p&gt;At-A-Glance DayMinder Monthly Planner 7&amp;#8221; x 8-3/4&amp;#8221; Version had been my calendar 
for a few years.  Then I found the excellent &lt;span class="caps"&gt;PDF&lt;/span&gt; software 
&lt;a href="https://www.georgexyz.com/pdfxchange-viewer.html"&gt;PDFXChange-Viewer&lt;/a&gt; 
and I started downloading monthly …&lt;/p&gt;</summary><content type="html">&lt;p&gt;At-A-Glance DayMinder Monthly Planner 7&amp;#8221; x 8-3/4&amp;#8221; Version had been my calendar 
for a few years.  Then I found the excellent &lt;span class="caps"&gt;PDF&lt;/span&gt; software 
&lt;a href="https://www.georgexyz.com/pdfxchange-viewer.html"&gt;PDFXChange-Viewer&lt;/a&gt; 
and I started downloading monthly &lt;span class="caps"&gt;PDF&lt;/span&gt; calendars from 
&lt;a href="https://www.timeanddate.com/calendar/create.html"&gt;timeanddate.com&lt;/a&gt;. 
Each file was for one year, it had 13 pages.  The first page was a yearly 
calendar and other 12 pages were monthly calendars.  I marked events on the &lt;span class="caps"&gt;PDF&lt;/span&gt; 
directly with 10 point &amp;#8220;Narrow Arial&amp;#8221; fonts. This continued for 
a few years. &lt;/p&gt;
&lt;p&gt;After I became familiar with Inkscape extension and Python programming, I 
wrote a python program which generates full size (36&amp;#8221; x 24&amp;#8221;) one page yearly calendar
in Inkscape. I save both &lt;span class="caps"&gt;SVG&lt;/span&gt; and &lt;span class="caps"&gt;PDF&lt;/span&gt; files. &lt;/p&gt;
&lt;p&gt;Now the one page &lt;span class="caps"&gt;PDF&lt;/span&gt; file is my daily calendar, and I mark events on the &lt;span class="caps"&gt;PDF&lt;/span&gt;. 
My event descriptions are usually very short like &amp;#8220;9am meeting with Don&amp;#8221;, 
&amp;#8220;10:45 See Dr Jeff&amp;#8221;, and &amp;#8220;off work vacation in &lt;span class="caps"&gt;FL&lt;/span&gt;&amp;#8221; &lt;/p&gt;
&lt;p&gt;Here is what the yearly calendar looks like. &lt;/p&gt;
&lt;div style="max-width:800px"&gt;
  &lt;img class="img-fluid" src="/images/img-calendar-2019.svg" alt="calendar example"&gt; 
&lt;/div&gt;

&lt;p&gt;Here are the links for calendars from 2019 to 2025.  I will add more links to this page 
in year 2025.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2019: &lt;a href="/files/calendar/2019.svg"&gt;svg&lt;/a&gt; &lt;a href="/files/calendar/2019.pdf"&gt;pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2020: &lt;a href="/files/calendar/2020.svg"&gt;svg&lt;/a&gt; &lt;a href="/files/calendar/2020.pdf"&gt;pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2021: &lt;a href="/files/calendar/2021.svg"&gt;svg&lt;/a&gt; &lt;a href="/files/calendar/2021.pdf"&gt;pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2022: &lt;a href="/files/calendar/2022.svg"&gt;svg&lt;/a&gt; &lt;a href="/files/calendar/2022.pdf"&gt;pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2023: &lt;a href="/files/calendar/2023.svg"&gt;svg&lt;/a&gt; &lt;a href="/files/calendar/2023.pdf"&gt;pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2024: &lt;a href="/files/calendar/2024.svg"&gt;svg&lt;/a&gt; &lt;a href="/files/calendar/2024.pdf"&gt;pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2025: &lt;a href="/files/calendar/2025.svg"&gt;svg&lt;/a&gt; &lt;a href="/files/calendar/2025.pdf"&gt;pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are the code in create_calendar.inx and create_calendar.py files. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;inkscape-extension&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.inkscape.org/namespace/inkscape/extension&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;_name&amp;gt;&lt;/span&gt;Create Calendar&lt;span class="nt"&gt;&amp;lt;/_name&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;create_calendar.com.gotrafficsign&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dependency&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;executable&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;location=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;extensions&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;inkex.py&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dependency&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;executable&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;location=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;extensions&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;simplestyle.py&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;yearNumber&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;int&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;min=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2100&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;gui-text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;For Year: &amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2019&lt;span class="nt"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;effect&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;object-type&amp;gt;&lt;/span&gt;all&lt;span class="nt"&gt;&amp;lt;/object-type&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;effects-menu&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;submenu&lt;/span&gt; &lt;span class="na"&gt;_name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;OpenCalendar&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/submenu&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/effects-menu&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/effect&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;command&lt;/span&gt; &lt;span class="na"&gt;reldir=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;extensions&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;interpreter=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;create_calendar.py&lt;span class="nt"&gt;&amp;lt;/command&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/inkscape-extension&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#! /usr/bin/python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;# create_calendar.py&lt;/span&gt;
&lt;span class="sd"&gt;Create post size calendar file in Inkscape&lt;/span&gt;

&lt;span class="sd"&gt;Copyright (C) December 08 2018 George Zhang&lt;/span&gt;

&lt;span class="sd"&gt;This program is free software; you can redistribute it and/or modify&lt;/span&gt;
&lt;span class="sd"&gt;it under the terms of the GNU General Public License as published by&lt;/span&gt;
&lt;span class="sd"&gt;the Free Software Foundation; either version 2 of the License, or&lt;/span&gt;
&lt;span class="sd"&gt;(at your option) any later version.&lt;/span&gt;

&lt;span class="sd"&gt;This program is distributed in the hope that it will be useful,&lt;/span&gt;
&lt;span class="sd"&gt;but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;/span&gt;
&lt;span class="sd"&gt;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&lt;/span&gt;
&lt;span class="sd"&gt;GNU General Public License for more details.&lt;/span&gt;

&lt;span class="sd"&gt;You should have received a copy of the GNU General Public License&lt;/span&gt;
&lt;span class="sd"&gt;along with this program; if not, write to the Free Software&lt;/span&gt;
&lt;span class="sd"&gt;Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;inkex&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;simplestyle&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;simpletransform&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;copy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;calendar&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateCalendar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Effect&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Effect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OptionParser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;--yearNumber&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;store&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;int&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yearN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;logging.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;effect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;PAGE_W&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;
        &lt;span class="n"&gt;PAGE_H&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;

        &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PAGE_W&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PAGE_H&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;change_SVG_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yearN&lt;/span&gt;
        &lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
        &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;

        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
            &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="c1"&gt;# python 2 only&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
            &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw_month&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change_SVG_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ratio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;25.4&lt;/span&gt;
        &lt;span class="n"&gt;svg_elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getroot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;page_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;
        &lt;span class="n"&gt;page_height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;

        &lt;span class="n"&gt;svg_elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;in&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;svg_elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;height&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;in&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;svg_elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;viewBox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0 0 &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ratio&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;
                     &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ratio&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw_SVG_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;style is a dict&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;line_attribs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;style&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;simplestyle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;formatStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;inkscape&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;M &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; L&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                        &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="n"&gt;elm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;svg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line_attribs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;elm&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw_lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;line_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;stroke&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#000000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="s1"&gt;&amp;#39;stroke-width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unittouu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
                      &lt;span class="s1"&gt;&amp;#39;fill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;x1_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;in&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;y1_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0.25in&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;y2_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;in&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unittouu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x1_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x1_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2_str&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw_SVG_line&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;line&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;x1_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0.25in&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;x2_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;in&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;y1_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;in&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unittouu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x1_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1_str&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw_SVG_line&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;line&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw_grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;width and height, in in inches, same for x and y&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;line_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;stroke&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#000000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="s1"&gt;&amp;#39;stroke-width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unittouu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
                      &lt;span class="s1"&gt;&amp;#39;fill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_col&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;x1_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;num_col&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;in&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;x2_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x1_str&lt;/span&gt;
            &lt;span class="n"&gt;y1_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;in&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;y2_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;in&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unittouu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x1_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2_str&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw_SVG_line&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;line&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_row&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;x1_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;in&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;x2_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;in&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;y1_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;num_row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;in&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;y2_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y1_str&lt;/span&gt;
            &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unittouu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x1_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2_str&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2_str&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw_SVG_line&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line_style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;line&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw_month&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;height and width in inches int&lt;/span&gt;
&lt;span class="sd"&gt;        x and y in inches from top left corner&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="c1"&gt;# num_col = 7&lt;/span&gt;
        &lt;span class="c1"&gt;# num_row = 5&lt;/span&gt;
        &lt;span class="n"&gt;cal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calendar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Calendar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# set Sunday as first day&lt;/span&gt;

        &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;
        &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;

        &lt;span class="c1"&gt;# assert num_row in (4, 5, 6), &amp;quot;num of row should be 4 5 or 6&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# width_col = float(width) / num_col&lt;/span&gt;
        &lt;span class="c1"&gt;# height_row = float(height) / num_row&lt;/span&gt;

        &lt;span class="n"&gt;x_month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;y_month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
        &lt;span class="n"&gt;ratio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;25.4&lt;/span&gt;
        &lt;span class="n"&gt;x_month_R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_month_R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_month&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ratio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_month&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ratio&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;y_month_R&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;9.15&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="c1"&gt;# 7 from observation&lt;/span&gt;
        &lt;span class="n"&gt;text_layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_create_layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getroot&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;text_layer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw_month_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_month_R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_month_R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;text_layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;x_dayofweek&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;7.0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;y_dayofweek&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;1.35&lt;/span&gt;
        &lt;span class="n"&gt;x_dayofweek_R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_dayofweek_R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_dayofweek&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ratio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;y_dayofweek&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ratio&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw_weekday_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_dayofweek_R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_dayofweek_R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;text_layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;x_dayofweek_R&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;7.0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ratio&lt;/span&gt;

        &lt;span class="n"&gt;bk_layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_create_layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getroot&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bk_layer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;num_col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
        &lt;span class="n"&gt;num_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monthdayscalendar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw_grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bk_layer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;cal_matrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monthdayscalendar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_row&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_col&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;day_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cal_matrix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;day_num&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text_layer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;num_col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;day_num&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;place day number in a monthly grid&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span class="n"&gt;x_loc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;num_col&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="n"&gt;y_loc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;num_row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="c1"&gt;# top left corner&lt;/span&gt;

        &lt;span class="n"&gt;ratio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;25.4&lt;/span&gt;

        &lt;span class="n"&gt;x_loc_R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x_loc&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ratio&lt;/span&gt;
        &lt;span class="n"&gt;y_loc_R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y_loc&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ratio&lt;/span&gt;

        &lt;span class="n"&gt;y_loc_R&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;6.097&lt;/span&gt;  &lt;span class="c1"&gt;# vertical adjustement, vertical align baseline&lt;/span&gt;

        &lt;span class="n"&gt;x_loc_R&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;y_loc_R&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="c1"&gt;# second adjustment&lt;/span&gt;

        &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_loc_R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_loc_R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;style_d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;font-size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;6.34px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 18 pt&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;font-family&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Roboto&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="c1"&gt;#   &amp;#39;text-align&amp;#39;: &amp;#39;center&amp;#39;,&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;text-anchor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;start&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;fill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#000000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;stroke&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;space&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;preserve&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;style&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;simplestyle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;formatStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;style_d&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;sp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tspan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;role&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sodipodi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;line&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw_month_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;month_name_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;January&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;February&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;March&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;April&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;May&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;June&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;July&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;August&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;September&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;October&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;November&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;December&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;style_d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;font-size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;12.69px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 24 pt&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;font-family&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Roboto&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="c1"&gt;#&amp;#39;text-align&amp;#39;: &amp;#39;center&amp;#39;,&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;text-anchor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;middle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;fill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#000000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;stroke&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;space&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;preserve&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;style&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;simplestyle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;formatStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;style_d&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;sp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tspan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;role&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sodipodi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;line&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;month_name_str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw_weekday_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dayofweek&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;dayofweek_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Sunday&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Monday&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Tuesday&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Wednesday&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;Thursday&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Friday&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Saturday&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;style_d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;font-size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;8.46px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 24 pt&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;font-family&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Roboto&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="c1"&gt;#&amp;#39;text-align&amp;#39;: &amp;#39;center&amp;#39;,&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;text-anchor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;middle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;fill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#000000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;stroke&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;space&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;preserve&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;style&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;simplestyle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;formatStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;style_d&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;sp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tspan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;role&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sodipodi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;line&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dayofweek_str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dayofweek&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_create_layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layer_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# this should not be svg:g&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;//g[@inkscape:label=&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot;]&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;layer_name&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|//svg:g[@inkscape:label=&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot;]&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;layer_name&lt;/span&gt;
        &lt;span class="n"&gt;el_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespaces&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NSS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# inkex.debug(el_list)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;el_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;el_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="c1"&gt;#inkex.debug(&amp;#39;this code never execute, why?&amp;#39;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;inkscape&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;layer_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;groupmode&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;inkscape&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;layer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;group_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inkex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;inkscape&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;group_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fill&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CreateCalendar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;affect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="posts"></category><category term="python"></category><category term="inkscape"></category></entry><entry><title>Install Multiple Python Versions In Ubuntu With Pyenv</title><link href="https://www.georgexyz.com/pyenv-python-tool.html" rel="alternate"></link><published>2019-04-11T10:53:00-04:00</published><updated>2019-04-11T10:53:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-04-11:/pyenv-python-tool.html</id><summary type="html">&lt;p&gt;The python default installation in Ubuntu is a stripped down version. It does not 
include pip or venv. The pyenv tool allows programmers to install multiple
versions of python in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The python default installation in Ubuntu is a stripped down version. It does not 
include pip or venv. The pyenv tool allows programmers to install multiple
versions of python in Ubuntu system. &lt;/p&gt;
&lt;p&gt;This recent 
&lt;a href="https://realpython.com/intro-to-pyenv/"&gt;realpython article&lt;/a&gt; 
includes everything from pyenv installation to pyenv configuration. &lt;/p&gt;
&lt;p&gt;The only thing to note is that a user needs to install some dependencies
in Ubuntu before running pyenv.  If you omit this step, python
building process will fail without warnings or errors.  This could 
become very frustrating. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt-get install -y make build-essential libssl-dev zlib1g-dev \
libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev \
libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I usually change the global python to a more recent version with &lt;code&gt;pyenv global&lt;/code&gt; 
command and simply use &lt;code&gt;venv&lt;/code&gt; to manage virtual environment. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv global 3.7.3
python -m venv ~/.venv/pelican
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here are a list of some other common commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv install --list |grep &amp;quot; 3\.[78]&amp;quot;
pyenv install -v 3.7.7
pyenv uninstall 3.7.7
ls ~/.pyenv/versions
pyenv versions
pyenv global 2.7.15 # or system
pyenv local 3.7.7
cat ~/.pyenv/version
pyenv virtualenv ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Update on 10/1/2020&lt;/strong&gt; Pyenv needs an update if you do not use it to 
install new Python versions for some time. Otherwise the new Python 
versions do not show up on the list. The commands to update pyenv 
are on the Github readme page. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cd $(pyenv root)
git fetch
git tag
git checkout v1.2.20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="posts"></category><category term="python"></category><category term="ubuntu"></category></entry><entry><title>Setup Inkscape in Windows and Ubuntu</title><link href="https://www.georgexyz.com/inkscape-setup.html" rel="alternate"></link><published>2019-04-07T20:23:00-04:00</published><updated>2019-04-07T20:23:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-04-07:/inkscape-setup.html</id><summary type="html">&lt;p&gt;Inkscape software is easy to install in both Windows and Ubuntu.  However it is 
a little difficult for beginners to figure out how to customize the software. 
This article discusses …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Inkscape software is easy to install in both Windows and Ubuntu.  However it is 
a little difficult for beginners to figure out how to customize the software. 
This article discusses the steps to customize Inkscape in both Windows and Ubuntu. &lt;/p&gt;
&lt;h3&gt;Windows Setup&lt;/h3&gt;
&lt;p&gt;Inkscape official website has a portable version.  You can download a 
7-zip file from this official
&lt;a href="https://inkscape.org/release/0.92.4/windows/64-bit/"&gt;download page&lt;/a&gt;. 
Click the third download button under text &amp;#8220;Binary archive in 7zip 
format (64bit)&amp;#8221; to down a .7z file. A free utility software 7-zip 
is able to extract .7z file into a directory. The 7-zip software also has 
a portable version if you do not want to install it. &lt;/p&gt;
&lt;p&gt;After the file is extracted into this directory, double clicking 
&lt;code&gt;inkscape.exe&lt;/code&gt; starts Inkscape. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;C:\Users\Username\Documents\inkscape0.92.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Inkscape User Extension Directory&lt;/h4&gt;
&lt;p&gt;In Inkscape, click menu item &lt;code&gt;Edit &amp;gt; Preferences&lt;/code&gt; to open preference 
dialog (Ctrl + Shift + p). Choose &lt;code&gt;System&lt;/code&gt; on the left, and the right side 
shows system paths for variables.  The default value 
for &lt;code&gt;User extensions&lt;/code&gt; is,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;C:\Users\Username\AppData\Roaming\inkscape\extensions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Open this location in File Explorer and copy and paste extension files 
(.py and .inx) into the directory. The extension program will show up 
under &lt;code&gt;Extensions&lt;/code&gt; top level menu next time Inkscape is started. Or you
can change the location to a different directory. &lt;/p&gt;
&lt;h4&gt;Fonts&lt;/h4&gt;
&lt;p&gt;There are two ways to customize fonts in Inkscape. 
The first one is to drop font files into &lt;code&gt;C:\Windows\Fonts&lt;/code&gt; directory. 
The fonts become accessible to all Windows programs.  You can find 
and download .ttf font files online (such as popular &lt;code&gt;Roboto&lt;/code&gt; fonts).&lt;/p&gt;
&lt;p&gt;The second way is to create a new &lt;code&gt;fonts&lt;/code&gt; directory at the location 
where &lt;code&gt;inkscape.exe&lt;/code&gt; is stored, and copy files into
this directory. Open file &lt;code&gt;\etc\fonts\conf.d\50-user.conf&lt;/code&gt; and add 
a line &lt;code&gt;&amp;lt;dir&amp;gt;./fonts&amp;lt;/dir&amp;gt;&lt;/code&gt; before the last line. Check the new fonts 
on &lt;code&gt;Text and Font&lt;/code&gt; dialog in Inkscape. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;... 
&amp;lt;dir&amp;gt;./fonts&amp;lt;/dir&amp;gt;
&amp;lt;/fontconfig&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Install Dependencies for Plugin WriteTex&lt;/h4&gt;
&lt;p&gt;WriteTex is a nice Inkscape extension for adding LaTeX equations onto
a drawing.  Other options are available, but WriteTex is simple and 
reliable. &lt;/p&gt;
&lt;p&gt;This extension requires LaTeX system and pdf2svg program installed. 
WriteTex calls LaTeX system to generate a &lt;span class="caps"&gt;PDF&lt;/span&gt; file, and calls 
pdf2svg to convert &lt;span class="caps"&gt;PDF&lt;/span&gt; to an &lt;span class="caps"&gt;SVG&lt;/span&gt; file. Then it loads 
the &lt;span class="caps"&gt;SVG&lt;/span&gt; onto Inkscape drawing. &lt;/p&gt;
&lt;p&gt;The WriteTex plugin files &lt;code&gt;writetex.inx&lt;/code&gt; and &lt;code&gt;writetex.py&lt;/code&gt; are 
available on 
&lt;a href="https://github.com/wanglongqi/WriteTeX"&gt;this github page&lt;/a&gt;.  Download
those two files and drop them into &lt;code&gt;User extension&lt;/code&gt; directory. &lt;/p&gt;
&lt;p&gt;You can download a texlive &lt;span class="caps"&gt;ISO&lt;/span&gt; file from 
&lt;a href="https://www.tug.org/texlive/acquire-iso.html"&gt;this web page&lt;/a&gt;. 
Use 7-zip to extract the &lt;span class="caps"&gt;ISO&lt;/span&gt; file into a directory.  Double click
&lt;code&gt;install-tl-advanced.bat&lt;/code&gt; to run advanced installation.
You may choose portable version and install LaTeX system into 
a directory. &lt;/p&gt;
&lt;p&gt;Program pdf2svg can be downloaded from 
&lt;a href="https://github.com/wanglongqi/WriteTeX/releases/download/v1.1/pdf2svg-x64.7z"&gt;this github address&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Suppose texlive and pdf2svg-x64 directories are stored in this location, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;C:\Users\Username\Downloads\WriteTex-dep
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Two directories containing files &lt;code&gt;xelatex.exe&lt;/code&gt; and &lt;code&gt;pdf2svg.exe&lt;/code&gt; should be 
added to the system path. In Windows 10 File Explorer, right click &lt;code&gt;This PC&lt;/code&gt; and 
choose &lt;code&gt;Properties&lt;/code&gt;.  Choose &lt;code&gt;Advanced system settings&lt;/code&gt; and click &lt;code&gt;Advanced&lt;/code&gt;
tab on the dialog.  Click &lt;code&gt;Environment Variables&lt;/code&gt; button and &lt;code&gt;Path&lt;/code&gt; variable. 
Then click &lt;code&gt;Edit&lt;/code&gt; and add two directories to the list. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;C:\Users\Username\Downloads\WriteTex-dep\pdf2svg-x64
C:\Users\Username\Downloads\WriteTex-dep\texlive\bin\win32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The purpose of above steps is for WriteTex python extension to find 
&lt;code&gt;xelatex.exe&lt;/code&gt; and &lt;code&gt;pdf2svg.exe&lt;/code&gt; programs. &lt;/p&gt;
&lt;h4&gt;How to Enter Equations with Plugin WriteTex&lt;/h4&gt;
&lt;p&gt;Enter equations between &amp;#92;[ and &amp;#92;] in LaTeX Source box and click &lt;code&gt;Apply&lt;/code&gt;. 
Some LaTeX symbols like &lt;code&gt;\dfrac&lt;/code&gt; need AmsTeX.  Add the line below to 
&lt;code&gt;Preamble File&lt;/code&gt; box and toggle box &lt;code&gt;Trade above as contents&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;\usepackage{amsmath, amsthm, amssymb, amsfonts} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div style="max-width:400px"&gt;
  &lt;img class="img-fluid" src="/images/writetex-interface.png" alt="WriteTex Interface"&gt; 
&lt;/div&gt;

&lt;p&gt;The third tab &lt;code&gt;View Original TeX&lt;/code&gt; on the dialog enables you to view texts 
of equations.  Choose an equation in Inskscape and click &lt;code&gt;Apply&lt;/code&gt; button.
A dialog will pop up showing equation input. &lt;/p&gt;
&lt;h3&gt;Ubuntu Setup&lt;/h3&gt;
&lt;p&gt;In Ubuntu 18.04, bash command &lt;code&gt;sudo apt install inkscape&lt;/code&gt; installs Inkscape. 
If you want the latest stable version,
&lt;a href="https://code.launchpad.net/~inkscape.dev/+archive/ubuntu/stable"&gt;this web page&lt;/a&gt; 
provides more information. You add a ppa repository first and then 
type the same bash command to install. &lt;/p&gt;
&lt;p&gt;To add fonts in Ubuntu, you create a .fonts subdirectory in the home directory
and drop font files into it.  The fonts will become available in Inkscape. &lt;/p&gt;
&lt;h4&gt;WriteTex in Ubuntu&lt;/h4&gt;
&lt;p&gt;The steps to add Inkscape extension in Ubuntu 18.04 are the same 
as in Windows.  However it is easier to install dependencies for WriteTex. 
The two commands below install the texlive and pdf2svg programs. 
The programs are automatically added to the system path. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt-get install texlive
sudo apt-get install pdf2svg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The texlive installation does not include xelatex.  You change &lt;code&gt;xelatex&lt;/code&gt;
to &lt;code&gt;pdflatex&lt;/code&gt; on the WriteTex dialog to make it work. &lt;/p&gt;
&lt;h3&gt;Other Comments&lt;/h3&gt;
&lt;p&gt;It seems that the Windows Inkscape is more stable than the Ubuntu version. 
I have several svg files that crash Inkscape in Ubuntu but work fine 
in Windows version.&lt;/p&gt;
&lt;p&gt;One time I was really frustrated by constant Inkscape crashes in Ubuntu.
I checked the &lt;span class="caps"&gt;SVG&lt;/span&gt; file line by line and found that one drawing element
had wrong &lt;span class="caps"&gt;XML&lt;/span&gt; format. It somehow slipped into the drawing file. 
Once the element was removed, the &lt;span class="caps"&gt;SVG&lt;/span&gt; file worked
fine. The lesson learned was that when an &lt;span class="caps"&gt;SVG&lt;/span&gt; file contains corrupted
&lt;span class="caps"&gt;XML&lt;/span&gt; code, Inkscape may crash without giving error messages. &lt;/p&gt;</content><category term="posts"></category><category term="inkscape"></category><category term="ubuntu"></category></entry><entry><title>Highway Geometric Design - Horizontal and Vertical Alignment Equations</title><link href="https://www.georgexyz.com/geometric-design-equations.html" rel="alternate"></link><published>2019-04-07T14:49:00-04:00</published><updated>2019-04-07T14:49:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-04-07:/geometric-design-equations.html</id><summary type="html">&lt;p&gt;Horizontal and vertical curves are important concepts in a highway design class. 
However, many textbooks do not explain how to derive  equations.  When I 
was preparing for Professional Engineering (&lt;span class="caps"&gt;PE …&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Horizontal and vertical curves are important concepts in a highway design class. 
However, many textbooks do not explain how to derive  equations.  When I 
was preparing for Professional Engineering (&lt;span class="caps"&gt;PE&lt;/span&gt;) exam a few years ago, I spent
some time figuring out how to derive those equations.  I will publish the 
work on this web page.  College students and engineers preparing for &lt;span class="caps"&gt;PE&lt;/span&gt; exam may 
find them useful. &lt;/p&gt;
&lt;p&gt;A simple horizontal curve is an arc (part of a circle).  The curve looks
like this, &lt;/p&gt;
&lt;div style="max-width:800px"&gt;
  &lt;img class="img-fluid" src="/images/geometric-design/img-horizontal-curve.svg" alt="simple horizontal curve"&gt; 
&lt;/div&gt;

&lt;p&gt;Equations are shown on this &lt;span class="caps"&gt;PDF&lt;/span&gt; page: &lt;/p&gt;
&lt;p&gt;&lt;a class="btn btn-primary" href="/files/geometric-design/horizontal-curve-letter.pdf" role="button"&gt;Horizontal Curve &lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;If you understand how to derive horizontal curve equation, the Horizontal Sightline Offset (&lt;span class="caps"&gt;HSO&lt;/span&gt;)
equation on page 3-115 of 7th edition of 
&lt;a href="https://store.transportation.org/Item/PublicationDetail?ID=4127"&gt;Green Book&lt;/a&gt; 
is very similar. &lt;/p&gt;
&lt;p&gt;&lt;a class="btn btn-primary" href="/files/geometric-design/HSO-equation.pdf" role="button"&gt;&lt;span class="caps"&gt;HSO&lt;/span&gt; Equation &lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A vertical curve is a parabola which is more complicated than an arc.&lt;br&gt;
The curve looks like this:&lt;/p&gt;
&lt;div style="max-width:800px"&gt;
  &lt;img class="img-fluid" src="/images/geometric-design/img-vertical-curve.svg" alt="simple vertical curve"&gt; 
&lt;/div&gt;

&lt;p&gt;The equation derivation is on this &lt;span class="caps"&gt;PDF&lt;/span&gt;: &lt;/p&gt;
&lt;p&gt;&lt;a class="btn btn-primary" href="/files/geometric-design/vertical-curve-letter.pdf" role="button"&gt;Vertical Curve &lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;It can be proved that X = 1/2 * L on the below figure. &lt;/p&gt;
&lt;div style="max-width:800px"&gt;
  &lt;img class="img-fluid" src="/images/geometric-design/img-vertical-curve-prove.svg" alt="vertical curve prove"&gt; 
&lt;/div&gt;

&lt;p&gt;The proof is on this &lt;span class="caps"&gt;PDF&lt;/span&gt; page: &lt;/p&gt;
&lt;p&gt;&lt;a class="btn btn-primary" href="/files/geometric-design/vertical-curve-prove.pdf" role="button"&gt;Vertical Curve Prove &lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The &lt;span class="caps"&gt;PDF&lt;/span&gt; page below shows how to derive a minimum crest vertical curve  equation on Page 3-166 of 7th edition of Green Book.&lt;/p&gt;
&lt;p&gt;&lt;a class="btn btn-primary" href="/files/geometric-design/min-crest-vertical-curve.pdf" role="button"&gt;Min Crest Vertical Length &lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="posts"></category><category term="traffic engineering"></category></entry><entry><title>Python Standard Library Module Logging</title><link href="https://www.georgexyz.com/python-logging.html" rel="alternate"></link><published>2019-04-04T20:57:00-04:00</published><updated>2019-04-05T09:44:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-04-04:/python-logging.html</id><summary type="html">&lt;p&gt;Python has a standard library module logging which is a very useful development 
tool.  When a development environment does not have access to command line 
interface such as writing an …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python has a standard library module logging which is a very useful development 
tool.  When a development environment does not have access to command line 
interface such as writing an extension for Inkscape, a programmer cannot call &lt;code&gt;print&lt;/code&gt; 
function to output intermediate program variables.  Instead, you use logging module
to monitor program flow. &lt;/p&gt;
&lt;p&gt;The default logger is named root.  You only need three lines of code to output
some information to a log file.  Predefined logging levels are debug, info, 
warning, error, and critical.  By default, root logger only outputs messages
with a severity level of warning and above. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;logging.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This is a debug message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Logging module defines many classes.  Commonly used classes are Logger,
LogRecord, Handler, and Formatter.  Logger class is not instantiated directly. 
The first time call to module level function  &lt;code&gt;logging.getLogger(name)&lt;/code&gt; returns
a Logger object.  Subsequent calls to the function return a reference to the same 
Logger object. A typical example looks like this, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;file.log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# StreamHandler&lt;/span&gt;
&lt;span class="n"&gt;f_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Formatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f_format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This is an error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you need a more versatile logging system, you create a config file or a 
dictionary and then load it using &lt;code&gt;fileConfig&lt;/code&gt; or &lt;code&gt;dictConfig&lt;/code&gt; methods. &lt;/p&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;p&gt;An article 
&lt;a href="https://realpython.com/python-logging/"&gt;Logging in Python&lt;/a&gt; 
in realpython.com site is a very nice introduction to the topic. &lt;/p&gt;
&lt;p&gt;Here is a link to the official 
&lt;a href="https://docs.python.org/3/howto/logging.html"&gt;Python logging module document&lt;/a&gt;. &lt;/p&gt;</content><category term="posts"></category><category term="python"></category></entry><entry><title>PDF Reader Software PDFXchange Viewer</title><link href="https://www.georgexyz.com/pdfxchange-viewer.html" rel="alternate"></link><published>2019-04-04T09:24:00-04:00</published><updated>2019-04-04T09:24:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-04-04:/pdfxchange-viewer.html</id><summary type="html">&lt;p&gt;Most office workers more or less deal with &lt;span class="caps"&gt;PDF&lt;/span&gt; files.  PDFXchange Viewer has been 
my favorite &lt;span class="caps"&gt;PDF&lt;/span&gt; reader for several years.  It is so good that I switched my 
calendar …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Most office workers more or less deal with &lt;span class="caps"&gt;PDF&lt;/span&gt; files.  PDFXchange Viewer has been 
my favorite &lt;span class="caps"&gt;PDF&lt;/span&gt; reader for several years.  It is so good that I switched my 
calendar from paper copy to electronic &lt;span class="caps"&gt;PDF&lt;/span&gt; file. This is the type of software that
I wish I could write as a developer. &lt;/p&gt;
&lt;p&gt;The software was produced by a Canadian company 
&lt;a href="https://www.tracker-software.com/product/pdf-xchange-viewer"&gt;Tracker Software&lt;/a&gt;,
and it has a free portable version which includes lots of useful features.  Here 
is a quote from the website,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="caps"&gt;PDF&lt;/span&gt;-XChange Viewer &amp;#8216;Free Version&amp;#8217; is free for private and commercial use,
provided it is not bundled with other software for financial gain. The
Viewer as well contains extra features and functions that are unlocked when
you purchase a license for &lt;span class="caps"&gt;PDF&lt;/span&gt;-XChange Viewer &lt;span class="caps"&gt;PRO&lt;/span&gt;. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It has a portable &lt;span class="caps"&gt;ZIP&lt;/span&gt; version which a user can extract files into any
local directory.  The size of extracted files is about &lt;span class="caps"&gt;15MB&lt;/span&gt;. I only copy four files 
&lt;code&gt;PDFXCview.exe&lt;/code&gt;, &lt;code&gt;resource.dat&lt;/code&gt;, &lt;code&gt;Portable.dat&lt;/code&gt;, and &lt;code&gt;Settings.dat&lt;/code&gt; to new directories
and it seems to work without problem.&lt;/p&gt;
&lt;p&gt;The free version contains many feathers.  I mostly use two functions: line drawing 
and typewriter.  I map the key &lt;code&gt;l&lt;/code&gt; to line drawing and key &lt;code&gt;w&lt;/code&gt; for typewriter. 
I also map key &lt;code&gt;-&lt;/code&gt; to zoom out and &lt;code&gt;=&lt;/code&gt; to zoom in, which is the same as in
&lt;a href="/pages/inkscape-tutorial.html"&gt;Inkscape&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;So, the advantages of PDFXchange View are, &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It is free but of really high quality;&lt;/li&gt;
&lt;li&gt;Easy to customize; and&lt;/li&gt;
&lt;li&gt;Small and portable. &lt;/li&gt;
&lt;/ol&gt;
&lt;div style="max-width:800px"&gt;
  &lt;img class="img-fluid" src="/images/pdf-xchange-viewer-calendar.png" alt="save emails"&gt; 
&lt;/div&gt;</content><category term="posts"></category><category term="software utility"></category></entry><entry><title>Python Code to Save Emails in Gmail to PDF Files</title><link href="https://www.georgexyz.com/python-save-emails.html" rel="alternate"></link><published>2019-04-03T13:02:00-04:00</published><updated>2019-04-03T13:02:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-04-03:/python-save-emails.html</id><summary type="html">&lt;p&gt;One of my work tasks requires me to save hundreds of emails in my work Gmail 
account to &lt;span class="caps"&gt;PDF&lt;/span&gt; files in local hard drive.  I could do it manually spending …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of my work tasks requires me to save hundreds of emails in my work Gmail 
account to &lt;span class="caps"&gt;PDF&lt;/span&gt; files in local hard drive.  I could do it manually spending hours 
saving emails, or I could write a python program to do the work. 
No doubt I prefer the second approach. &lt;/p&gt;
&lt;p&gt;A google search finds several online articles discussing how to do it.  A typical 
method is to install a Chrome plugin for the browser, and the plugin will do the work. 
But granting permission to a plugin to read my work emails is not acceptable. &lt;/p&gt;
&lt;p&gt;After reading some articles, I settled on two methods. The first one is to select and 
export emails in Gmail to a .mbox file, then write a python program to read the .mbox file 
and save emails.  The second one is discovered when I was reading the
last chapter of Al Sweigart&amp;#8217;s wonderful book 
&lt;a href="https://automatetheboringstuff.com/"&gt;Automate The Boring Stuff With Python&lt;/a&gt;. 
This method uses the pyautogui module and involves writing a python program to simulate 
mouse button clicks and keyboard key presses to save emails.  The program is like a person is 
clicking the mouse button and typing on the keyboard. &lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s look at the first method. 
&lt;a href="https://www.lifewire.com/how-to-export-your-emails-from-gmail-as-mbox-files-1171881"&gt;An article on Lifwire.com&lt;/a&gt; 
has step by step guide on how to save emails to a .mbox file.  The python standard
library modules &lt;em&gt;mailbox&lt;/em&gt; and &lt;em&gt;email&lt;/em&gt; can read emails in the .mbox file.  I spent
some time writing a python program, which also parses email content and extracts 
useful information from emails. The code structure looks like this. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mailbox&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;email.header&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;email.utils&lt;/span&gt; 

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;  &lt;span class="c1"&gt;# for os.path.exists&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;parse a message and return html_content&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_multipart&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_payload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_payload&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;html_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_payload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;html_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;html_content&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;return a date of message of format datetime&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;dt_parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parsedate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mktime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt_parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromtimestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# dt of the message&lt;/span&gt;
    &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# email time has an offset&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_subject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;subj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# remove multiple \n or &amp;#39; &amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;

&lt;span class="c1"&gt;# ... other methods for parsing email contents&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mbox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mbox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;save&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt; &lt;span class="c1"&gt;# flag for parse emails, not save them&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mbox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# code to parse emails&lt;/span&gt;
        &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;            
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I find a major flaw in this approach a few days later.  The Google archive 
system has a limit on the number of time a user is allowed to export emails to .mbox files. Once 
the daily limit (3 times on my account) is reached, it does not allow a user to export 
emails that day.  The system simply gives a message &amp;#8220;Please try to create your 
archive again&amp;#8221;.&lt;/p&gt;
&lt;p&gt;When I am reading the last chapter of Al Sweigart&amp;#8217;s book, I realize that
the pyautogui module can be used for this task.  Here is the code to save emails, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# save_emails.py by Geroge Zhang on 2/1/2019&lt;/span&gt;
&lt;span class="c1"&gt;# The GMail window should be in a status shown in SaveEMails.png&lt;/span&gt;
&lt;span class="c1"&gt;# The EMails should be in a folder(label), the program clicks next button&lt;/span&gt;
&lt;span class="c1"&gt;# This program only works on my laptop&lt;/span&gt;

&lt;span class="c1"&gt;# Chrome settings -&amp;gt; Advanced -&amp;gt; Privacy and security -&amp;gt; Content settings -&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# pop-ups and redirects -&amp;gt; allow =&amp;gt; add https://mail.google.com&lt;/span&gt;

&lt;span class="c1"&gt;# setup the program&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyautogui&lt;/span&gt; &lt;span class="c1"&gt;# this requires installation&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;pyautogui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PAUSE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;span class="n"&gt;pyautogui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FAILSAFE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;TOTALEMAILS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;START&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;nextButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1229&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;189&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;printButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1230&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;247&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;saveButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;202&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;167&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;filenameBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;878&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;443&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;saveDialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;788&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;503&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;closeButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;470&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;centerWindow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;683&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;&amp;gt;&amp;gt; 5 Seconds to start &amp;lt;&amp;lt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;##print(&amp;#39;Click window center to activate Gmail&amp;#39;)&lt;/span&gt;
&lt;span class="c1"&gt;##pyautogui.click(centerWindow[0], centerWindow[1])&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Please click the first email in a label group&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;&amp;gt;&amp;gt; 5 Seconds to start &amp;lt;&amp;lt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;START&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TOTALEMAILS&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;START&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Now click the print button&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pyautogui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;printButton&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;printButton&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Click the Save email button&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pyautogui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;saveButton&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;saveButton&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Click filename field&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pyautogui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filenameBox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;filenameBox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;pyautogui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;press&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;home&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;filename_prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{0:03}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; - &amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;pyautogui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;typewrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename_prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Click the Save file button&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pyautogui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;saveDialog&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;saveDialog&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Close the second window&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pyautogui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;closeButton&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;closeButton&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Click next button&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pyautogui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nextButton&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;nextButton&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;gt;&amp;gt;&amp;gt; Done &amp;lt;&amp;lt;&amp;lt; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The program is able to save 1500 emails in about four hours.  Depending on the network speed, the
sleep seconds between tasks can be adjusted. Sometime the program may abort for 
some reason.  Change the variables &lt;code&gt;TOTALEMAILS&lt;/code&gt; and &lt;code&gt;START&lt;/code&gt; at the beginning of the program
to resume running. &lt;/p&gt;
&lt;p&gt;You need to manually save a few emails in Chrome browser to understand what the
program is doing.  How do I get the coordinates of the buttons on Gmail interface?  The 
Al Sweigart book includes a &lt;code&gt;mouseNow.py&lt;/code&gt; program.  I simple write down the coordinates
on a piece of paper and then type those coordinates into the program. &lt;/p&gt;
&lt;div style="max-width:450px"&gt;
  &lt;img class="img-fluid" src="/images/save-emails-notes.png" alt="save emails"&gt; 
&lt;/div&gt;</content><category term="posts"></category><category term="Python"></category></entry><entry><title>Python Optparse and Argparse Example</title><link href="https://www.georgexyz.com/python-argparse.html" rel="alternate"></link><published>2019-04-01T21:18:00-04:00</published><updated>2019-04-01T21:18:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-04-01:/python-argparse.html</id><summary type="html">&lt;p&gt;Argparse module was in Python version 3.2 and up.  It superseded
optparse module. Inkscape 0.92 extension program inkex.py file was
written many years ago with optparse module …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Argparse module was in Python version 3.2 and up.  It superseded
optparse module. Inkscape 0.92 extension program inkex.py file was
written many years ago with optparse module. I read several articles trying 
to understand how to use optparse and argparse modules. 
An example discussed in this
&lt;a href="https://www.saltycrane.com/blog/2009/09/python-optparse-example/"&gt;blog post&lt;/a&gt; 
is very helpful. &lt;/p&gt;
&lt;p&gt;The article has an example program designed with two options.  Run the program 
on command line with options and arguments shown on that blog, and the results indicate 
how optparse module works behind scene. &lt;/p&gt;
&lt;p&gt;Following code is a rewrite of the example with argparse. 
You can execute similar commands shown below and compare the results. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span class="c1"&gt;# argparse_example.py&lt;/span&gt;
&lt;span class="c1"&gt;# This is a version using argparse&lt;/span&gt;
&lt;span class="c1"&gt;# revised by GHZ on 2/2019&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;usage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;usage: &lt;/span&gt;&lt;span class="si"&gt;%(prog)s&lt;/span&gt;&lt;span class="s1"&gt; [options] filename&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--xhtml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xhtml_flag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;create a XHTML template instead of HTML&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--cssfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;store&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cssfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;style.css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CSS file to link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;#39;*&amp;#39; for multiple files&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;store&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;the name of file to be processed&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-V&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(prog)s&lt;/span&gt;&lt;span class="s1"&gt; 1.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here are the bash commands to test code. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python argparse_example.py -h
python argparse_example.py 
python argparse_example.py myfile.html
python argparse_example.py -x -c mystyle.css myfile.html
python argparse_example.py --xhtml --cssfile=mystyle.css myfile.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The argparse module contains many other options.  Here is a link to 
&lt;a href="https://docs.python.org/3/howto/argparse.html"&gt;Python argparse Offical Doc&lt;/a&gt;.&lt;/p&gt;</content><category term="posts"></category><category term="python"></category></entry><entry><title>Vim Tips</title><link href="https://www.georgexyz.com/vim-tips.html" rel="alternate"></link><published>2019-04-01T12:45:00-04:00</published><updated>2020-08-09T17:37:00-04:00</updated><author><name>George Zhang</name></author><id>tag:www.georgexyz.com,2019-04-01:/vim-tips.html</id><summary type="html">&lt;p&gt;Ubuntu 18.04 comes with a stripped down version of Vim. If you want to use Vim for 
serious work, you want the full version. &lt;/p&gt;
&lt;h3&gt;Vim Installation&lt;/h3&gt;
&lt;p&gt;The default version …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ubuntu 18.04 comes with a stripped down version of Vim. If you want to use Vim for 
serious work, you want the full version. &lt;/p&gt;
&lt;h3&gt;Vim Installation&lt;/h3&gt;
&lt;p&gt;The default version is started via command &lt;code&gt;vi&lt;/code&gt;. The &lt;code&gt;vi --version&lt;/code&gt; command shows 
the version information. Note the Line 5 below shows &amp;#8220;Small version without &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;#8221;. 
The output also contains the list of setting files Vim will load during startup. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;VIM - Vi IMproved 8.0 (2016 Sep 12, compiled Apr 10 2018 21:31:58)
Included patches: 1-1453
Modified by pkg-vim-maintainers@lists.alioth.debian.org
Compiled by pkg-vim-maintainers@lists.alioth.debian.org
Small version without GUI.  Features included (+) or not (-):
+acl               -extra_search      -mouse_netterm     -tag_old_static
-arabic            -farsi             -mouse_sgr         -tag_any_white
...
+ex_extra          -mouse_jsbterm     +tag_binary 
   system vimrc file: &amp;quot;$VIM/vimrc&amp;quot;
     user vimrc file: &amp;quot;$HOME/.vimrc&amp;quot;
 2nd user vimrc file: &amp;quot;~/.vim/vimrc&amp;quot;
      user exrc file: &amp;quot;$HOME/.exrc&amp;quot;
       defaults file: &amp;quot;$VIMRUNTIME/defaults.vim&amp;quot;
  fall-back for $VIM: &amp;quot;/usr/share/vim&amp;quot;
Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H   -Wdate-time  -g -O2 
-fdebug-prefix-map=/build/vim-NQEcoP/vim-8.0.1453=. -fstack-...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you type command &lt;code&gt;vim&lt;/code&gt; in bash, it will tell you that &amp;#8220;command vim not found&amp;#8221;. 
Those three commands remove the existing vim-tiny and install the full version with &lt;span class="caps"&gt;GUI&lt;/span&gt;
vim-gtk3 in Ubuntu 18.04 or Xubuntu. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt-get remove vim-tiny
sudo apt-get update
sudo apt-get install vim-gtk3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can then check the vim version by command &lt;code&gt;vim --version&lt;/code&gt;. &lt;/p&gt;
&lt;h3&gt;Basic Vim Settings&lt;/h3&gt;
&lt;p&gt;Vim automatically loads &lt;code&gt;~/.vimrc&lt;/code&gt; file during startup. Some default settings of vim 
do not make sense. Below are some most basic vim settings. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;quot; ~/.vimrc file

set nocompatible              &amp;quot; required
filetype plugin on
syntax enable

&amp;quot;path and find, fuzzy file finder
set path+=**  &amp;quot; search subdir recursively, find ...
set wildmenu

set number

&amp;quot; Set ignore case, highlight, and incremental searches
set ignorecase
set hlsearch
set incsearch

if exists(&amp;quot;+lines&amp;quot;)
  set lines=32
endif
if exists(&amp;quot;+columns&amp;quot;)
  set columns=108
endif

&amp;quot; Ctrl + s to save file
noremap &amp;lt;silent&amp;gt; &amp;lt;C-S&amp;gt;  :update&amp;lt;CR&amp;gt;
vnoremap &amp;lt;silent&amp;gt; &amp;lt;C-S&amp;gt; :&amp;lt;C-C&amp;gt;:update&amp;lt;CR&amp;gt;
inoremap &amp;lt;silent&amp;gt; &amp;lt;C-S&amp;gt; &amp;lt;C-O&amp;gt;:update&amp;lt;CR&amp;gt;

&amp;quot;shortcut ^l to mute highlighting
nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-l&amp;gt; :&amp;lt;C-u&amp;gt;nohlsearch&amp;lt;CR&amp;gt;&amp;lt;C-l&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Vim Tips&lt;/h3&gt;
&lt;h4&gt;Startup&lt;/h4&gt;
&lt;p&gt;Vim loads &lt;code&gt;~/.vimrc&lt;/code&gt; by default, and you can change the behavior by using &lt;code&gt;-u&lt;/code&gt; option on 
command line.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$vim -u ~/.simple.vimrc filename
$vim -u NONE  # do not load any config file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Set Initial Console Window Size&lt;/h4&gt;
&lt;p&gt;On Linux terminal, you can use &lt;code&gt;set lines=50 columns=100&lt;/code&gt; to set initial console size. 
I have those lines in my &lt;code&gt;~/.vimrc&lt;/code&gt; file. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;if exists(&amp;quot;+lines&amp;quot;)
  set lines=32
endif
if exists(&amp;quot;+columns&amp;quot;)
  set columns=108
endif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Source: &lt;a href="https://vim.fandom.com/wiki/Maximize_or_set_initial_window_size"&gt;an article&lt;/a&gt; on fandom.com.&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;Fuzzy Find&lt;/h4&gt;
&lt;p&gt;The following two settings help the &lt;code&gt;:find&lt;/code&gt; command to do file fuzzy finding. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;set path+=**
set wildmenu
:find *cache # Press Tab key to find file name with cache
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Source: &lt;a href="https://youtu.be/XA2WjJbmmoM"&gt;a video talk&lt;/a&gt; on youtube.&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;Auto Complete&lt;/h4&gt;
&lt;p&gt;Vim itself has auto complete function built in. In the insert mode, you can type a 
few letters such as &amp;#8216;Com&amp;#8217;, and then press &lt;code&gt;^n&lt;/code&gt; to bring up auto complete menu. It 
is very handy when you are programming because you often need to type variable and 
class names multiple times on a file. &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;^x^n&lt;/dt&gt;
&lt;dd&gt;search in this file, ^ represents Ctrl key &lt;/dd&gt;
&lt;dt&gt;^x^f&lt;/dt&gt;
&lt;dd&gt;search filename&lt;/dd&gt;
&lt;dt&gt;^x^]&lt;/dt&gt;
&lt;dd&gt;search tag&lt;/dd&gt;
&lt;dt&gt;^n&lt;/dt&gt;
&lt;dd&gt;search by default&lt;/dd&gt;
&lt;dt&gt;^n  ^p&lt;/dt&gt;
&lt;dd&gt;next prev on the menu&lt;/dd&gt;
&lt;dt&gt;^y&lt;/dt&gt;
&lt;dd&gt;confirm selection, yes&lt;/dd&gt;
&lt;dt&gt;^e&lt;/dt&gt;
&lt;dd&gt;exit menu&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Current Filename&lt;/h4&gt;
&lt;p&gt;Command &lt;code&gt;^g&lt;/code&gt; shows the name of the current file. Or you can type the following vim 
commands. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:echo @%
:!ls %:p  # will show absolute path of file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Navigation&lt;/h4&gt;
&lt;p&gt;Keys &lt;code&gt;h j k l&lt;/code&gt; are the basic navigation commands in normal mode. Commands &lt;code&gt;w b e&lt;/code&gt; 
jump cursor to next word, begin of word, or end of word. Other common navigation 
commands are listed below. &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;gg&lt;/dt&gt;
&lt;dd&gt;move cursor to top&lt;/dd&gt;
&lt;dt&gt;G&lt;/dt&gt;
&lt;dd&gt;move cursor to bottom&lt;/dd&gt;
&lt;dt&gt;:&lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;jump cursor to line number n, or &lt;code&gt;&amp;lt;n&amp;gt;G&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;^e&lt;/dt&gt;
&lt;dd&gt;show an extra line&lt;/dd&gt;
&lt;dt&gt;^y&lt;/dt&gt;
&lt;dd&gt;opposite of ^e&lt;/dd&gt;
&lt;dt&gt;^d&lt;/dt&gt;
&lt;dd&gt;move down half screen&lt;/dd&gt;
&lt;dt&gt;^u&lt;/dt&gt;
&lt;dd&gt;move up half screen&lt;/dd&gt;
&lt;dt&gt;%&lt;/dt&gt;
&lt;dd&gt;matching ( { or [&lt;/dd&gt;
&lt;dt&gt;H, M, L&lt;/dt&gt;
&lt;dd&gt;move cursor to top, middle, and lower corner&lt;/dd&gt;
&lt;dt&gt;^o&lt;/dt&gt;
&lt;dd&gt;go to old cursor position&lt;/dd&gt;
&lt;dt&gt;^i&lt;/dt&gt;
&lt;dd&gt;go to next cursor position&lt;/dd&gt;
&lt;dt&gt;gj&lt;/dt&gt;
&lt;dd&gt;move down one displayed line when a long line is auto wrapped&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Common Shortcuts&lt;/h4&gt;
&lt;p&gt;Vim is in a different league comparing to other text editors. It does not have 
some common shortcuts other editors have. But some of those shortcuts are so 
common, it is better to customize vim to support them. For example, the 
command &lt;code&gt;:saveas&lt;/code&gt; is sometimes very convenient. &lt;/p&gt;
&lt;p&gt;The settings below add &lt;code&gt;Ctrl+s&lt;/code&gt; shortcut for saving file.  Command &lt;code&gt;:update&lt;/code&gt; is 
like &lt;code&gt;:write&lt;/code&gt;, but only write when buffer has been modified.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;noremap &amp;lt;silent&amp;gt; &amp;lt;C-S&amp;gt;  :update&amp;lt;CR&amp;gt;
vnoremap &amp;lt;silent&amp;gt; &amp;lt;C-S&amp;gt; :&amp;lt;C-C&amp;gt;:update&amp;lt;CR&amp;gt;
inoremap &amp;lt;silent&amp;gt; &amp;lt;C-S&amp;gt; &amp;lt;C-O&amp;gt;:update&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This shortcut also needs a setting in &lt;code&gt;.bashrc&lt;/code&gt; file to work. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;stty -ixon  # stop tele-typewriter, 
            # -ixon enable xon/xoff flow control -i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By default command &lt;code&gt;^s&lt;/code&gt; freezes vim in Ubuntu Linux, and &lt;code&gt;^q&lt;/code&gt; un-freeze it. 
This &lt;a href=""&gt;stackoverflow Q&amp;amp;A&lt;/a&gt; 
explains it very well. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Ctrl + s&lt;/code&gt; is a common command to terminals to stop updating, it was a way to slow 
the output so you could read it on terminals that did not have a scrollback 
buffer. &lt;code&gt;Ctrl + q&lt;/code&gt; command gets terminal going again. Put this line in .bashrc to 
disable flow control for terminal entirely.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Spell Check&lt;/h4&gt;
&lt;p&gt;Vim has a built in spell checker. You use &lt;code&gt;set spell&lt;/code&gt; to turn it on 
and &lt;code&gt;set nospell&lt;/code&gt; to turn it off.  Here are some other commands on how to 
use it.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;setlocal spell&lt;/dt&gt;
&lt;dd&gt;for current buffer only&lt;/dd&gt;
&lt;dt&gt;]s&lt;/dt&gt;
&lt;dd&gt;move to next misspelled word&lt;/dd&gt;
&lt;dt&gt;[s&lt;/dt&gt;
&lt;dd&gt;previous misspelled word&lt;/dd&gt;
&lt;dt&gt;z=&lt;/dt&gt;
&lt;dd&gt;cursor on the word, list of suggested words&lt;/dd&gt;
&lt;dt&gt;zg&lt;/dt&gt;
&lt;dd&gt;the word is correct, add it to personal dictionary&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The &lt;code&gt;spelllang&lt;/code&gt; settings is to specify the language, and the default is &lt;code&gt;en&lt;/code&gt;. 
You can set it to &lt;code&gt;en_us&lt;/code&gt; to specify American English. You can also use 
&lt;code&gt;spellfile&lt;/code&gt; setting to specify a personal dictionary file for &lt;code&gt;zg&lt;/code&gt; command. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Source: &lt;a href="https://www.linux.com/training-tutorials/using-spell-checking-vim/"&gt;an article&lt;/a&gt; on linux.com &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; 
&lt;a href="http://thejakeharding.com/tutorial/2012/06/13/using-spell-check-in-vim.html"&gt;a blog post&lt;/a&gt; by Jake Harding.&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span class="caps"&gt;GNOME&lt;/span&gt; Terminal Shortcuts&lt;/h4&gt;
&lt;p&gt;The Linux Mint comes with Gnome terminal. You can open additional tabs by pressing
shortcut &lt;code&gt;Ctrl + Shift + t&lt;/code&gt;, and move to next tab by pressing &lt;code&gt;Ctrl + PageDown&lt;/code&gt;. 
This does not necessarily relate to Vim, but I often use them so they are listed here. &lt;/p&gt;
&lt;p&gt;Another useful terminal shortcut is &lt;code&gt;Ctrl + z&lt;/code&gt; which puts current application Vim 
in the background and suspended. After running some bash commands, you can type &lt;code&gt;fg&lt;/code&gt; 
command to bring Vim back to foreground. Or you can use &lt;code&gt;:!&lt;/code&gt; followed by a bash 
command to execute the command inside Vim. &lt;/p&gt;
&lt;h4&gt;Copy and Paste via Clipboard&lt;/h4&gt;
&lt;p&gt;Copying texts to and from Vim using the &lt;code&gt;Ctrl + c&lt;/code&gt; and &lt;code&gt;Ctrl + v&lt;/code&gt; does not work.
The command &lt;code&gt;^c&lt;/code&gt; is to generate a signal which tells the current process to
terminate, and command &lt;code&gt;^v&lt;/code&gt; invokes &amp;#8220;verbatim insert&amp;#8221; in bash (see &lt;a href="https://www.howtogeek.com/440558/how-to-copy-and-paste-text-at-linuxs-bash-shell/"&gt;an online
article&lt;/a&gt;) .
You could use Gnome terminal shortcuts &lt;code&gt;Ctrl + Shift + c&lt;/code&gt; and &lt;code&gt;Ctrl + Shift +
v&lt;/code&gt;, but sometimes it does not work very well. &lt;/p&gt;
&lt;p&gt;I often use the &lt;em&gt;clipboard register&lt;/em&gt; (&lt;code&gt;"+&lt;/code&gt;) to copy and paste texts in and out of Vim. Here 
are the steps to copy texts into Vim, &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Copy texts in another program such as Firefox.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt + Tab&lt;/code&gt; switch focus to Vim.&lt;/li&gt;
&lt;li&gt;Use command &lt;code&gt;"+p&lt;/code&gt; to paste the texts.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are the steps to copy texts out of Vim to another program.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;v&lt;/code&gt; command to visually select texts in Vim.&lt;/li&gt;
&lt;li&gt;Type command &lt;code&gt;"+y&lt;/code&gt; to copy the texts to clipboard.&lt;/li&gt;
&lt;li&gt;In another program, use &lt;code&gt;^v&lt;/code&gt; to paste the texts. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is an 
&lt;a href="https://superuser.com/questions/61226/configure-vim-for-copy-and-paste-keyboard-shortcuts-from-system-buffer-in-ubuntu"&gt;online Q&amp;amp;A&lt;/a&gt;
on how to map &lt;code&gt;^c&lt;/code&gt; and &lt;code&gt;^v&lt;/code&gt; to copy and paste behavior, but I have not 
set it up in my &lt;code&gt;.vimrc&lt;/code&gt; file. &lt;/p&gt;
&lt;h4&gt;Work Sessions&lt;/h4&gt;
&lt;p&gt;When you have 10 or more text files open in Vim and need to reboot your computer, you 
can use session commands to save the Vim work status and load them later.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;:mksession ~/work1.session&lt;/dt&gt;
&lt;dd&gt;save the current work status&lt;/dd&gt;
&lt;dt&gt;:source ~/work1.session&lt;/dt&gt;
&lt;dd&gt;load the saved session in Vim&lt;/dd&gt;
&lt;dt&gt;vim -S ~/work1.session&lt;/dt&gt;
&lt;dd&gt;bash command to load vim and work session&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Manage Buffers&lt;/h4&gt;
&lt;p&gt;Text files opened in Vim are called buffers. You can open multiple files with bash 
command like this &lt;code&gt;vim *.py&lt;/code&gt;, and all python files in current directory will open 
in Vim as buffers. The command &lt;code&gt;:ls&lt;/code&gt; shows all buffers in current vim session. Note 
that command &lt;code&gt;:!ls&lt;/code&gt; will execute a single bash command &lt;code&gt;ls&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;On the list generated by the &lt;code&gt;:ls&lt;/code&gt; command, &lt;code&gt;%&lt;/code&gt; represents current buffer and &lt;code&gt;#&lt;/code&gt; 
represents alternate buffer. You can switch between the current buffer and 
alternate buffer. The &lt;code&gt;+&lt;/code&gt; symbol on the list represents the file has been 
modified but not saved.  The commands listed below are for navigating between buffers.&lt;/p&gt;
&lt;p&gt;When writting Python programs in Vim, you can run the command &lt;code&gt;:!python3 %&lt;/code&gt; 
to run the current file. &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;:bnext, bprevious, bfirst, blast&lt;/dt&gt;
&lt;dd&gt;next, previous, first, and last buffer&lt;/dd&gt;
&lt;dt&gt;:b5&lt;/dt&gt;
&lt;dd&gt;open buffer number 5 &lt;/dd&gt;
&lt;dt&gt;:bdelete 5, 6, 8&lt;/dt&gt;
&lt;dd&gt;close buffer numbers 5, 6, and 8&lt;/dd&gt;
&lt;dt&gt;:5,7bdelete&lt;/dt&gt;
&lt;dd&gt;delete buffer numbers 5, 6, and 7&lt;/dd&gt;
&lt;dt&gt;:edit file1&lt;/dt&gt;
&lt;dd&gt;open file1 as an additional buffer&lt;/dd&gt;
&lt;dt&gt;:find file1&lt;/dt&gt;
&lt;dd&gt;open file1, this command also searches sub-directories&lt;/dd&gt;
&lt;dt&gt;:b# or ^6&lt;/dt&gt;
&lt;dd&gt;switch between current buffer and alternate buffer&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Map Caps Lock Key&lt;/h4&gt;
&lt;p&gt;Some people recommend to map CapsLock key to Esc key when using Vim.
Stackoverflow has a Q&amp;amp;A on how to do it. The following two lines of code in
.vimrc file will do the trick. When leaving Vim, it will remap the key back to
Caps Lock. The xmodmap software is already installed in Linux Mint, so no
installation is needed. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;au VimEnter * silent! !xmodmap -e &amp;#39;clear Lock&amp;#39; 
    -e &amp;#39;keycode 0x42 = Escape&amp;#39;
au VimLeave * silent! !xmodmap -e &amp;#39;clear Lock&amp;#39; 
    -e &amp;#39;keycode 0x42 = Caps_Lock&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I am used to press &lt;code&gt;Esc&lt;/code&gt; key to enter normal mode, and I find the 
Caps Lock key is not as straightforward as the Escape key.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Source: &lt;a href="https://stackoverflow.com/questions/2176532/how-to-map-caps-lock-key-in-vim"&gt;an stackoverflow Q&amp;amp;A&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;Vim Command to Reflow Texts to 80 Columns.&lt;/h4&gt;
&lt;p&gt;When writting articles in Vim, I often need to reflow texts after some editing. To
reflow texts, the first step is to set the &lt;code&gt;textwidth&lt;/code&gt; and the second step is
to select texts and reflow with command &lt;code&gt;gq&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;You can set the &lt;code&gt;textwidth&lt;/code&gt; to 80 (:set textwidth=80 or :set tw=80), then use
&lt;code&gt;gg&lt;/code&gt; to move cursor to the start of the file and type &lt;code&gt;gqG&lt;/code&gt; to reflow 
the whole article. The command &lt;code&gt;gq&lt;/code&gt; also works with visual selection.  You
can use command &lt;code&gt;vipgq&lt;/code&gt; to select the paragraph first and then reflow. Or you
can use &lt;code&gt;gqap&lt;/code&gt; to reflow current paragraph, and &lt;code&gt;gq}&lt;/code&gt; reflow texts from current
cursor to end of the paragraph. Note you can select a paragraph by typing &lt;code&gt;vip&lt;/code&gt; or
&lt;code&gt;vap&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;Command &lt;code&gt;gw&lt;/code&gt; is similar to &lt;code&gt;gq&lt;/code&gt;.  Here is the quote from help page. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gw: Format the lines that {motion} moves over. Similar to 
gq but puts the cursor back at the same position in the text. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Source: &lt;a href="https://stackoverflow.com/questions/3033423/vim-command-to-restructure-force-text-to-80-columns"&gt;an stackoverflow Q&amp;amp;A&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;Run Commands on Multiple Lines&lt;/h4&gt;
&lt;p&gt;If you want to run a normal mode command on a range of lines, you can use the
&lt;code&gt;normal&lt;/code&gt; command.  For example if you want to comment out line 4 to 6 of
.bashrc file, you can use &lt;code&gt;V&lt;/code&gt; to select those lines and apply command
&lt;code&gt;:'&amp;lt;,'&amp;gt;normal i#&lt;/code&gt; to insert a character (#) in font of each line.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# Load pyenv automatically by adding
# the following to ~/.bashrc:

export PATH=&amp;quot;/home/george/.pyenv/bin:$PATH&amp;quot;
eval &amp;quot;$(pyenv init -)&amp;quot;
eval &amp;quot;$(pyenv virtualenv-init -)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Source: Practical Vim Second Edition by Drew Neil Page 63, Tip 30&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;Links and References&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://vim.rtorr.com/"&gt;Vim Cheat Sheet&lt;/a&gt; 
is a nice single web page which includes command vim commands.&lt;/p&gt;</content><category term="posts"></category><category term="vim"></category><category term="tip"></category><category term="linux"></category></entry></feed>