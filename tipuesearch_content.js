var tipuesearch = {"pages":[{"title":"About","text":"About This is the personal blog site of George Zhang. The site becomes live on 4/1/2019. The website is freely hosted on github pages. Front end web framework: Bootstrap. Python static site generator: Pelican. Article search tool: Tipue Search.","tags":"pages","url":"https://www.georgexyz.com/pages/about.html","loc":"https://www.georgexyz.com/pages/about.html"},{"title":"Homepage","text":"My name is George Zhang, and I am an aspiring full stack web developer with a passion for Python. This is my personal webpage. It is also a test bed for various web technologies. Sometimes I write down some notes, which may be useful for other people. I am publishing some materials I have written over the years on this website. The site contains some traffic related articles because I worked as a professional traffic engineer for a few years after college. Thank you for your time and feel free to drop me an email if you have any questions or comments.","tags":"pages","url":"https://www.georgexyz.com/pages/homepage.html","loc":"https://www.georgexyz.com/pages/homepage.html"},{"title":"Inkscape Tutorial","text":"Inkscape Tutorial Inkscape Tutorial for Engineers, 12 slides in PDF for learning Inkscape. Inkscape has become my favorite drawing tool after designing with a commercial CAD (computer-aided design) software package for several years. Most of my work drawings nowadays are designed in Inkscape. It is truly an amazing piece of open software. This set of 12 slides was created in Inkscape when I was learning the software. It helps me become familiar with Inkscape and later serves as a reference for myself. I hope you will find them useful. Download PDF Inkscape Selector The first tool on the toolbar is selector, and it has three modes: single click, double click, and second click. SVG Code Scalable Vector Graphics ( SVG ) has six shape elements: line, rectangle, circle, ellipse, polyline, and polygon. Inkscape itself has special attributes for shapes like star. Inkscape Node This is a wider card with supporting text below as a natural lead-in to additional content. This card has even longer content than the first to show that equal height action. Last updated March 2019","tags":"pages","url":"https://www.georgexyz.com/pages/inkscape-tutorial.html","loc":"https://www.georgexyz.com/pages/inkscape-tutorial.html"},{"title":"Code Projects","text":"Create A Web Page With Often Visited Links Write a blog post with a collection of web links that I often visit, and continue to update this post. Here is the link to the article A Collection of Web Links . Python Code to Save Emails in Gmail to PDF This program uses Al Sweigart's pyautogui module and it simulates mouse button clicks and keyboard key presses to save emails to PDF . Here is the link to the github repository. This blog post discusses the thought process behind the code. Open Calendar Inkscape Extension Python App This is an Inkscape extension Python Code to generate full size (36\" x 24\") one page yearly calendar in Inkscape. The code is available on github . This blog post explains what this app is about. The blog post about Inkscape has instructions on how to install and run Inkscape Extension.","tags":"pages","url":"https://www.georgexyz.com/pages/projects.html","loc":"https://www.georgexyz.com/pages/projects.html"},{"title":"Two Git Books","text":"This post is about two Git books I recently read. Git is a complicated tool which is not easy to figure out simply by Google searching. I start with the O'Reilly book Version Control with Git 2nd ed by Jon Loeliger and Matthew McCullough. The book is good, and examples in chapters 5 and 6 are especially nice. However, the book is not an easy read. I read the first 12 chapters carefully and skim the rest chapters. Then I read the more popular book Pro Git written by Scott Chacon and Ben Straub. Scott Chacon is one of the founders of github. The book is freely available on official git website git-scm.com. This book is excellent. I especially like the workflow sections in chapter 5 because those materials are not easy to find online. I read the first 6 chapters twice and skim the rest book. This book is also more practical for engineers, and you can use the book as a reference for daily projects. If you only have time for one book, this is the one to get.","tags":"posts","url":"https://www.georgexyz.com/two-git-books.html","loc":"https://www.georgexyz.com/two-git-books.html"},{"title":"Home File Sharing with Raspberry Pi","text":"When reconfiguring my home WIFI router this week, I have a thought to setup a home file sharing drive. The Raspberry Pi 3B+ and a case I bought one or two years ago has been collecting dust in a drawer for quite some time. It is time to bring them out and get some use out of them. My original plan is to connect a retired SSD to the PI via an USB adapter. It would be a little messy to handle the cable and the exposed SSD drive. So I decide to use a Samsung 64GB USB flash drive which is also retired. The two articles linked below are on the top of Google search. Pcmag.com - How to Turn a Raspberry Pi Into a NAS for Whole-Home File Sharing Magpi - Build a Raspberry Pi NAS After reading the two articles, it seems that the first one suites my needs better. The first tutorial is quite good but I still run into a few problems. Below are some notes I have when setting up the Pi. The Raspberry Pi 3B+ needs a 3A or 2.5A power supply. If the USB power charger does not provide enough voltage, the Pi will start and then automatically shut off. The my cell phone quick charger has 3A voltage output and it works well with Pi. The USB stick does not work with sudo mkfs command in the tutorial. I have to use Linux Mint desktop app USB Stick Formatter to format it to EXT4 first and then connect it to Pi. I tried both full version desktop Raspberry Pi OS and Lite minimal version. It seems that the full version is easy to setup WIFI , SSH , and other settings. Even though it is possible to setup the Pi without a monitor, it is much easier to connect it to monitor and do initial setup. The network drive speed is not so fast and it is between 0.5M/s to 2M/s. But it is good enough for me to share files among computers and my phone. Android file manager app Cx File Explorer can access network drive with SMB protocol. Use address \\\\raspberrypi in Windows and smb://raspberrypi in Linux to access the shared drive.","tags":"posts","url":"https://www.georgexyz.com/home-file-sharing.html","loc":"https://www.georgexyz.com/home-file-sharing.html"},{"title":"A Case of Linux Mint Crash","text":"Last night my main computer with Linux Mint 20 crashed and I was really worried that I might lose the files I had been working on. After many google searches, I found a solution and knew why it happened. The computer did not respond to mouse or keyboard input so I had to hold down the power key for a few seconds to shut it off. When the computer restarted, it showed the Linux Mint login screen but the system did not let me log in. I tried a few times entering my password and also tried to restart the computer, but still could not log in. After some google searches, I found this online post ( SOLVED ) Cannot Login (login loop) I followed the answer by Lohengrines, did the following steps, and logged into the system. In login screen, switch to terminal by pressing \"Ctrl + Alt + F2\" Run the command sudo tune2fs -m0 /dev/sda2 Switch back to login screen \"Ctrl + Alt + F7\" Login with user name and password There were previous discussions on the same topic on Linux Mint Forum. This post had more information. Disk full, unable to login. I need help ( SOLVED ) As suggested on the above post, when I ran the command df -h sudo du -h -d 1 / | sort -n # this is for 1 level of dir under root / I found two huge files under /var/log directory. It turned out that both syslog and kern.log files were of 40GB + sizes. And the disk was full and that was the reason I could not login. Unfortunately I could not simply delete those two files. How to remove them? There was another post for that. Var/log file way too large The following command cleared the two files to 0 byte: sudo su > /var/log/syslog > /var/log/kern.log After that the disk showed a free space of 90GB . I also ran the command below to change the reserved disk blocks percent back to 5 percent. sudo tune2fs -m5 /dev/sda2 I have a large 30 inch Dell U3011 monitor I bought a few years ago. The desktop connects to the monitor via a displayport cable. I also connect my laptop to the monitor through the same cable. I simply unplug the cable from desktop and plug it to the laptop. Last night, I did not turn off the desktop when unplugging the monitor cable. Linux Mint 20 system started outputting the same error messages again and again. It eventually filled up the disk. That was the reason I could not log into the system. Thought it was painful, I did learn something from this crash experience. Update (9/24/2020): The computer crashed again today and the reason I wrote above was not correct. I added a maxsize 10M setting to the configuration file following this stackoverflow post . I also updated the system to the latest.","tags":"posts","url":"https://www.georgexyz.com/a-case-of-linux-mint-crash.html","loc":"https://www.georgexyz.com/a-case-of-linux-mint-crash.html"},{"title":"Web Development Notes","text":"I am going to assemble some notes for web development in this post. It is mainly for myself and I will keep updating this post. Force Firefox to Refresh There are two quick ways to refresh web page in Firefox browser. Press Shift key and click refresh (reload) button, Shortcut is Ctrl + Shift + r . The fresh button is the third one on the image shown below:","tags":"posts","url":"https://www.georgexyz.com/web-development-notes.html","loc":"https://www.georgexyz.com/web-development-notes.html"},{"title":"Change Boot Order with GRUB 2","text":"My laptop has both Windows 10 and Linux Mint installed. Sometimes I want the laptop booting into Windows by default. After a little online research, I find that I need to change the settings of boot loader software GRUB 2. After reading the online grub manual for one hour or so, I am still not sure how to do it. Fortunately, I find an excellent GRUB tutorial on dedoimedo.com, which explains the GRUB 2 very well. Basically, the GRUB 2 software reads the grub.cfg configuration file in /boot/grub/ directory. However you should not modify this file directly. Instead, the file is generated with a linux command like this. sudo grub-mkconfig -o grub.cfg The grub-mkconfig tool will load setting files in /etc/grub.d/ directory and setting file /etc/default/grub . A user should change those files and run grub-mkconfig to generate the final grub.cfg file. Here is the file list under /etc/grub.d directory in my laptop. george@T450:/etc/grub.d$ ls -la total 108 -rwxr-xr-x 1 root root 10046 Mar 18 2019 00_header -rwxr-xr-x 1 root root 6258 Mar 18 2019 05_debian_theme -rwxr-xr-x 1 root root 12059 Aug 4 23:46 09_os-prober <-- added -rwxr-xr-x 1 root root 12693 Mar 18 2019 10_linux -rwxr-xr-x 1 root root 11298 Mar 18 2019 20_linux_xen -rwxr-xr-x 1 root root 1992 Jan 28 2016 20_memtest86+ -rw-r--r-- 1 root root 12059 Mar 18 2019 30_os-prober -rwxr-xr-x 1 root root 1418 Mar 18 2019 30_uefi-firmware -rwxr-xr-x 1 root root 214 Mar 18 2019 40_custom -rwxr-xr-x 1 root root 216 Mar 18 2019 41_custom -rw-r--r-- 1 root root 483 Mar 18 2019 README Reading the /boot/grub/grub.cfg file a little bit, I find the 30_os-prober is the configuration file to read the Windows. I made a copy the file and named the new copy 09_os-prober , then I turned the execution bit off for 30_os-prober . Note the boot order is based on the first two digits of file names in this directory. The commands are like this, sudo cp 30_os-prober 09_os-prober sudo chmod -x 30_os-prober sudo grub-mkconfig -o /boot/grub/grub.cfg Now reboot the computer and the boot screen looks like this,","tags":"posts","url":"https://www.georgexyz.com/change-boot-order-with-grub-2.html","loc":"https://www.georgexyz.com/change-boot-order-with-grub-2.html"},{"title":"Mutate While Looping in Python","text":"Raymond Hettinger once said \"if you mutate something while you're iterating over it, you're living in a state of sin and deserve whatever happens to you\". Recent version of Python actually does not allow you mutate a dictionary while looping over it. Here are some test code. Python 3.7 . 4 ( default , Sep 20 2019 , 00 : 15 : 38 ) [ GCC 7.4 . 0 ] on linux Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information . >>> d = { 'matthew' : 'blue' , 'rachel' : 'green' , 'raymond' : 'red' } >>> d { 'matthew' : 'blue' , 'rachel' : 'green' , 'raymond' : 'red' } >>> for k in d : ... print ( k ) ... >>> d2 = d . copy () >>> for k in d . keys (): ... if k . startswith ( 'r' ): ... del d [ k ] ... Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > RuntimeError : dictionary changed size during iteration Sometimes \"mutate while looping\" is necessary and it can make code simpler. Here is an example (modified) from Chapter 6 of Al Sweigart's Automate The Boring Stuff With Python book. def prefix ( word ): prefixnonletters = '' while len ( word ) > 0 and not word [ 0 ] . isalpha (): prefixnonletters += word [ 0 ] word = word [ 1 :] return prefixnonletters , word This function separates a word (e.g., ‘123word') into two parts: the prefix non-letter part (‘123') and following letter part (‘word'). The code loops over the input word and mutates it in the loop body. It is difficult to write the function in other ways. One alternative way I can think of is to use regular expression. def prefix_re ( word ): import re m = re . match ( r '([&#94;A-Za-z]+)(\\w*)' , word ) if m : return m . group ( 1 ), m . group ( 2 ) else : return '' , word","tags":"posts","url":"https://www.georgexyz.com/mutate-while-looping-in-python.html","loc":"https://www.georgexyz.com/mutate-while-looping-in-python.html"},{"title":"Home Woodwork Projects","text":"I took a brief time off computers and worked on a few simple wood projects at home during my spare time. Garden Wood Frame The first project is building wood frames for string bean plants in our backyard. The materials are 16 1\"x2\"x8' pressure treated board from Home Depot. They are about $2 each and total cost is less than $35. Here is a photo of the frames. Backyard Shoe Rack The second project is building a backyard shoe rack. A few other options are considered before setting on this one. The materials are recycled pallet wood and 6 hooks ($1 ea) from Home Depot. The hooks are mounted about 45 degrees into the wood. Under Deck Swing The neighborhood playground is closed nowadays, so we decide to build an under deck swing in the backyard. The number of components are more than I thought. Here is a list of materials for the toddler swing. The total material cost is about $100. Toddler swing Step2 infant to toddler swing from amazon - $37 Swing hanger Jungle Gym Kingdom heavy duty swing hanger from amazon - $29 Wood 2\"x6\"x8' pressure treated wood from Home Depot - $7 Chain 3/16\" x 3' two chains - $12 Screws 1/2\" x 4 \" four lag screw - $5 Screws 5/16\" x 4-1/2\" ten lag screw - $7.4 We have some materials left over from this project such as wood and lag screws, so we decide to build a simple swing/bench near the toddler swing. This time uses a much cheaper swing hanger from Home Depot. It has a weight rating of 450 lbs which is more than enough for us. Swing 2\"x8\"x8' wood (22 in long) with white paint Hanger Everbilt porch swing chain kit - $17 Hook and Washer 1/4\" x 4-1/4\" steel hook and 1/4\" x 1-1/4\" fender washer - $6","tags":"posts","url":"https://www.georgexyz.com/home-woodwork-projects.html","loc":"https://www.georgexyz.com/home-woodwork-projects.html"},{"title":"Adding .vimrc Dotfile to Github","text":"Youtube has a nice video Learning Vim In A Week , and I watch it every few months to refresh my Vim skills. In the video the presenter suggests people to version control dotfiles such as .vimrc , which is the setting file Vim loads during startup. There is a website dedicated to this topic. Dotfiles seem to be different than normal files in a regular github repo. I googled and found a stackoverflow post which discusses the exact same issue. The accepted answer seems a reasonable start point, so I create a github repo and start a directory containing .vimrc and .simple dot files. The answer also suggests to create symbol links in home directory to the dot files. However, I find it does not work well. When I use vim -u ~/.simple command to load a specific dot file, Vim reports an error. Instead the hard links should be used here. You simply use ln file link command to create hard links instead of ln -s ... command. When adding files to git version control, the command git add . should be used. The command git add * will not work because * does not expand to include dot files. I also wrote a short python script newlinks.py to automatically create the hard links in the home directory. The program is not long and the source code is listed below. #! python3 ''' Create hard links in ~/ or home directory. The purpose is to track the .dot file by git and github Use: git add . git commit -m \"message\" git push origin master to update git repo After you git clone the repo run $python3 newlinks.py to create hard links in home dir. Written by George Zhang on 6/8/20 ''' import os import subprocess def main (): abspath = os . path . abspath ( __file__ ) dname = os . path . dirname ( abspath ) os . chdir ( dname ) filenames = os . listdir () for f in filenames : if os . path . isfile ( f ) and f . startswith ( '.' ) and not f . endswith ( '.swp' ): # ln command # os module has link and symlink function p1 = subprocess . run ( f 'ln -f { f } ~/ { f } ' , shell = True , capture_output = True ) print ( 'running command: ' , f 'ln -f { f } ~/ { f } ' , end = ' --> ' ) if p1 . returncode == 0 : print ( 'Success!' ) print ( 'DONE!!!' ) if __name__ == '__main__' : main ()","tags":"posts","url":"https://www.georgexyz.com/adding-vimrc-dotfile-to-github.html","loc":"https://www.georgexyz.com/adding-vimrc-dotfile-to-github.html"},{"title":"Copy SSH Keys to A New Computer","text":"I followed Miguel Grinberg's tutorial setting up an SSH key on my desktop using ssh-keygen . I thought I could simply copy the private key id_rsa and public key id_rsa.pub to ~/.ssh directory on a new computer and SSH would work as on the first computer. It does not work. I googled and found a Q&A on askubuntu.com. There are many answers to the question but only the answer by Victor Timoftil is related to what I am looking for. The simple answer is that, Move ~/.ssh to the new machine and run ssh-add . DONE ! The long answer is that, In the old machine, take the folder ~/.ssh to an USB drive, or to any other storage you like. On the new machine, put the folder under ~ aka /home/$ USER . Run ssh-add, on the new machine done. I copy the two SSH keys files vie a flash drive that is formatted as ntfs format. The key files are having new permission 777 . The ssh-add command will show an error for that. I have to use chmod 500 command to change file permissions. Also the ssh-add will ask a passphrase which is entered when you create the keys. It seems to be a safety feature to prevent someone stealing the two key files. Update (6/28/2020): I find the above method is not a good practice of handling SSH keys. It is better to generate new private and public keys in a new computer and copy the new public key to the server according to a Q&A post . The server will have two public keys for the same user. Update 2 (7/21/2020): In order to add a second public key to the github, an additional step \"add your SSH key to the ssh-agent\" is needed when generating the key. Follow instructions on those two github web pages. Generating a new SSH key and adding it to the ssh-agent Adding a new SSH key to your Github account","tags":"posts","url":"https://www.georgexyz.com/copy-ssh-keys.html","loc":"https://www.georgexyz.com/copy-ssh-keys.html"},{"title":"Code Highlighting in Pelican","text":"It is easy getting confused about code highlighting when reading Pelican documentation. It mentions keywords like CodeHilite and Pygments without much explanation. When I am reviewing my Pelican notes, I decide to spend a little time to figure out how code highlighting works in Pelican or more broadly in Python. The CodeHilite is an extension for Python package Markdown . When you run the command pip install markdown , the installed package includes the CodeHilite because it is a standard Markdown extension. Confusing enough, the documentation for Markdown package calls itself Python-Markdown . You can see the documentation for CodeHilite on this webpage . The summary says that \"the CodeHilite extension adds code/syntax highlighting to standard Python-Markdown code blocks using Pygments.\" It is still not very clear on what it actually does. On the same documentation page, there are two example Pygments commands from the command line. pygmentize -S default -f html -a .codehilite > styles.css pygmentize -L style The first command creates a CSS file styles.css with default style. The -f html option specifies the formatter and -a .codehilite option specifies a class in the styles.css file. The second command lists all the styles that comes with Pygments package. After running the first command, the generated styles.css file has 69 lines of CSS rules. The .codehilite class is specified by the -a option on the command line. . codehilite . hll { background-color : #ffffcc } . codehilite { background : #f8f8f8 ; } . codehilite . c { color : #408080 ; font-style : italic } /* Comment */ . codehilite . err { border : 1 px solid #FF0000 } /* Error */ . codehilite . k { color : #008000 ; font-weight : bold } /* Keyword */ ... The Pelican default configuration dictionary has a key MARKDOWN , and the corresponding value is shown below. 'MARKDOWN' : { 'extension_configs' : { 'markdown.extensions.codehilite' : { 'css_class' : 'highlight' }, 'markdown.extensions.extra' : {}, 'markdown.extensions.meta' : {}}, It specifies a default CSS class value highlight . The Python Markdown package transforms code block in a markdown file to html segment like below. The CodeHilite plugin does the work, and it actually calls the Pygments package to generate the html code. Specifically, Line 122 of the CodeHilite plugin source code file codehilite.py calls highlight function in the Pygments package. < div class = \"highlight\" > < pre > < code > < span class = \"k\" > if </ span > < span class = \"vm\" > __name__ </ span > ... </ code > </ pre > </ div > The html template should link to the styles.css file discussed earlier in the article, so the generated html code section has the specified CSS styles. If you use default Pelican configuration, the -a .codehilite option of the first pygmentize command should be -a .highlight . It is also interesting to find that the Markdown Python package does not list Pygments package as a dependent, while Pelican itself lists Pygments as a dependent. If you use pipenv manage virtual environment, the command pipenv graph lists dependent packages as follows. Markdown==3.2.1 - setuptools [required: >=36, installed: 46.1.3] pelican==4.2.0 - blinker [required: Any, installed: 1.4] - docutils [required: Any, installed: 0.16] - feedgenerator [required: >=1.9, installed: 1.9.1] - pytz [required: >=0a, installed: 2020.1] - six [required: Any, installed: 1.14.0] - jinja2 [required: >=2.7, installed: 2.11.2] - MarkupSafe [required: >=0.23, installed: 1.1.1] - pygments [required: Any, installed: 2.6.1] - python-dateutil [required: Any, installed: 2.8.1] - six [required: >=1.5, installed: 1.14.0] - pytz [required: >=0a, installed: 2020.1] - six [required: >=1.4, installed: 1.14.0] - unidecode [required: Any, installed: 1.1.1] ... This page has five code sections, and you can see code highlighting effects in the middle three sections.","tags":"posts","url":"https://www.georgexyz.com/code-highlight-in-pelican.html","loc":"https://www.georgexyz.com/code-highlight-in-pelican.html"},{"title":"Fujitsu Scanner Fi-7160 Software","text":"A few years ago I purchased a Fujitsu fi-7160 document scanner for home use. Occasionally I use it to scan a few pages at home and I only use very basic function. The scanner is used much often in the past few weeks since I start working from home. The scanner itself is excellent, however the software coming with it and instructions are horrible. Yesterday I spent a few hours trying to figure out the software. The Fijitsu website has a list of drivers and applications to download. Here is a screenshot of the list. My computer still has very old version of software that was installed from a CD in the original package. The last item on the above list \"fi Series Online Update 1.2.23\" will automatically update several software to latest version and updated firmware of the scanner. After trying out items on the list and doing some Google searches, here are my understanding on how they work. PaperStream Capture main scan software provided by Fujitsu. You can configure the scanner such as resolution, paper size, punch hole removal etc. in this software. PaperStream IP ( TWAIN and ISIS ) scanner driver for Windows, needed for scanner to work. ScanSnap Manager this software configures how the Scan/Enter button work. Need reboot computer after installation for it to work. ABBYY FineReader third party OCR software, which work with ScanSnap Manager . ScandAll PRO third party software which is similar to a strip down version of Adobe Acrobat, not as powerful as PaperStream Capture . Scanner Central Admin (agent and console) this software seems to upload scanned documents to a network location, not useful for me. Scan to Microsoft SharePoint it is also network related. I found a youtube video on how to configure ABBYY FineReader with ScanSnap Manager and use the OCR function. You can configure the scan button to automatically scan the document, perform OCR , and save it to a specified folder. The tricky part is that the ScanSnap Manager software is disabled if PaperStream Capture is open. You need to exit PaperStream Capture before enable Scansnap Manager. It takes me sometime to figure that out.","tags":"posts","url":"https://www.georgexyz.com/scanner-fi-7160.html","loc":"https://www.georgexyz.com/scanner-fi-7160.html"},{"title":"GIMP Tips","text":"GIMP is a free and open source image manipulation software. I only use a small subset of functions of the software. Here are some tips I keep a record for myself. Move Pixels In An Area Ctrl + Alt + Move Selection is the shortcut to move selected area of an image. GIMP adds a \"Floating selection\" temporary layer in the layer dialog. After you make the change, click the mouse in another area to confirm the move. The temporary layer merges onto the main layer. Add White Background After Deleting An Area Sometimes GIMP leaves a hole on an image when you delete the pixels in an area. Choose menu item Layer > Transparency > Remove Alpha Channel and the area will show white background. Remove Background Grey Hue Some scanned image file has a grey hue on the background. The Colors > Curves tool can be used to remove the background. Resize Image to a Certain Size If you want to resize a scanned plan image file to a certain size such as Arch D (36\" x 24\"), you can follow those steps. Click on menu item Image > Canvas Size to resize canvas to a larger size (e.g., 36\" x 24\"), and choose white background and center the image. Select an area of image including the borders. Copy and paste the image pixels onto a new layer. Choose menu item Layer > Scale Layer to enlarge the layer to canvas size. It seem that setting Interpolation to None works better for scanned plans. Merge down the image layer to the background layer. This article will be continuously updated (last update: 8/24/2020).","tags":"posts","url":"https://www.georgexyz.com/gimp-tips.html","loc":"https://www.georgexyz.com/gimp-tips.html"},{"title":"Pelican Cache Module","text":"Pelican cache module ( cache.py ) is relatively independent of other modules. It uses pickle module to serialize data and logger module to output debug and warning message. The module defines two classes FileDataCacher and FileStampDataCacher . The FileStampDataCacher class derives from FileDataCacher class and adds file stamp to serialized data. File stamp could be modified time or a hash value of file content. The classes have four methods __init__ , get_cached_data , cache_data , and save_cache . The concept code below shows how they work. content = get_cached_data(path) if content is None: content = read(path) cache_data(path, content) save_cache() The Pelican documentation has a section \" Reading only modified content \" on how to use caching. You should at least set those two setting values to True to turn on caching. CACHE_CONTENT True to save cache; default is False. LOAD_CONTENT_CACHE True to load cache; default is False. Other cache related settings are listed below. CACHE_PATH default is cache ; caching files are saved in this directory. CONTENT_CACHING_LAYER Readers and CachingGenerators classes are derived from FileStampDataCacher . You can set the value to ‘reader' or ‘generator'; default value is reader . GZIP_CACHE use GZIP package to compress caching file; default is True. CHECK_MODIFIED_METHOD method to check if a file is modified sincing last caching; default is mtime . The value can be a method name in hashlib module such as md5 or sha256 . The initialization method of both classes has four arguments. Unfortunately those arguments do not have default values, which make them difficult to use in other python projects. These 4 arguments are listed below. It seems that only cache_path argument is mandatory. settings a dict of settings, a few keys CACHE_PATH , GZIP_CACHE , and CHECK_MODIFIED_METHOD are required for the class. cache_path the file name to cache. caching_policy bool value to decide saving cache. load_policy bool value to decide loading cache. You can derive a class from FileStampDataCacher and add default values for three arguments of __init__ method. from pelican.cache import FileStampDataCacher class FileCacher ( FileStampDataCacher ): def __init__ ( self , cache_name , settings = { 'CACHE_PATH' : 'cache' , 'GZIP_CACHE' : True , 'CHECK_MODIFIED_METHOD' : 'mtime' # or sha256, sha512 }, caching_policy = True , load_policy = True ): super ( FileCacher , self ) . __init__ ( settings , cache_name , caching_policy , load_policy ) Here is an exmple to test the derived class. if __name__ == '__main__' : cacher = FileCacher ( 'cache_file' ) # filename of cache content = cacher . get_cached_data ( './pelican_help.txt' ) print ( f 'content is { content } ' ) if content is None : with open ( './pelican_help.txt' , 'r' ) as f : content = f . read () cacher . cache_data ( './pelican_help.txt' , content ) cacher . save_cache () The Pelican documentation cautions the use of cache module. The cache.py file in Pelican 4.2.0 has not been modified since 2015. It may be useful when a website has thousands of pages. I personally do not have a use case for the cache module yet.","tags":"posts","url":"https://www.georgexyz.com/pelican-cache-module.html","loc":"https://www.georgexyz.com/pelican-cache-module.html"},{"title":"Typogrify Python Package","text":"Typogrify Python package is automatically called within Pelican when the setting TYPOGRIFY is true. The typogrify function is called in Readers.read_file method of readers.py file. The function acts as a filter and the code looks like this. content, metadata = read(filename) if setting['TYPOGRIFY']: from typogrify.filters import typogrify content = typogrify(content) metadata['title'] = typogrify(metadata['title']) metadata['summary'] = typogrify(metadata['summary']) The typogrify function calls other 5 filters in the package: amp , smartypants , caps , initial_quotes , and widont . The documentation on github is clear on what amp , caps , and initial_quotes do. The smartypants filter is the most important one in Typogrify package. It is a separate Python package, which is a port of SmartyPants Perl program written by John Gruber (who is known as the inventor of the Markdown language). The smartypants documentation on github has information on how to use the Python package. The documentation on John Gruber's website is more clear on what the program does. SmartyPants can perform the following transformations: Straight quotes ( \" and ' ) into \"curly\" quote HTML entities Backticks-style quotes ( `` like this '' ) into \"curly\" quote HTML entities Dashes (\" -- \" and \" --- \" ) into en- and em-dash entities Three consecutive dots (\" ... \" ) into an ellipsis entity The widont filter is also interesting. It is \"based on Shaun Inman's PHP utility of the same name, replaces the space between the last two words in a string with & nbsp; to avoid a final line of text with only one word\". I do not need this filter for this blog site, so I write a short Pelican plugin to remove the widont filter. Here is the code. from pelican import logger from pelican import signals from typogrify import filters from typogrify.filters import process_ignores, applyfilters def init_rmwidont(sender): logger.debug('Init rmwidont Plugin') def register(): signals.initialized.connect(init_rmwidont) def typogrify(text, ignore_tags=None): section_list = process_ignores(text, ignore_tags) rendered_text = \"\" for text_item, should_process in section_list: if should_process: rendered_text += applyfilters(text_item) else: rendered_text += text_item ## Remove widont here return rendered_text # widont(rendered_text) filters.typogrify = typogrify","tags":"posts","url":"https://www.georgexyz.com/typogrify-python-package.html","loc":"https://www.georgexyz.com/typogrify-python-package.html"},{"title":"Tipue Search for Pelican Web Site","text":"Pelican has a very nice documentation site . However Pelican itself is not the tool that generates the site, instead it is created with the Sphinx python documentation tool. The site has a nice search function. I wonder how to add such a search feature to a static site. A little online research reveals that Pelican plugin github repo has a tipue-search plugin. The Tipue Search tool itself has a nice website and documentation. I spend a few hours reading the documentation and try to figure out how this tool works. The tipue-search Pelican plugin creates a js file tipuesearch_content.js which defines a js variable tipuesearch . The variable is assigned a large js object containing all search data. The plugin uses BeautifulSoup to parse html title and content of posts and pages generated in Pelican. The size of the file tipuesearch_content.js obviously depends on the number of pages on a website. The 41 posts on this site result in a 144 KB js file. The Tipue Search tool is mainly a js program. The web page will download the tipuesearch_content.js file first, and Tipue Search tool will search the data and present the results on the page. The package also includes a nice CSS file which formats the search box and search results. Below are the steps on how to setup the tool for a blog site like this one. Install BeautifulSoup in python virtual environment. Copy tipue_search directory ( include three files __init__.py , README.rst , and tipue_search.py ) to the plugin subdirectory under project directory. Revise one line and add one additional line of code in pelicanconf.py . Pelican will load the plugin and generate the tipuesearch_content.js file in output directory. PLUGIN_PATHS = ['plugin/', ] PLUGINS=['related_posts', 'tipue_search'] DIRECT_TEMPLATES = ['index', 'tags', 'categories', 'authors', 'archives', 'search'] Add a search.html file to the theme templates directory ( see file on github repo ). The contents of this file is very similar to the demo page of Tipue Search. I also adjusted a few lines of code in base.html to fit the needs of this new search.html file. Pelican will automatically generate a corresponding search.html in output directory. Copy Tipue Search tool directory tipuesearch (including 4 js files and 1 css file) to theme static directory. Pelican will automatically copy them to theme/tipuesearch under output directory during site generation. Add a link on the Articles page and Tags page which will open the search.html page. If you want to try out the Tipue Search tool, click the link here . After adding the tipue search to this blog site, I find the search function is really convenient even for a small blog site like this. I use it all the time to find articles I write before. Every web site should provide some kind of search function for users. Related: Search Tool","tags":"posts","url":"https://www.georgexyz.com/tipue-search-pelican.html","loc":"https://www.georgexyz.com/tipue-search-pelican.html"},{"title":"Python Program to Create New Pelican Post","text":"Pelican comes with a nice command line tool pelican-quickstart . It generates a starter project including pelicanconf.py , publishconf.py , tasks.py , and other files and directories. The source code file pelican_quickstart.py is a nice example on how to create similar programs. It is not difficult to write a program which generates a new Pelican starter post. The benefit of the program is that it can automatically fill some meta fields. It can also present a list of tags that already used in other posts, and the user can pick one or more tags from the list. In addition, each post will have consistent meta fields. I write the newpost.py python program for this purpose. Here is how to run the program. (georgexyz.com) george@desktop:~/Desktop/georgexyz.com$ python newpost.py Welcome to pelican-post v4.2.0. This script will help you create a new pelican post. Please answer the following questions so this script can generate the post. > Where do you want to save the markdown file? [content/posts] > What will be the title of this post? [NEW TITLE] Python Program to Create New Pelican Post > What will be the slug of this post? [python-program-to-create -new-pelican-post]create-new-pelican-post > What will be the date/time of the post? [2020-05-02 15:47] The newpost.py program calls Pelican itself to read all existing posts and presents the tags on a list. Before using the program, I usually open the \"Tags\" page of my blog website to pick one or more tags for the new post. The program can also generate a related_posts meta field if a user chooses to do so. Feel free to copy and modify the program for your own site. > Tags already used in other posts (choose one or more): 1 -> WSGI 2 -> bash 3 -> books 4 -> bootstrap 5 -> django 6 -> flask 7 -> inkscape 8 -> javascript 9 -> linux 10 -> linux mint 11 -> pelican 12 -> python 13 -> software utility 14 -> traffic engineering 15 -> ubuntu 16 -> vim 17 -> web development > Choose one or more tags (e.g. 1, 4) 0 to enter new tag(s) [0] 11, 12 > Do you want to add related posts? (y/N) y > Posts with same tags (choose one or more) 1 -> Pelican Related Posts and&nbsp;Translation 2 -> Print Python Source Code on&nbsp;Paper 3 -> Pelican Source Code and&nbsp;Plugin ...... > Choose one or more articles (e.g. 1, 3) 0 to cancel [0] 1 > Add a number for the post (start from 1) [41] > Add a short note to yourself for this post? [note to be added] A post about how to create new Pelican post. > Write the first sentence of the article [This is the first sentence ...] Done. Your new post is available at content/posts (georgexyz.com) george@desktop:~/Desktop/desktop/georgexyz.com$","tags":"posts","url":"https://www.georgexyz.com/create-new-pelican-post.html","loc":"https://www.georgexyz.com/create-new-pelican-post.html"},{"title":"Pelican Related Posts and Translation","text":"The Pelican source code has a related_posts attribute defined in the Generator class. The variable is initialized as a blank list and is not used in the program. I do a Google search and find a plugin called related_posts in the pelican plugin repo. The related_posts plugin has a one page documentation . Related Posts Plugin Related posts could be a useful function for a blog site like this. When I start a new blog post, it is often related to a previous post. It's logical to add links to previous related posts either on a sidebar or at the bottom of the new article. Here are the steps to setup the plugin. Create a sub-directory plugin in the project directory. Copy the related_posts directory to the plugin . It includes three files __init__.py , related_posts.py , and Readme.rst . In this site, posts with same tags should not be counted as related posts, so I comment out the lines 37 to 53 in the related_posts.py file. Add the following settings to pelicanconf.py . PLUGIN_PATHS = ['plugin/', ] PLUGINS=['related_posts',] Add the following html snippet to the article.html template file after statement {{ article.content }} . {% if article.related_posts %} <div class=\"mt-5 border-top\"> <h3>Related Posts:</h3> <ul> {% for related_post in article.related_posts %} <li><a href=\"{{ SITEURL }}/{{ related_post.url }}\"> {{ related_post.title }}</a></li> {% endfor %} </ul> </div> {% endif %} Add a meta field to the post. The contents of the field are slugs of previous posts. related_posts: print-source-code-paper, pelican-source-code-plugin, ... After those steps, each article will have a section \"Related Posts\" like on this page if the post includes a meta field related_posts . Translation This site does not have any translated articles. But I find it is not difficult to translate articles to other languages with Pelican after reading the source code. You can set a meta field such as lang: es for a translated article. The article should have the same slug as the original one. Then, you can add the following html snippet on the artilce.html template. The page will have a link to the translated article in another language. {% if article.translations %} <hr> {% for art in article.translations %} <p><a href=\"{{ art.url }}\">{{ art.title }}</a> in language {% if art.lang == 'en' %} English {% elif art.lang == 'es' %} Spanish {% endif %} </p> {% endfor %} {% endif %}","tags":"posts","url":"https://www.georgexyz.com/pelican-related-posts-translation.html","loc":"https://www.georgexyz.com/pelican-related-posts-translation.html"},{"title":"Print Python Source Code on Paper","text":"I am reading Pelican source code. Sometimes I do not have a computer nearby, and I want to print out the source code on paper. The current release of Pelican is version 4.2.0. The source code is available on github . After you git clone the code to local drive, you can run the following Linux command to have a basic idea of the code base. The number of lines of Pelican 4.2 code is 5,762. The file generators.py is the longest with 937 lines. The main code base has 15 python files. $ git clone https://github.com/getpelican/pelican.git $ git checkout 4.2.0 ## code is on master branch by default $ cd pelican $ find . -maxdepth 1 -name '*.py' -exec wc -l '{}' + | sort -n 10 ./__main__.py 52 ./signals.py 95 ./rstdirectives.py 133 ./urlwrappers.py 141 ./cache.py 143 ./server.py 163 ./paginator.py 269 ./log.py 278 ./writers.py 578 ./__init__.py 615 ./contents.py 668 ./settings.py 759 ./readers.py 921 ./utils.py 937 ./generators.py 5762 total A Google search finds this article Print Out Your Code On Paper on medium.com. The author made some good points in the article. It also introduces a piece of Unix/Linux command line software called enscript , which can covert text code to postscript file. A typical command looks like this, enscript -1rG --line-numbers -p out.ps --highlight=python \\ -c inputfile.py A furthur Google search finds an online man page for enscript . The page has detailed infomation regarding the software options and configuration files. The default fancy header configuration file enscript.hdr is stored in the directory /usr/share/enscript/ . I want to change the date and time on the left corner to current date/time. Also I want to change the page number on the right corner to \"number of pages processed so far\" rather than the default \"current page numbers\". An easy way is to copy the enscript.hdr to a new enscript_mod.hdr file and copy back the modified file to the directory. I only change three lines of code in enscript_mod.hdr file. %Format: moddatestr %W %Format: modtimestr %C %Format: pagenumstr $p After that, I write a short python script to call the enscript command. The python code is shown below. #! python3 # # sudo cp enscript_mod.hdr /usr/share/enscript/ # the mod hdr file change the file mod date/time to current date/time # # note that the hdr file should be in configuration dir # see ubuntu manpage # http://manpages.ubuntu.com/manpages/precise/en/man1/enscript.1.html # # convert ps to pdf # ps2pdfwr pelican.ps pelican_print.pdf import os import subprocess # result of $ls -S -l *.py files = ''' -rw-r--r-- 1 george george 38186 Apr 23 17:00 generators.py -rw-r--r-- 1 george george 30603 Apr 23 17:00 utils.py -rw-r--r-- 1 george george 27685 Apr 23 17:00 readers.py -rw-r--r-- 1 george george 25993 Apr 23 17:00 settings.py -rw-r--r-- 1 george george 23017 Apr 23 17:00 contents.py -rw-r--r-- 1 george george 22475 Apr 23 17:00 __init__.py -rw-r--r-- 1 george george 11345 Apr 23 17:00 writers.py -rw-r--r-- 1 george george 8038 Apr 23 17:00 log.py -rw-r--r-- 1 george george 5466 Apr 23 17:00 paginator.py -rw-r--r-- 1 george george 5283 Apr 23 17:00 server.py -rw-r--r-- 1 george george 5247 Apr 23 17:00 cache.py -rw-r--r-- 1 george george 3980 Apr 23 17:00 urlwrappers.py -rw-r--r-- 1 george george 3026 Apr 23 17:00 rstdirectives.py -rw-r--r-- 1 george george 1770 Apr 23 17:00 signals.py -rw-r--r-- 1 george george 165 Apr 23 17:00 __main__.py ''' def fnlist ( files ): filenames = [] fns = files . split ( ' \\n ' ) for fn in fns : if fn : filename = fn [ 46 :] if filename . startswith ( '__' ): filenames . insert ( 0 , filename ) else : filenames . append ( filename ) # print(filenames) return filenames def main (): cwd = os . getcwd () os . chdir ( './pelican/pelican' ) filenames = ' ' . join ( fnlist ( files )) p1 = subprocess . run ( 'enscript --fancy-header=enscript_mod --line-numbers ' + \\ '-p ../../pelican_code_print.ps ' + \\ '--highlight=python ' + \\ f '--color=1 -c { filenames } ' , shell = True , capture_output = True ) print ( p1 . stdout . decode ()) os . chdir ( cwd ) if __name__ == '__main__' : main () After those steps. the final pdf file ( 277KB ) of Pelican 4.2 source code can be downloaded here . If you print it out, it will be 103 pages on letter size paper.","tags":"posts","url":"https://www.georgexyz.com/print-source-code-paper.html","loc":"https://www.georgexyz.com/print-source-code-paper.html"},{"title":"Pelican Source Code and Plugin","text":"Articles on this website before this one are all written in markdown format. I want to write some articles in reStructuredText (rst) format but the default docutils tool that comes with Pelican has a flaw causing me to stay away from the rst format. The problem is that the top title of an aritle (e.g. \"Pelican Source Code and Plugin\" on this page) is rendered as h2 html tag, and section title (e.g. \"Pelican Plugin\" section below) starts with h3 tag. It is designed this way since the start of the website. In a markdown file, I can add two # to specify a title as h2 . There is no easy way to specify the heading levels in rst files. The same problem is described in this question on github. Pelican Plugin When I am reading Pelican source code, I find that the Pelican class in the __init__.py file has an init_plugins method. This method calls each plugin's register function as shown below. def init_plugins ( self ): self . plugins = [] ...... for plugin in self . settings [ 'PLUGINS' ]: ..... plugin . register () self . plugins . append ( plugin ) The Pelican plugin page has an existing plugin headerid which implements a similar function. It adds anchor tags to headings in rst files. Override Docutils Method Google searching class names in the headerid plugin lead me to a very nice article reStructureText( RST ) Tutorial . This article discusses the exact same heading problem I have with the rst format and has code examples on how to solve it. It becomes easy for me to modify the code in this article to a Pelican plugin which is very similar to headerid . I name this new Pelican plugin headinglower which lowers the heading levels in rst files. Headinglower Code The headinglower plugin has two files. The __init__.py file only has one line of code. # __init__.py from .headinglower import * The headinglower.py file has the following code. # headinglower.py from pelican import readers , logger from pelican.readers import PelicanHTMLTranslator from pelican import signals from docutils import nodes def init_headinglower ( sender ): logger . debug ( 'Init Headinglower Plugin' ) def register (): signals . initialized . connect ( init_headinglower ) class ModPelicanHTMLTranslator ( PelicanHTMLTranslator ): def visit_title ( self , node ): \"\"\"Only 6 section levels are supported by HTML.\"\"\" close_tag = '</p> \\n ' if isinstance ( node . parent , nodes . topic ): self . body . append ( self . starttag ( node , 'p' , '' , CLASS = 'topic-title' )) elif isinstance ( node . parent , nodes . sidebar ): self . body . append ( self . starttag ( node , 'p' , '' , CLASS = 'sidebar-title' )) elif isinstance ( node . parent , nodes . Admonition ): self . body . append ( self . starttag ( node , 'p' , '' , CLASS = 'admonition-title' )) elif isinstance ( node . parent , nodes . table ): self . body . append ( self . starttag ( node , 'caption' , '' )) close_tag = '</caption> \\n ' elif isinstance ( node . parent , nodes . document ): self . body . append ( self . starttag ( node , 'h1' , '' , CLASS = 'title' )) close_tag = '</h1> \\n ' self . in_document_title = len ( self . body ) else : assert isinstance ( node . parent , nodes . section ) ## revise here, comment out ( - 1 ) h_level = self . section_level + self . initial_header_level # - 1 atts = {} if ( len ( node . parent ) >= 2 and isinstance ( node . parent [ 1 ], nodes . subtitle )): atts [ 'CLASS' ] = 'with-subtitle' self . body . append ( self . starttag ( node , 'h %s ' % h_level , '' , ** atts )) atts = {} if node . hasattr ( 'refid' ): atts [ 'class' ] = 'toc-backref' atts [ 'href' ] = '#' + node [ 'refid' ] if atts : self . body . append ( self . starttag ({}, 'a' , '' , ** atts )) close_tag = '</a></h %s > \\n ' % ( h_level ) else : close_tag = '</h %s > \\n ' % ( h_level ) self . context . append ( close_tag ) readers . PelicanHTMLTranslator = ModPelicanHTMLTranslator The code add a method visit_title to the PelicanHTMLTranslator class. It overrides a method defined in HTMLTranslator class of docutils.writers._html_base module. Plugin Settings Add the following settings to the pelicanconf.py . Pelican will automatically load the plugin. PLUGIN_PATHS = ['plugin/', ] PLUGINS=['headinglower',] Better Way The above method works well and solves my problem. But there is a better and easier way to solve the exact problem. Pelican has over 100 settings, and one of them is DOCUTILS_SETTINGS . It is described on the documentation page as: Extra configuration settings for the docutils publisher (applicable only to reStructuredText). See Docutils Configuration settings for more details. The RstReader class in readers.py file of Pelican source code has a method _get_publisher . It has the following lines of code. extra_params = { 'initial_header_level' : '2' , 'syntax_highlight' : 'short' , 'input_encoding' : 'utf-8' , 'language_code' : self . _language_code , 'halt_level' : 2 , 'traceback' : True , 'warning_stream' : StringIO (), 'embed_stylesheet' : False } user_params = self . settings . get ( 'DOCUTILS_SETTINGS' ) if user_params : extra_params . update ( user_params ) I can simply set the initial_header_level value to 3 and the problem is solved. Add the following settings in the pelicanconf.py , the first section title heading will become h3 . Note the article title heading level h2 is actually set in the article.html template file. I also comment out the two plugin settings shown in the previous section. DOCUTILS_SETTINGS = {'initial_header_level': '3', } Rst File of This Article The rst file of this article is available on github. Click here to read the source file and click \"Raw\" button to see the text file.","tags":"posts","url":"https://www.georgexyz.com/pelican-source-code-plugin.html","loc":"https://www.georgexyz.com/pelican-source-code-plugin.html"},{"title":"New Pelican Theme","text":"This site has been online for more than one year. It is time to revise the pelican theme to present a new look. I spend a few hours revising the code, and now it is easier for myself to publish or revise articles. The Bootstrap theme css file is now compiled on my computer. It is not too difficult to compile Bootstrap scss to css. This 17 minute long youtube video explains it very well. Bootstrap 4 Theme Customization with Sass I install Node version of Sass and Minify in Linux Mint with these commands. The Minify tool removes extra blanks and line breaks in the css, and it also works for js and html files. $sudo npm install -g sass $sudo npm install -g minify #compile sass to css $sass main.scss main.css $minify main.css > main.min.css The main.scss for the new theme has those contents. $font-size-base: 1.1rem; $h5-font-size: $font-size-base * 1.0; $h4-font-size: $font-size-base * 1.1; $h3-font-size: $font-size-base * 1.4; $h2-font-size: $font-size-base * 1.6; $h1-font-size: $font-size-base * 1.8; $paragraph-margin-bottom: 1.2rem; $headings-margin-bottom: 1.0rem; $body-color: #111; $headings-color: #333; $link-color: #0017c7; $code-color: #15228a; $code-font-size: 88%; $print-page-size: letter; @import \"node_modules/bootstrap/scss/bootstrap\"; The light blue color of the navbar is set in the base.html file, which is copied from Bootstrap documentation. <nav class=\"navbar navbar-expand-md navbar-light\" style=\"background-color: #e3f2fd;\"> The pelicanconf.py file also has a few changes. I remove default index.html page and change the previous about page to new homepage. The Python Typogrify package makes \"double quotes\" and other html elements look better. # DEFAULT_PAGINATION = 3 INDEX_SAVE_AS = '' SUMMARY_MAX_LENGTH = 30 # link to this file in base.html # work computer blocks archives.html web page ARCHIVES_SAVE_AS = 'articlelist.html' TYPOGRIFY = True The tasks.py file created by the pelican-quickstart command has a livereload task, which requires installing a Python package with the same name livereload . The live reload function is really nice. This is something you do not think you need before trying it, but after trying it you fall love with it. The default setting only watches for markdown and RST file types, you can add html to the list of files to watch. I also change the github repo to SSH connection instead of HTTPS connection and add a public SSH key to the github account, so I do not need to type password when I update the github repo. This stackoverflow Q/A shows how to do it. How to Push to Github with SSH Key To end this post, below is a screen shot of this site with old theme.","tags":"posts","url":"https://www.georgexyz.com/new-theme-2020.html","loc":"https://www.georgexyz.com/new-theme-2020.html"},{"title":"What is RSS / ATOM Feed?","text":"The Pelican documention has a short section on ATOM / RSS feed. I have seen RSS / ATOM feed links somewhere before, but never paid much attention to them. A Google search finds these two nice introduction articles. A Few Simple Benefits of Using An RSS Feed How to Subscribe to or Read an RSS Site Feed or an ATOM Feed The first linked article has a sentence which explains the benefit of RSS / ATOM Feed very well. The main benefit of RSS is that instead of having to go out to each individual website and see if there is any new content, content comes to you in one centralized location. The Firefox web browser has an extension Feedbro which is easy to use. I subscribe five websites I often visit and it works well. Most major websites have RSS feeds available, and only one website I visit often does not have one. It is really easy to provide RSS feeds for this personal blog site because Pelican can generate feeds. In the pelican setting file, change SITEURL and FEED_ALL_ATOM settings to the values shown below to tell Pelican to generate feeds for all blog posts. SITEURL = 'https://www.georgexyz.com' FEED_ALL_ATOM = 'feeds/all.atom.xml' You can subscribe to the ATOM feed of this website thru this link https://www.georgexyz.com/feeds/all.atom.xml .","tags":"posts","url":"https://www.georgexyz.com/rss-feed.html","loc":"https://www.georgexyz.com/rss-feed.html"},{"title":"Python Dictionary Methods","text":"Some Python code I read yesterday uses dictionary methods copy and update . This prompted me to test those two methods and check all other python dictionary methods. Here is the code testing the two methods: >>> d = { 'a' : 1 , 'b' : 2 , 'c' : 3 } >>> d { 'a' : 1 , 'b' : 2 , 'c' : 3 } >>> d1 = d >>> d [ 'a' ] = 0 >>> d1 { 'a' : 0 , 'b' : 2 , 'c' : 3 } >>> d2 = d . copy () >>> d [ 'a' ] = 4 >>> d1 { 'a' : 4 , 'b' : 2 , 'c' : 3 } >>> d2 { 'a' : 0 , 'b' : 2 , 'c' : 3 } >>> d2 . update ({ 'a' : 4 , 'e' : 5 }) >>> d2 { 'a' : 4 , 'b' : 2 , 'c' : 3 , 'e' : 5 } >>> Python official documentation lists dictionary methods on the Built-in Types page. The page has a seciton Mapping Types - dict which lists all dictionary methods. The notable class methods are clear , copy , fromkeys , get , items , keys , pop , popitem , setdefault , update , and values . I found some interesting online documentation when searching for the topic. This blog post Copy a Python Dict with Updates has an example of copy and update methods. This stackoverflow Q&A discusses the same problem This webpage on W3schools.com has a list of python dictionary methods. Realpython.com has an article Dictionaries in Python which discusses the dictionary with more details. The dictionary is so fundamental in Python and programmers should become familar with those methods.","tags":"posts","url":"https://www.georgexyz.com/dict-methods.html","loc":"https://www.georgexyz.com/dict-methods.html"},{"title":"A Collection of Web Links","text":"This page has a collection of web links that I visit often. Flask Web Framework Official Flask Tutorial Official Flask Tutorial Source Code on Github The Flask Mega-Tutorial by Miguel Grinberg Flask Web Framework Book Source Code on Github Flask Extension Flask-Bootstrap Source Code Flask-Bootstrap still bundles with Bootstrap 3.X. Use Flask- BS4 instead. (4/4/2020) Flask Extension Flask- BS4 Source Code Flask Extension Flask-Moment Source Code Flask Extension Flask-SQLAlchemy Documentaion Flask Extension Flask-Migrate Documentation Flask Extension Flask-Mail Documentation Flask Extension Flask-Login Documentation Flask Tutorial by Corey Schafer on Youtube Flask Tutorial by Corey Schafer Source Code Python Language Automate The Boring Stuff with Python Think Python Python Quick Reference by Data School Python built-ins worth learning Transforming Code into Beautiful, Idiomatic Python Youtube Video Transforming Code into Beautiful, Idiomatic Python Code Google's Python Class Python 3 Module of the Week PyMOTW-3 The Python Tutorial on python.org Javascript Language Eloquent Javascript The Modern Javascript Tutorial Javascript.info Javascript Moment (Momentjs) Date and Time Display Library Tipue Search Tool HTML and CSS Front End Web Framework Bootstrap HTML & CSS Is Hard - Web Book Pelican Static Site Generator Pelican Python Source Code repo Pelican Documentation Full Stack Python Pelican Tutorial Pelican Resource Links on Full Stack Python Python Markdown Documentation Markdown and RST Reference Markdown Cheatsheet on Github Markdown Basic Syntax on Markdownguid.com reStructuredText Documentation reStructuredText Cheatsheet on Github Sphinx - Python Documentation Generator reStructuredText Tutorial on devdungeon.com docutils Documentation on readthedocs.io Database SQLAlchemy Documentation MySql Tutorial Website Git and Github An Intro to Git and Github for Beginners (Tutorial) by Meghan Nelson Intro to Git and Github for Python Developers on Realpython.com A Visual Git Reference Git Tutorial Youtube Video by Corey Schafer Git Command Reference on git-scm.com Pro Git Book on git-scm.com Date and Time For a Good Strftime Python datetime Module in PyMOTW-3 Others Google Input Tools","tags":"posts","url":"https://www.georgexyz.com/web-links.html","loc":"https://www.georgexyz.com/web-links.html"},{"title":"Two Flask Books by Miguel Grinberg","text":"This static blog site started on Github one year ago on April 1, 2009. It has been one year, and it is going better than I originally planned. The most frequent visitor of the site is most likely myself, and the site serves as an online notepad for myself. I recently finished reading two Flask books by Miguel Grinberg. The first one is Flask Web Development - Developing Web Applications with Python , and the second book is The new and Improved Flask Mega Tutorial . Both books are fantastic. They are better than every Django book I have read, and they are definitely among the top programming books. Here are some tips to work with the Flask Web Development source code flasky . $ git clone https://github.com/miguelgrinberg/flasky.git $ git checkout 8e $ git checkout -b exercise $ python -m venv venv $ source venv/bin/activate $ pip3 install -r requirements.txt $ source setup.sh # content see below $ flask db upgrade $ flask run The setup.sh file sets two environment variables. export FLASK_APP = flasky.py export FLASK_DEBUG = 1 echo \"setup FLASK_APP and FLASK_DEBUG\" If you run the commands above, the flask app will prompt errors because the configuration for the email smtp server is not complete. It is easier to setup a local smtp testing server than setup email accounts. Open a new terminal window and type the command below. The command invokes a standard python module smtpd and starts a debugging email server. $python -m smtpd -n -c DebuggingServer localhost:8025 In the config.py file, add three lines to the DevelopmentConfig section. class DevelopmentConfig(Config): DEBUG = True SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DATABASE_URL') or \\ 'sqlite:///' + os.path.join(basedir, 'data-dev.sqlite') MAIL_SERVER = os.environ.get('MAIL_SERVER', 'localhost') ### NEW MAIL_PORT = int(os.environ.get('MAIL_PORT', '8025')) MAIL_USE_TLS = False You also need to initialize database when running the code base after Chapter 9 and Chapter 12. The commands are shown below. $ flask shell >>> Role.insert_roles() >>> User.add_self_follows()","tags":"posts","url":"https://www.georgexyz.com/flask-books.html","loc":"https://www.georgexyz.com/flask-books.html"},{"title":"Geany Text Editor","text":"Geany is a lightweight editor mainly for programmers. I heard Geany editor from Python Crash Book and I liked it. The default settings of Geany in Ubuntu are not the best, and this post discusses my preferred settings. Here is the command to install Geany in Ubuntu. The current version in Ubuntu repo is 1.32. $sudo apt-get install geany The commands below install the latest version 1.35. $sudo add-apt-repository ppa:geany-dev/ppa $sudo apt-get update $sudo apt-get install geany Those two commands install some plugins for Geany. The addions is a must-have for a function I will discuss later in the post. $sudo apt-get install geany-plugins-common $sudo apt-get install geany-plugin-addons $sudo apt-get install geany-plugin-spellcheck Here are my preferred settings for Geany after the installation. This is under menu item Edit → Preferences . Editor → Features → Line breaking column : 80 Editor → Indentation → Type: Spaces Editor → Display → Display: Long line marker : 80 The menu item Tools → Plugin Manager has access to Plugins dialog, turn on Addons, File Browser, HTML Characters, and Spell Check options. Click menu item Edit → Plugin Preference and toggle on option Mark all occurrences of a word when double-clicking it . Windows text editor Notepad++ has this nice feature. Geany editor also has it, but it takes a little time to configure and turn on the feature.","tags":"posts","url":"https://www.georgexyz.com/geany-editor.html","loc":"https://www.georgexyz.com/geany-editor.html"},{"title":"A Simple Flask App - Temperature Converter","text":"I have been studying Flask web framework for some time. Today I decide to write a simple app and deploy it to a Digital Ocean web server under my control. The Flask app itself is very simple. It is a temperature converter which converts temperature in fahrenheit to celsius. The source code is on github and the link is here . You can access the live app via this link . The flask app follows the guidance on Miguel Grinberg's Flask Web Development book. The only difference is that I used Flask- BS4 instead of Flask-Bootstrap package because Flask-Bootstrap is still based on Bootstrap 3. It does not have a database backend. The web server already have a nginx server installed and configured for a static website. I followed this medium article to setup the nginx server and letsencrypt certification. At the time I set up the server, I did not really understand what I was doing. A few weeks ago I found this nginx setting article which details niginx settings very well. I added a location block to pass along (so called reverse proxy) http requests to the gunicorn WSGI server. location /convert { proxy_pass http://localhost:8001; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } The setting code above is from Miguel Grinberg's Flask Mega-Tutorial Chapter 17 . I followed step-by-step guides in this Chapter to set up tools on the server. I thought about setting up Docker containers, but decided not to do so after reading the chapter a few times. The main reason is that the Docker containers will incur a significant overhead on a $5/mo Digital Ocean server. William Shotts' book The Linux Command Line has a section on ssh, scp and sftp. It has a sentence \"the SFTP protocol is supported by many of the graphical file managers found in Linux distributions.\" I found FileZilla is easy to setup and easy to transfer files between a local computer and the server.","tags":"posts","url":"https://www.georgexyz.com/a-simple-flask-app.html","loc":"https://www.georgexyz.com/a-simple-flask-app.html"},{"title":"Python Counting With Dictionary","text":"When I am reading a realpython article Working With JSON Data in Python , I find an interesting python technique that reminds me something else I read before. It is called Counting With Dictionary by Raymond Hettinger in a python talk. A previous blog post has the links to the video and the note. Given a list such as colors below, colors = [ 'red' , 'green' , 'red' , 'blue' , 'green' , 'red' ] the python code should generate a dictionary. The keys of the dictionary are values in the list, and the values of the dictionary are the corresponding number of keys in the list. For the above example, the result dictionary d is { 'red' : 3 , 'green' : 2 , 'blue' : 1 } There are many ways to write the code. I will summarize these techniques below. Basic Way to Count The basic way is to set the d[color] to 0 when the dictionary sees the color first time. Total line count is 5. d = {} for color in colors : if color not in d : d [ color ] = 0 d [ color ] += 1 Get Method of Dictionary If the color is not in the dictionary, using d[color] to access its value raises a KeyValue exception. The dictionary get method returns the second argument when the first argument is not already in the dictionary. Line count is 3. d = {} for color in colors : d [ color ] = d . get ( color , 0 ) + 1 Use Defaultdict The standard collections package has a defaultdict class. The class sets a default value for a key. Line count is still 5. import collections d = collections . defaultdict ( int ) for color in colors : d [ color ] += 1 d = dict ( d ) Try and Except to Handle Exception The above three methods are from Raymond Hettinger's python talk. The method below is from the Real Python article I introduced earlier. This method takes 6 lines, but the logic is very clear. d = {} for color in colors : try : d [ color ] += 1 except KeyError : d [ color ] = 1 Setdefault Method of Dictionary This method is between the first two methods. Line count is also between 5 and 3. This method uses dictionary method setdefault , which is also discussed in Raymond Hettinger's python talk. d = {} for color in colors : d . setdefault ( color , 0 ) d [ color ] += 1 Python is very flexible to write once you know the basics, and there are always many ways to solve a problem. Counter Class in collections Module When I am browsing collections module documentation on python.org , I find a Counter class which is \"a counter tool provided to support convenient and rapid tallies\". from collections import Counter cnt = Counter ( colors ) d = dict ( cnt ) This method is probably the easiest and the line count is only 3.","tags":"posts","url":"https://www.georgexyz.com/python-count-with-dict.html","loc":"https://www.georgexyz.com/python-count-with-dict.html"},{"title":"Click Python Package","text":"I am reading Miguel Grinberg's Flask Mega Tutorial and Flask Web Development book and converting OpenSignTool to a flask app. The Click package is one of the tools created by Armin Ronacher and used by many developers as a standalone python package. I decided to read the Click documentation and build a simple command line interface for OpenSignTool. I found several resources to learn Click: Youtube Tutorial Video by Armin . Armin speaks fast, and I find 0.75 play speed is good for me. The video content is very good. Writing Python Command-Line Tools With Click . Seb Vetter wrote two articles about Click on dbader.org. This is the first one. Mastering Click: Writing Advanced Python Command Line Apps . This is Seb Vetter's second article on dbader.org. Both articles are fantastic. Here is what I come up with, # signtool_cli.py @click . command () @click . option ( '--width' , '-w' , default = 0 , help = 'Width of the sign in inches for output svg' ) @click . option ( '--ratio' , '-r' , default = 1.0 , help = 'Ratio to true scale when drawing the sign, default 1.0' ) @click . argument ( 'filename' , type = click . Path ( exists = True )) @click . argument ( 'output_filename' , type = click . Path ( writable = True ), required = False ) def cli ( width , ratio , filename , output_filename ): stream = open ( filename , 'r' ) d = yaml . safe_load ( stream ) ...... if output_filename is None : output_filename = pathlib . Path ( filename ) . with_suffix ( '.svg' ) out_file = open ( output_filename , 'w' ) out_file . write ( output_stream . getvalue ()) click . echo ( f 'Write the file to { output_filename } ' ) if __name__ == '__main__' : cli () This is the help message and command to run the app. (dev_cli) george@STK2M3:~/dev_cli$ python signtool_cli.py --help Usage: signtool_cli.py [OPTIONS] FILENAME [OUTPUT_FILENAME] Options: -w, --width INTEGER Width of the sign in inches for output svg -r, --ratio FLOAT Ratio to true scale when drawing the sign, default 1.0 --help Show this message and exit. (dev_cli) ... $ python signtool_cli.py --ratio 0.1 R2-1.yaml Write the file to R2-1.svg I also created a second python file to read all files under a directory and write results to another directory. # signtool_dir.py @click . command () @click . option ( '--width' , '-w' , default = 0 , help = 'Width of the sign in inches for output svg' ) @click . option ( '--ratio' , '-r' , default = 1.0 , help = 'Ratio to true scale when drawing the sign, default 1.0' ) @click . argument ( 'input_dir' , type = click . Path ( exists = True , dir_okay = True , file_okay = False )) @click . argument ( 'output_dir' , type = click . Path ( dir_okay = True ), required = False ) def cli ( width , ratio , input_dir , output_dir ): pathlist = pathlib . Path ( input_dir ) . glob ( '**/*.yaml' ) for filename in pathlist : stream = open ( filename , 'r' ) d = yaml . safe_load ( stream ) arg = dict_to_obj ( d ) ...... if output_dir is None : output_dir = input_dir output_filename = output_dir + pathlib . Path ( filename ) . stem + '.svg' out_file = open ( output_filename , 'w' ) out_file . write ( output_stream . getvalue ()) click . echo ( f 'Write the file to { output_filename } ' ) if __name__ == '__main__' : cli () Here is how to call this Click app. (dev_cli) george@STK2M3:~/dev_cli$ python signtool_dir.py --help Usage: signtool_dir.py [OPTIONS] INPUT_DIR [OUTPUT_DIR] Options: -w, --width INTEGER Width of the sign in inches for output svg -r, --ratio FLOAT Ratio to true scale when drawing the sign, default 1.0 --help Show this message and exit. (dev_cli) george@STK2M3:~/dev_cli$ python signtool_dir.py ./yaml/ ./svg/ Write the file to ./svg/W8-5P.svg Write the file to ./svg/R2-1.svg ......","tags":"posts","url":"https://www.georgexyz.com/package-click.html","loc":"https://www.georgexyz.com/package-click.html"},{"title":"Convert Python 2 Code to Python 3","text":"I am working on a personal project putting my OpenSignTool Inkscape python extension app online. I plan to wrap the python code into a Flask web app and make the code run on a web server. The extension app is written in Summer 2018 and mostly python 3 ready. However, they depend on several existing Inkscape extension modules. Those are all python 2 code written years ago by others. Specifically, the extension code depends on 6 python modules. These are simplestyle.py simplepath.py simpletransform.py inkex.py cubicsuperpath.py bezmisc.py Originally I plan to test my app in python 3.7 and fix any errors that pop up. I work on fixing the code for one hour or two, and find that this approach is too timing consuming even for a small code base of a few hundred lines of code. A little Google search finds that Python standard library includes a 2to3 tool that can do the job automatically. The documenation is pretty straightforward. This is the command I used to convert all python files in the current directory. $2to3 -o ../dev_py3 -W -n ./ The option -o is to specify the output directory, -W is for writing files even not changed, and -n means that backups are not needed. The tool is very useful, and it can figure out almost all changes. The place the tool has trouble figuring out is string encoding. I change a few places that involve string encoding, and the program runs perfectly in Python 3. The Inkscape project is upgrading the extension system to be Python 3 compatible. The new extension python code are available online.","tags":"posts","url":"https://www.georgexyz.com/py2-to-py3.html","loc":"https://www.georgexyz.com/py2-to-py3.html"},{"title":"Javascript App - Speed Limit","text":"I am reading Eloquent Javascript book by Marijn Haverbeke. It is a fantastic book, and some people describe it as \"a work of art\". It is probably the best programming book I recently read. The whole book is freely available on the website in HTML and PDF formats. Here is a quote at the beginning of Chapter 1 written by the author. It reads more like a poem rather than a sentence from a programming book. Below the surface of the machine, the program moves. Without effort, it expands and contracts. In great harmony, electrons scatter and regroup. The forms on the monitor are but ripples on the water. The essence stays invisibly below. - Master Yuan-Ma, The Book of Programming When I am reading Chapter 18 HTTP and Forms , I find that I can easily write a javascript app showing a speed limit sign. The speed limit is controlled by an option in a dropdown control. Speed Limit Sign App image/svg+xml Select Speed Limit: 5 MPH 10 MPH 15 MPH 20 MPH 25 MPH 30 MPH 35 MPH 40 MPH 45 MPH 50 MPH 55 MPH 60 MPH 65 MPH 70 MPH 75 MPH 80 MPH 85 MPH How Does It Work? The speed limit sign was created with Inkscape and OpenSignTool . The SVG file has 17 layers for different speed limit numbers from 5 MPH to 85 MPH . When the page loads, the javascript program picks a random speed and turns on the SVG layer with that speed. When a user chooses a speed on the dropdown box, the program turns off the previous layer and turns on the chosen layer. You can view the code by right click the webpage and choose \"View Page Source\" menu. Next step for the app is to add another dropdown control for file formats ( SVG , EMF , PNG ) and a download button for user to download a file to local computer. I also referenced those two online articles when working on this blog post. Using Javascript With SVG by Peter Collingridge. Making SVGs Responsive with CSS by Sara Soueidan.","tags":"posts","url":"https://www.georgexyz.com/speed-limit-js-app.html","loc":"https://www.georgexyz.com/speed-limit-js-app.html"},{"title":"HTML , CSS , and Others","text":"This post is an update on what I am working on. CSS Books I recently re-read the online book HTML / CSS Is Hard which is an excellent resource to learn CSS . Jon Duckett's Web Design with HTML and CSS book is a good introductory book, but it does not cover advanced CSS features. This online book covers these topics very well. The illustrations in the book are wonderful. I also read another CSS book CSS In Depth by Keith Grant which is also an excellent book. The basic rules of CSS are straightforward, but it is not easy to layout a nice webpage for both mobile devices and desktops. This book discusses many advanced topics in CSS . Wget to Download Website I searched and found an online article Q/A post \" How can I download an entire website \". The post has an answer which shows how to download a website to local hard drive with Linux command line tool wget. The command is shown below: wget -m -p -E -k www.excample.com -m : —mirror recursion and time stamping -p : all images -E : adjust extension -k : convert links for local file I tested the command on internetingishard.com and it worked well. This GNU Wget manual web page lists other recursive options. If you want to retrieval one level down, you can use options -r -l 1 instead of option -m . VS Code Vim has been my main text editor for some time. But it is not ideal for coding HTML / CSS webpages. VS code installed in Linux Mint works very well. It also has Emmet auto completion built in. It makes coding HTML / CSS much easier and faster. Youtube has a nice tutorial on how to use Emmet . The other nice feature of VS Code is that it is easy to install plugins. I installed Live Server Addon plugin with a few mouse clicks. It takes efforts to make plugins work in vim. Inkscape 1.0 Beta Testing Inkscape 1.0 Beta is out. I test it out in Windows and it crashes often. It is not ready for production work yet. The built in Python system has been upgraded to 3.7, which is long overdue. One plugin I wrote (Draw Sign Arrow) for Inkscape 0.9.2 works fine in Inkscape 1.0 beta without any changes. I plan to upgrade all my Inkscape python programs to 3.7 in near future.","tags":"posts","url":"https://www.georgexyz.com/html-css-others.html","loc":"https://www.georgexyz.com/html-css-others.html"},{"title":"Bash Command Line Editing Shortcuts","text":"I recently spent sometime reading two Linux command line books. The first is William Shotts' The Linux Command Line (2e) , and the second one is Learning the Bash Shell by Cameron Newbam and Bill Rosenblatt. Both books are good. The first book is written in a tutorial style and easy to understand. The second one is on Bash shell only and is more thorough. The Learning the Bash Shell book is in its third edition, and the book was published in April 2005. The first edition was published in 1995, so it is an old book. The third edition covers Bash 3.0. Bash 5.0 has already been released. However, most contents in the book still apply to current release. Chapter 2 of the book describes that Bash has two editing mode: emacs and vi. The default is emacs mode. When you open a Terminal window (Ctrl + Alt + T) in Ubuntu, the command line is in emacs editing mode. You can change it to vi mode by command set -o vi and change it back by set -o emacs . The emacs mode is adequate for most situations. The mode has some useful shortcuts (listed below) in addition to common ones like Tab, Arrow Up, Arrow Down. Ctrl + a : Move cursor to the beginning of the line Ctrl + e : Move cursor to the end Ctrl + r : Search command history (Reverse incremental search) Ctrl + j : Work with Ctrl + r , copy command to command line Ctrl + k : Delete from cursor to the end of the line Ctrl + u : Delete from the beginning of the line to cursor Ctrl + l : Clear the screen Ctrl + t : Transpose two character A reddit post \" do you use bash vi mode \" has some interesting discussion on whether to use vi mode. I personally think emacs mode with the above shortcuts is good enough.","tags":"posts","url":"https://www.georgexyz.com/bash-shortcuts.html","loc":"https://www.georgexyz.com/bash-shortcuts.html"},{"title":"Python Doctest","text":"Python doctest is easier to use than unittest and pytest. A developer writes the test cases in the documentation and doctest module verifies the results. There are examples in the Fluent Python book that use doctest, but I have not seen them used often. The Python Module of The Week web site has a page on doctest . It is a nice introduction on how to use doctest. The doctest module is useful in some situations. Below is a python file which includes a single function. The function has a docstring which also serves as doctest. #!/usr/bin/env python # nested_sum adds up elements from a list of lists of integers # file name: nested_sum.py def nested_sum ( t ): \"\"\" >>> t = [[1, 2], [3], [4, 5, 6]] >>> nested_sum(t) 21 \"\"\" total = 0 for ti in t : total += sum ( ti ) return total Run the python file with the following command in bash. Note the -m option loads doctest module. The -v option represents verbose. Without the -v option, the command outputs nothing. python -m doctest -v nested_sum.py Here are the doctest results: Trying: t = [[1, 2], [3], [4, 5, 6]] Expecting nothing ok Trying: nested_sum(t) Expecting: 21 ok 1 items had no tests: nested_sum 1 items passed all tests: 2 tests in nested_sum.nested_sum 2 tests in 2 items. 2 passed and 0 failed. Test passed.","tags":"posts","url":"https://www.georgexyz.com/python-doctest.html","loc":"https://www.georgexyz.com/python-doctest.html"},{"title":"Linux Mint Default Command Prompt String","text":"William Shotts' The Linux Command Line is an excellent book. It is written in a tutorial style and very easy to understand. The PDF file of the whole book is freely available online . Chapter 13 of the book discusses how to customize linux command prompt. The default command prompt is defined by an environment variable named PS1 . The PS1 is defined as a long string in Linux Mint (or Ubuntu). See the screenshot below: The PS1 string can be divided into three parts: \\[\\e]0;\\u@\\h: \\w\\a\\] ${debian_chroot:+($debian_chroot)} \\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ It is a little hard to understand the PS1 string even after reading the book chapter. A few Google searches find other people are also asking the meaning of the string, and it has already been answered by someone. \\[\\e]0;\\u@\\h: \\w\\a\\] sets the title bar of terminal \\[ starts a series of one or more non-printing characters \\e]0; is for setting terminal title, \\e is the same as \\033 \\u@\\h \\w means username@hostname and working directory \\a marks the end of the title \\] ends non-printing characters ${var:+value} means if $var is defined; then use value ; else do nothing. The debian_chroot on the second line is defined in the /etc/bash.bashrc file (discussed later in this article). \\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ is the actual command prompt \\033[01;32m is for color light green (Table 13-2 in the book) \\033[00m turns off color \\033[01;34m is for color light blue The variable debian_chroot is defined in the /etc/bash.bashrc file as: if [ -z \"${debian_chroot:-}\" ] && [ -r /etc/debian_chroot ]; then debian_chroot=$(cat /etc/debian_chroot) It means that if the variable $debian_chroot is empty and the file /etc/debian_chroot is readable, the variable is assigned the content of the file. Most explanations above are from two askubuntu web pages: question 404341 and question 372849 .","tags":"posts","url":"https://www.georgexyz.com/linux-command-prompt.html","loc":"https://www.georgexyz.com/linux-command-prompt.html"},{"title":"Python Pipenv Tool","text":"Pyenv is the tool I use to install multiple versions of python in Linux, and I have a short post on how to install pyenv . I simply use the python built-in tool venv to manage virtual environment. It works fine for most tasks. William Vicent recommends pipenv tool in his Django for Beginners book. Corey Schafer also favors pipenv in this youtube tutorials. I take a close look at the tool and I like it. Here are the links to two youtube videos and an article on real python website. Those are very nice resources to learn pipenv. Corey Schafer's Pipenv Tutorial Pipenv Author Kenneth Reitz's Pycon Talk on Pipenv Pipenv Tutorial on Realpython.com I will use pipenv to manage virtual environment and packages in my future projects. The shell script file for updating this website has been modified to like this: # commit_change.sh if [ -z \"$1\" ] # if no command line arg, exit then echo \"\\$1 is empty\" exit fi # pipenv shell # does not work pipenv run invoke clean build # see stack overflow 48056606 git status git add -A #echo $1 git commit -m \"$1\" git push origin master # update source code pipenv run ghp-import output -b gh-pages git push origin gh-pages The website is updated with the bash command: source commit_change.sh \"git commit message\" Here are some common pipenv commands: $pip install pipenv # global install $pipenv install requests # virtualenv in ~/.local/share/virtualenvs/... $pipenv shell $pipenv run python ... # no need to activate >>> import requests $pipenv install -r requirements.txt $pipenv lock -r > requirements.txt # create $pipenv install pytest --dev $pipenv uninstall requests $pipenv --python 3.6 $pipenv --rm # remove virtual env $pipenv install # from Pipfile $pipenv --venv # show path $pipenv check $pipenv graph # show dependency $pipenv install --ignore-pipfile When I am reading Miguel Grinberg's Flask Mega Tutorial Chapter 15 A Better Application Structure . He recommends to use a python package python-dotenv to load environment variables. Corey Schafer's tutorial video mentioned that pipenv can load environment variables as well. This Pipenv documentation page has a section Automatic Loading of .env . If a project directory has a .env file, pipenv commands $pipenv shell and $pipenv run will automatically load it. You can set the PIPENV_DOTENV_LOCATION to change the file location or file name. You can also set PIPENV_DONT_LOAD_ENV =1 to prevent pipenv from loading the .env file.","tags":"posts","url":"https://www.georgexyz.com/python-pipenv-tool.html","loc":"https://www.georgexyz.com/python-pipenv-tool.html"},{"title":"Django Model and Form Validation","text":"Django model and form validation is a somewhat complicated and confusing topic in Django app development. A developer needs to understand several basic concepts such as model, model field, form, model form, etc. to have a good understanding of validation. Most Django books and online tutorials do not have a good discussion on validation. Django official documentation has detailed descriptions on validation. However, the contents are dispersed on several places. This post describes the materials I have read on this topic. Validator Function The validator official documentation page is a good starting point to study model and form validation. The validator function is a callable that takes a value and raises a ValidationError if not validated. Here is an example from the page: from django.core.exceptions import ValidationError from django.utils.translation import gettext_lazy as _ def validate_even(value): if value % 2 != 0: raise ValidationError( _('%(value)s is not an even number'), params={'value': value}, ) from django.db import models class MyModel(models.Model): even_field = models.IntegerField(validators=[validate_even]) The subsection how validators are run on the validator page has three links. The second link validating objects is about model validation . The link points to a subsection on the model instance reference page. The first link form validation points to a separate page about form validation . The third link goes to the ModelForm page. Model Validation A model's full_clean() method performs model validation. The method calls three other methods: clean_fields() method clean() method, as a whole validate_unique() method The model save() method does NOT call full_clean() method automatically. A programmer needs to call it manually to trigger model validation like the below code. try: article.full_clean() except ValidationError as e: ... # handle the error A stack overflow answer shows a typical pattern to conduct custom model validation. The model class overrides the clean() method to provide custom model validation and the save() method to call full_clean method. The example code is shown below: class BaseModel(models.Model): # model fields def clean(self, *args, **kwargs): # add custom validation here super(BaseModel, self).clean(*args, **kwargs) def save(self, *args, **kwargs): self.full_clean() super(BaseModel, self).save(*args, **kwargs) Another stack overflow answer shows how to use custom model validation or simply use model field's built-in validator. Model field's validation will not kick in unless the full_clean() method is explicitly called. For example, the p2.save() below would not raise an exception when called. class PageModel(models.Model): name = models.CharField(max_length=50) slug = models.SlugField(max_length=50) >>> from page.models import PageModel #page app name >>> p1 = PageModel(name='Page1', slug='page1') >>> p1.save() >>> p2 = PageModel(name='Page2', slug='page2#$%') >>> p2.save() # no error >>> p2.full_clean() # raise exception Checking clean_fields() method source code, it has the following lines. The f.clean(...) method calls validation method on a model field. try: setattr(self, f.attname, f.clean(raw_value, self)) except ValidationError as e: errors[f.name] = e.error_list Form Validation While model validation is a subsection on a Django documentation page, the form validation is on a separate page. Form validation is normally executed when the is_valid() method is called on a form. A programmer can also trigger form validation by accessing errors attribute or call full_clean() method of a form. Form validation has a series of steps: to_python() method on a field, correct data type validation() method on a field run_validators() method on a field clean() method on a Field subclass, which calls above three methods and returns the clean data clean_<fieldname>() method has access to cleaned_data Python object and returns value that replaces data in cleaned_data clean() method of form, for multiple fields The same documetation page has several nice examples, which are based on the model shown below: class ContactForm(forms.Form): subject = forms.CharField(max_length=100) message = forms.CharField() sender = forms.EmailField() recipients = MultiEmailField() cc_myself = forms.BooleanField(required=False) The same page points out that \"there are special considerations when overriding the clean() method of a ModelForm subclass.\" Chapter 7 of Andrew Pinkham's Django Unleashed book, titled allowing user input with forms , has good example on how to override clean_<fieldname> method. The discussion on model validation and form validation in this chapter is better than other Django books I have read. ModelForm Validation The form validation steps described in the previous section also apply to ModelForm validation. In addition to that, Model.full_clean() method is triggered after the form's clean() method is called. So, model validation methods are not triggered by model save() method, but model validation methods are triggered by ModelForm validation. This stack overflow question discusses this exact issue. The accepted answer also has code example on model validation. Error messages at the form field level take precedence over the error messages defined at the model field level.","tags":"posts","url":"https://www.georgexyz.com/django-model-form-validation.html","loc":"https://www.georgexyz.com/django-model-form-validation.html"},{"title":"Linux Command Grep","text":"Grep command searches file contents to find lines that contain a pattern. The pattern is described in Regular Expression (regex) language. Here are three youtube video links about Grep and regular expressions. Brian Kernighan Youtube Talk on Grep Corey Schafer Linux Terminal Tutorial for Grep Nick Parlante's Python Regex Video Ryan's Tutorials website has a nice introduction to Grep and Regular Expression . Note egrep is a shortcut to grep -E in Ubuntu. The man page of grep describes that \"in GNU grep there is no difference in available functionality between basic and extended syntaxes\". $which egrep /bin/egrep $file /bin/egrep /bin/egrep: POSIX shell script, ASCII text executable $vim /bin/egrep # file content is #!/bin/sh exec grep -E \"$@\" Here is a very simple grep example: $grep \"Jane Williams\" filename.txt The grep command has many options. A few common ones are: -w : Whole word -i : ignore case -n : line number -B 4 : 4 lines before -A 4 : 4 lines after -C 2 : 2 lines before, 2 lines after The filename.txt in the above example could be either ./* or ./*.txt . For example, this command will search current directory and subdirectories. $grep -winr \"Jane Williams\" ./ Here are a few more options: -r : recursive -l : file name only -c : count, print a count You can use pipes to search the results of another command. $history | grep \"git commit\" The grep -P option interprets the pattern as a Perl-compatible regex. The Python and Perl \"essentially has the same regex syntax\". So with the -P option turned on, the grep command will accept Python style special characters in pattern. Here is a list of common regex special characters in Python: .(dot) : any char \\w : word char ‘A-Za-z0-9_' \\d : digit \\s : white space * : zero or more + : one or more Update on 8/28/2020: Today I want to see how many blog posts I have written this year and compare the number with last year. I want to search date: 2020- , but find grep does not like the character - . A Google search with phrases \"grep search dash\" finds an stackoverflow post . It turns out that the dash character needs to escape twice like this date: 2020\\\\- . So the command to tally blog posts becomes like this, grep -r \"date: 2020\\\\-\" | wc -l grep -r \"date: 2019\\\\-\" | wc -l The result is 26 v.s. 26. The 2019 only covers 9 months starting from 4/1 and 2020 covers 8 months so far, so it is close.","tags":"posts","url":"https://www.georgexyz.com/linux-command-grep.html","loc":"https://www.georgexyz.com/linux-command-grep.html"},{"title":"Django Pagination","text":"Merriam-Webster dictionary defines pagination as \"the action of paging\". In web design world, pagination means separating a large list of contents onto different pages for easy web navigation. Django provides a few classes that help you manage pagination. The official documentation has one page on Pagination . The source code is in one file django/core/paginator.py, which has 195 lines (version 2.2.2). The Paginator and Page classes defined in this file are very good python class examples. The Paginator class has those public methods: validate_number get_page : calls page method, handles exception page : page number is 1-based count : cached_property num_pages page_range The Page class is derived from collections.abc.Sequence, and it has those public methods: has_next has_previous has_other_pages next_page_number previous_page_number start_index end_index The Page class also defines __len__ and __getitem__ methods, and it has three attributes: object_list, number, and paginator. Chapter 14 of Django Unleashed book covers how to use the django pagination in detail. An online article How to Paginate with Django is also a nice summary on how to use paginator. In class based views, all it takes is to add one line of code to use Django paginator. paginate_by = 10 The template will be rendered with a context object with those contents: context = { 'paginator': paginator, 'page_obj': page, 'is_paginated': is_paginated, 'object_list': queryset } The context object is defined in the get_context_data method of MultipleObjectMixin. The queryset value of context dictionary is returned by paginate_queryset method, and it is page.object_list . You can easliy navigate the source code on this Class CBV website .","tags":"posts","url":"https://www.georgexyz.com/django-pagination.html","loc":"https://www.georgexyz.com/django-pagination.html"},{"title":"Django Messages Contrib App","text":"Django messages app is used to \"display one-time notification message to the user after processing a form or some other types of user input.\" Django official documentation has a page the messages framework for the app. How to Use Messages App Chapter 11 of Django Unleashed book utilizes the app to convey a message that an email has been successfully sent. The code is easy to understand. The view adds a success message to the message queue. The next web page (redirected page blog_post_list ) will show the message. # contact/views.py ... from django.contrib.messages import success class ContactView ( View ): .... def post ( self , request ): bound_form = self . form_class ( request . POST ) if bound_form . is_valid (): mail_sent = bound_form . send_email () if mail_sent : success ( request , 'Email successfully sent.' ) # <------ return redirect ( 'blog_post_list' ) # <------ return render ( request , self . template_name , { 'form' : bound_form } ) The code to show the messages is in the base.html file, and all web pages extended from the base.html will show the messages. < ul > {% for message in messages %} {% if message.tags %} < li class = \"{{ message.tags }}\" > {% else %} < li > {% endif %} {{ message }} </ li > {% endfor %} </ ul > The code above is very similar to the code shown on the Django official documentation page (shown below). {% if messages %} <ul class=\"messages\"> {% for message in messages %} <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}> {{ message }}</li> {% endfor %} </ul> {% endif %} Source Code Files The source code for the messages app is in the django/contrib/messages directory. It consists of 13 python files, and the total line count is 647 in Django 2.2.2. george@STK2M3:~$ find . -name '*.py' -exec wc -l {} + 26 ./middleware.py 4 ./__init__.py 21 ./constants.py 96 ./api.py 18 ./views.py 13 ./context_processors.py 12 ./utils.py 7 ./apps.py 170 ./storage/base.py # <----- backend storage 12 ./storage/__init__.py 48 ./storage/session.py 166 ./storage/cookie.py 54 ./storage/fallback.py 647 total Messages App API The __init__.py file imports all from api.py and constants.py. The api.py file defines the API of the messages app, which includes those functions: add_message get_message get_level set_level debug, info, warning, success, and error (call add_message) The functions shows that the attribute _message of request is the message storage. The constants.py defines a few constants: # messages/constants.py DEBUG = 10 INFO = 20 SUCCESS = 25 WARNING = 30 ERROR = 40 DEFAULT_TAGS = { DEBUG : 'debug' , INFO : 'info' , SUCCESS : 'success' , WARNING : 'warning' , ERROR : 'error' , } DEFAULT_LEVELS = { 'DEBUG' : DEBUG , 'INFO' : INFO , 'SUCCESS' : SUCCESS , 'WARNING' : WARNING , 'ERROR' : ERROR , } The middleware.py code is an good example of how to write a middleware for Django. The class derives from MiddlewareMixin and defines two methods process_request and process_response . The process_request adds _messages attribute to the request and process_response stores the messages by calling update method of _message and raises an exception if messages are not all stored. # messages/middleware.py from django.conf import settings from django.contrib.messages.storage import default_storage from django.utils.deprecation import MiddlewareMixin class MessageMiddleware ( MiddlewareMixin ): \"\"\" Middleware that handles temporary messages. \"\"\" def process_request ( self , request ): request . _messages = default_storage ( request ) def process_response ( self , request , response ): \"\"\" Update the storage backend (i.e., save the messages). Raise ValueError if not all messages could be stored and DEBUG is True. \"\"\" # A higher middleware layer may return a request which does not contain # messages storage, so make no assumption that it will be there. if hasattr ( request , '_messages' ): unstored_messages = request . _messages . update ( response ) if unstored_messages and settings . DEBUG : raise ValueError ( 'Not all temporary messages could be stored.' ) return response The context_processor.py defines a function messages which simply returns a dictionary of two context variables. # messages/context_processor.py from django.contrib.messages.api import get_messages from django.contrib.messages.constants import DEFAULT_LEVELS def messages ( request ): \"\"\" Return a lazy 'messages' context variable as well as 'DEFAULT_MESSAGE_LEVELS'. \"\"\" return { 'messages' : get_messages ( request ), 'DEFAULT_MESSAGE_LEVELS' : DEFAULT_LEVELS , } The views.py defines a SuccessMessageMixin, which adds a success message attribute to class based views. It is probably easier for a programmer to call success API method directly to add a message. The utils.py file defines a get_level_tags function which returns a dictionary of level tags. Messages Backend Storage The interesting part of the messages app is its storage. The __init__.py in the storage defines a default_storage function. # messages/storage/__init__.py from django.conf import settings from django.utils.module_loading import import_string def default_storage ( request ): \"\"\" Callable with the same interface as the storage classes. This isn't just default_storage = import_string(settings.MESSAGE_STORAGE) to avoid accessing the settings at the module level. \"\"\" return import_string ( settings . MESSAGE_STORAGE )( request ) The grep command results show that MESSAGE_STORAGE is assigned FallBackStorage class which is defined in the fallback.py file. george@STK2M3:~/Desktop/django-2.2.2$ grep -nr 'MESSAGE_STORAGE' ./ ./django/contrib/messages/storage/__init__.py:9: This isn't just default_storage = import_string(settings.MESSAGE_STORAGE) ./django/contrib/messages/storage/__init__.py:12: return import_string(settings.MESSAGE_STORAGE)(request) ./django/conf/global_settings.py:554:MESSAGE_STORAGE = 'django.contrib.messages.storage.fallback.FallbackStorage' The import_string function is defined in the module_loading.py file, which \"imports a dotted module path and return the attribute/class designated by the last name in the path.\" The base.py file defines Message class, which has three attributes: level, message, and extra_tags. It also defines BaseStorage class, which is an abstraction of messages storage. Two methods of the class _get and _store are placeholders and they must be overridden. To understand code in the BaseStorage class, we need to think about how an object of Message class is instantiated, stored, and retrieved. Here are the steps in which methods in BaseStorage are called. A request comes to Django. Messages middleware initializes a default_storage backend and assigns it to the _messages attribute of request. The add_message method of message API is called. It calls the add method in BaseStorage, which changes added_new attribute to True and append the message into the _queued_messages list. If the view function does not call the template render function, the __iter__ method of BaseStorage is not called. The process_response method of middleware class calls update method of BaseStorage, which stores unread messages. Let's assume messages are saved in a cookie (session works in a similar way). They are stored in client's browser storage, not on the server. A new request comes in, Django does the same as step 1. The view function calls the template render method, which calls the __iter__ method of BaseStorage. It changes used attribute to True . The _queued_messages is empty at this time, and it is not the same object described in step 2. It then calls _loaded_messages property and calls _get method to retrieve the stored message. All cookies from this domain will be uploaded to the server. The process_response method of middleware class calls update method of BaseStorage. In this case the _queued_messages list is empty, and nothing is stored. The logic in the update method of BaseStorage is smart. If two consecutive requests add two messages without displaying them, both messages will be stored. Here is the source code. # update method of BaseStorage class def update ( self , response ): \"\"\" Store all unread messages. If the backend has yet to be iterated, store previously stored messages again. Otherwise, only store messages added after the last iteration. \"\"\" self . _prepare_messages ( self . _queued_messages ) if self . used : return self . _store ( self . _queued_messages , response ) # normally empty elif self . added_new : messages = self . _loaded_messages + self . _queued_messages return self . _store ( messages , response ) Cookies and Sessions The discussion of the messages app has already became convoluted, and it will become even more complicated when we examine how cookies and sessions work. I will have a general dicussion on cookies and sessions and stop here. It will be in another post to have a detailed discussion of those topics. Tango with Django book has a chapter on cookies and sessions which is very good. Internet cookies is \"a small piece of data sent from a web server and stored on the user's computer\". The wikipedia http cookie page provides a good overview of the topic. The cookie information is sent via the http header, which usually has a size limit. The session cookie contains a unique session id, and the infomation is saved in server database. Django web framework also comes with a sessions contrib app. Here is the link to the official documentation . The SessionStorage class does not need to consider the size limit when saving messages, so the code is simpler than in CookieStorage class. Here is the source code of session.py file. # messages/storage/session.py import json from django.conf import settings from django.contrib.messages.storage.base import BaseStorage from django.contrib.messages.storage.cookie import ( MessageDecoder , MessageEncoder , ) class SessionStorage ( BaseStorage ): \"\"\" Store messages in the session (that is, django.contrib.sessions). \"\"\" session_key = '_messages' def __init__ ( self , request , * args , ** kwargs ): assert hasattr ( request , 'session' ), \"The session-based temporary \" \\ \"message storage requires session middleware to be installed, \" \\ \"and come before the message middleware in the \" \\ \"MIDDLEWARE %s list.\" % ( \"_CLASSES\" if settings . MIDDLEWARE is None else \"\" ) super () . __init__ ( request , * args , ** kwargs ) def _get ( self , * args , ** kwargs ): \"\"\" Retrieve a list of messages from the request's session. This storage always stores everything it is given, so return True for the all_retrieved flag. \"\"\" return self . deserialize_messages ( self . request . session . get ( self . session_key )), True def _store ( self , messages , response , * args , ** kwargs ): \"\"\" Store a list of messages to the request's session. \"\"\" if messages : self . request . session [ self . session_key ] = self . serialize_messages ( messages ) else : self . request . session . pop ( self . session_key , None ) return [] def serialize_messages ( self , messages ): encoder = MessageEncoder ( separators = ( ',' , ':' )) return encoder . encode ( messages ) def deserialize_messages ( self , data ): if data and isinstance ( data , str ): return json . loads ( data , cls = MessageDecoder ) return data Conclusion The messages app is easy to use in a Django app, but the implementation of the app is not simple. Reading the source code helps us understand how the Django messages app works.","tags":"posts","url":"https://www.georgexyz.com/django-messages.html","loc":"https://www.georgexyz.com/django-messages.html"},{"title":"Django HttpRequest and HttpResponse","text":"Django view \"is simply a Python function that takes a web request and returns a response.\" A typical view function loads template, retrieves some data from database, and returns a response. Django 1.3 starts supporting class-based views, which makes writing views easier. The drawback is that the code is not as straightforward to understand as function-based view. Here is a typical Django view function from official Django tutorial. def index ( request ): latest = Question . objects . order_by ( '-pub_date' )[: 5 ] template = loader . get_template ( 'polls/index.html' ) context = { 'latest' : latest } return HttpResponse ( template . render ( context , request )) The request object passed to the view function is a WSGIRequest object, and WSGIRequest is a subclass of HttpRequest. When web browser sends an http/https request to the web server, Django web framework receives the infomation in the form of an environ object, and creates the request object. Yes, Django creates this object and passes it to the view function. This is a typical example of inversion of control . A web app developer does not have control over the flow of a program when using a web framework. The HttpRequest and HttpResponse classes are defined in the request.py and response.py files in http directory. The response.py file also defines several other classes such as Http404 and HttpResponseRedirect. The Django official documentation has a reference page for HttpRequest and HttpResponse. It is probably to easier to read the source code directly. Here is a list of files in the http directory. george@STK2M3:~/Desktop/django-2.2.2/django$ wc -l http/*.py 26 http/cookie.py 21 http/__init__.py 688 http/multipartparser.py 602 http/request.py 559 http/response.py 1896 total How do I find this information? The grep command below shows that HttpRequest only appears a few places in Django source code. The wsgi.py file defines the WSGIRequst class as a subclass of HttpRequest. george@STK2M3:~/Desktop/django-2.2.2/django$ grep -r \"HttpRequest\" ./ ./template/context.py: Create a suitable Context from a plain dict ... ./core/handlers/base.py: \"\"\"Return an HttpResponse object for ... ./core/handlers/wsgi.py:from django.http import HttpRequest, QueryDict, parse_cookie ./core/handlers/wsgi.py:class WSGIRequest(HttpRequest): ++++++ Notice ++++ ./core/files/uploadhandler.py: >>> from django.http import HttpRequest ./core/files/uploadhandler.py: >>> request = HttpRequest() ./views/decorators/debug.py:from django.http import HttpRequest ...... We can then try to find where the WSGIRequest object is defined and passed along to other functions as an argument. george@STK2M3:~/Desktop/django-2.2.2/django$ grep -rn \"WSGIRequest\" ./core ./core/management/commands/runserver.py:57: # way to reach WSGIRequestHandler.... ./core/handlers/wsgi.py:66:class WSGIRequest(HttpRequest): ./core/handlers/wsgi.py:131: request_class = WSGIRequest ... In the file wsgi.py line 131, it assigns WSGIRequest class to request_class . Let's try to find where request_class is instantiated. george@STK2M3:~/Desktop/django-2.2.2/django$ grep -rn \"request_class\" ./core ./core/handlers/wsgi.py:131: request_class = WSGIRequest ./core/handlers/wsgi.py:140: request = self.request_class(environ) Grep command can also see the lines before and after the target line. The command below shows the context code. george@STK2M3:~/Desktop/django-2.2.2/django$ grep -rn -C 5 \"request_class\" ./core .... ./core/handlers/wsgi.py-130-class WSGIHandler(base.BaseHandler): ./core/handlers/wsgi.py:131: request_class = WSGIRequest ./core/handlers/wsgi.py-132- ./core/handlers/wsgi.py-133- def __init__(self, *args, **kwargs): ./core/handlers/wsgi.py-134- super().__init__(*args, **kwargs) ./core/handlers/wsgi.py-135- self.load_middleware() ./core/handlers/wsgi.py-136- ./core/handlers/wsgi.py-137- def __call__(self, environ, start_response): ./core/handlers/wsgi.py-138- set_script_prefix(get_script_name(environ)) ./core/handlers/wsgi.py-139- signals.request_started.send(sender=self.__class__, environ=environ) ./core/handlers/wsgi.py:140: request = self.request_class(environ) ./core/handlers/wsgi.py-141- response = self.get_response(request) ./core/handlers/wsgi.py-142- ./core/handlers/wsgi.py-143- response._handler_class = self.__class__ ./core/handlers/wsgi.py-144- ./core/handlers/wsgi.py-145- status = '%d %s' % (response.status_code, response.reason_phrase) The wsgi.py line 141 response = self.get_response(request) is where the request is passed to the view function. It is also where the response created in the view function passed back to the Django. The WSGI discussion clearly shows that the environ argument is the one passed on by the web server. \" The get_response method is where nearly all of the activity happens.\" James Bennett's article How Django processes a request has a very detailed discussion on the topic. If you want to find out what information is contained in the reqeust object, the view function below displays the contents. def display_meta ( request ): # from django book values = request . META . items () values = sorted ( values ) html = [] for k , v in values : html . append ( '<tr><td> %s </td><td> %s </td></tr>' % ( k , v )) txt = '<table> %s </table>' % ( ' \\n ' . join ( html ) ) # added by me txt += '<p>Number of items in META : ' + str ( len ( request . META )) + '</p>' txt += '<p>request.path : ' + str ( request . path ) + '</p>' txt += '<p>request.get_host() : ' + str ( request . get_host ()) + '</p>' txt += '<p>request.get_full_path() : ' + str ( request . get_full_path ()) + '</p>' txt += '<p>request.is_secure() : ' + str ( request . is_secure ()) + '</p>' txt += '<p>request.method : ' + str ( request . method ) + '</p>' txt += '<p>request.encoding : ' + str ( request . encoding ) + '</p>' txt += '<p>request.content_type : ' + str ( request . content_type ) + '</p>' print ( type ( request )) # for debug only return HttpResponse ( txt ) Here is the partial output from the display_meta function: ...... XDG_SESSION_DESKTOP cinnamon XDG_SESSION_ID c2 XDG_SESSION_PATH /org/freedesktop/DisplayManager/Session0 XDG_SESSION_TYPE x11 XDG_VTNR 7 _ /home/george/.venv/django/bin/python wsgi.errors <_io.TextIOWrapper name='' mode='w' encoding='UTF-8'> wsgi.file_wrapper wsgi.input wsgi.multiprocess False wsgi.multithread True wsgi.run_once False wsgi.url_scheme http wsgi.version (1, 0) Number of items in META : 85 request.path : /info/ request.get_host() : 127.0.0.1:8000 request.get_full_path() : /info/ request.is_secure() : False request.method : GET request.encoding : None request.content_type : text/plain","tags":"posts","url":"https://www.georgexyz.com/django-httprequest-httpresponse.html","loc":"https://www.georgexyz.com/django-httprequest-httpresponse.html"},{"title":"A Close Look at Django Template System","text":"Django has a built-in template system. It is relatively easy to understand, and the source code is not as complicated as other parts of Django. This article is a summary of the notes I took when studying the system. Official Documentation The online Django documentation has 5 pages dedicated to template. Intro to template ( link ) Template language reference ( link ) Built-in tags and filters ( link ) How to use template system ( link ) Custom tags and filters ( link ) A Django application developer probably does not need to know all of those details. But it is always a good thing for programmers to know how things work behind the scene. Template Language Summary Django Template Language ( DTL ) syntax mainly consists of three elements: variable, tag, and filter. Here are some examples: variable {{ variable }} {{ tag.name }} tag {% expression %} {% for startup in tag.startup_set.all %} ... {% endfor %} {% extends \"base.html\" %} {% block title %} {{ block.super }} - Tag List {% endblock title %} {% if/else/endif %} {% if not tag.startup_set all and not tag.blog_posts.all %} filter {{ startup_date|date:\"F jS, Y\" }} ▶ July 2nd, 2019 {{ startup.website|urlize }} {{ startup.description|linebreaks }} other filters : title, pluralize, truncatewords:20, default:\"base.html\" How to Load Templates Method 1 The django.template.loader module defines get_template and select_template functions. Both functions can load template files and render them agaist a dict. The difference is that get_template accepts a template name and select_template accepts a list of template names. Here is an example from Django official tutorial. def index ( request ): latest_question_list = Question . objects . order_by ( '-pub_date' )[: 5 ] template = loader . get_template ( 'polls/index.html' ) context = { 'latest_question_list' : latest_question_list , } return HttpResponse ( template . render ( context , request )) Method 2 The more common code is to use the render function defined in django.shortcuts module in views. from django.shortcuts import render ... return render ( request , 'template_name.html' , { 'tag' : tag }) The render function itself (Django2.2.2 source code) is very simple and short. It calls render_to_string function in django.template.loader module, which in turn calls get_template or select_template depending on template_name. # in django.shortcuts def render ( request , template_name , context = None , content_type = None , status = None , using = None ): \"\"\" Return a HttpResponse whose content is filled with the result of calling django.template.loader.render_to_string() with the passed arguments. \"\"\" content = loader . render_to_string ( template_name , context , request , using = using ) return HttpResponse ( content , content_type , status ) # in django.template.loader def render_to_string ( template_name , context = None , request = None , using = None ): \"\"\" Load a template and render it with a context. Return a string. template_name may be a string or a list of strings. \"\"\" if isinstance ( template_name , ( list , tuple )): template = select_template ( template_name , using = using ) else : template = get_template ( template_name , using = using ) return template . render ( context , request ) Method 3 The django.template module has two classes Template and Context. Those are template system's lower level APIs. Here is an example: from django.template import Template, Context template = Template('Hi, my name is {{ name }}.') context = Context({'name': 'Andrew'}) template.render(context) # result is 'Hi, my name is Andrew.' Template System Source Code The source code for Django template system is in django/template directory, and consists of 26 python files. Bash command wc outputs number of lines in a file. We know that total number of lines of Django template system code is 5,863 (Django 2.2.2). The output below also shows that two files base.py and defaulttags.py have over 1,000 lines of code each. george@STK2M3:~/django-2.2.2/django/template$ wc -l *.py 1044 base.py 81 context_processors.py 280 context.py 907 defaultfilters.py 1474 defaulttags.py 180 engine.py 42 exceptions.py 68 __init__.py 328 library.py 66 loader.py 317 loader_tags.py 145 response.py 208 smartif.py 107 utils.py 5247 total george@STK2M3:~/django-2.2.2/django/template$ wc -l loaders/*.py 14 loaders/app_directories.py 49 loaders/base.py 95 loaders/cached.py 46 loaders/filesystem.py 0 loaders/__init__.py 27 loaders/locmem.py 231 total george@STK2M3:~/django-2.2.2/django/template$ wc -l backends/*.py 81 backends/base.py 129 backends/django.py 53 backends/dummy.py 0 backends/__init__.py 108 backends/jinja2.py 14 backends/utils.py 385 total","tags":"posts","url":"https://www.georgexyz.com/django-templates.html","loc":"https://www.georgexyz.com/django-templates.html"},{"title":"Setup Linux Mint on a New Computer","text":"I have been using Xubuntu since version 17.10. This week I read some articles on Linux Mint and I decided to give it a try. It is not a big change because Linux Mint is an ubuntu based distro. Linux Mint has a very nice user interface built on Cinnamon desktop system. It definitely looks better than Xubuntu which is known for its lightweight Xfce desktop environment. Omg!ubuntu website has an article about Wine 4.0 in Linux Mint 19 . Linux developers backported Wine 4.0 to the Linux Mint repositories. It becomes very easy for users to install Wine 4. Here is the single command to install: $sudo apt install --install-recommends wine-installer I find two issues when setting up Linux Mint. The first one is that when I run sudo apt upgrade command after installation, the system reports an error like this: Fetched 902 kB in 3s (247 kB/s) Preconfiguring packages ... dpkg: dependency problems prevent processing triggers for gconf2: gconf2 depends on dbus-x11; however: Package dbus-x11 is not configured yet A Google search finds a solution posted on Linxu Mint forum. Running two commands below solves the issue. $sudo dpkg --configure -a $sudo apt-get install -f The man pages of dpkg and apt-get have the following paragraphs about those two commands: dpkg --configure package...|-a|--pending Configure a package which has been unpacked but not yet configured. If -a or --pending is given instead of package, all unpacked but unconfigured packages are configured. To reconfigure a package which has already been configured, try the dpkg-reconfigure(8) command instead. Configuring consists of the following steps: 1. Unpack the conffiles, and at the same time back up the old conffiles, so that they can be restored if something goes wrong. 2. Run postinst script, if provided by the package. apt-get -f, --fix-broken Fix; attempt to correct a system with broken dependencies in place. This option, when used with install/remove, can omit any packages to permit APT to deduce a likely solution. If packages are specified, these have to completely correct the problem. The option is sometimes necessary when running APT for the first time; APT itself does not allow broken package dependencies to exist on a system. It is possible that a system's dependency structure can be so corrupt as to require manual intervention (which usually means using dpkg --remove to eliminate some of the offending packages). Use of this option together with -m may produce an error in some situations. Configuration Item: APT::Get::Fix-Broken. The other issue I encountered is that the system does not respond to logitech wireless mouse and keyboard after going into suspend (sleep). An article on askubuntu.com provides a working solution. Here are the commands to make it work: george@STK2M3:~$ grep . /sys/bus/usb/devices/*/product /sys/bus/usb/devices/1-3/product:USB Receiver # PORT !!! /sys/bus/usb/devices/1-5/product:USB2.0 Hub /sys/bus/usb/devices/2-3.1/product:Flash Drive /sys/bus/usb/devices/2-3/product:USB3.0 Hub /sys/bus/usb/devices/usb1/product:xHCI Host Controller /sys/bus/usb/devices/usb2/product:xHCI Host Controller george@STK2M3:~$ grep . /sys/bus/usb/devices/*/power/wakeup /sys/bus/usb/devices/1-3/power/wakeup:disabled # DEFAULT DISABLED !!! /sys/bus/usb/devices/1-5/power/wakeup:disabled /sys/bus/usb/devices/1-7/power/wakeup:disabled /sys/bus/usb/devices/2-3/power/wakeup:disabled /sys/bus/usb/devices/usb1/power/wakeup:disabled /sys/bus/usb/devices/usb2/power/wakeup:disabled george@STK2M3:~$ lsusb Bus 002 Device 003: ID 090c:1000 Silicon Motion, Inc. Bus 002 Device 002: ID 2109:0813 VIA Labs, Inc. Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 001 Device 004: ID 8087:0a2b Intel Corp. Bus 001 Device 003: ID 2109:2813 VIA Labs, Inc. Bus 001 Device 002: ID 046d:c52b Logitech, Inc. Unifying Receiver # DEVICE !!! Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub george@STK2M3:~$ sudo vim /etc/udev/rules.d/10-wakeup.rules [sudo] password for george: Add the contents below to the 10-wakeup.rules file. The idVendor and idProduct values are from the lsusb command, and the path /sys/bus/... is from the first grep command. ACTION==\"add\", SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"046d\", ATTRS{idProduct}==\"c52b\" RUN+=\"/bin/sh -c 'echo enabled > /sys/bus/usb/devices/1-3/power/wakeup'\" After the above steps, the logitech mouse and keyboard wake up the Linxu Mint just fine. I never got the sleep/wakeup function working properly in Xubuntu system. So, this is a large improvement for me. Update: 9/4/2020 Linux Mint 20 has been released for a few months now. I install a copy in my desktop and it is awesome. Here is a link to install Wine 5 in Linux Mint 20 . I follow the steps and it works well.","tags":"posts","url":"https://www.georgexyz.com/linux-mint.html","loc":"https://www.georgexyz.com/linux-mint.html"},{"title":"Good Python Learning Resources","text":"This post describes some good python resources that I found useful. Python has many resources, sometimes it becomes difficult for people to figure out which are good and which are not. Automate The Boring Stuff with Python I am a big fan of Al Sweigart's book. He is very kind to provide the HTML version of the book online for free. I bought the hard copy and Udemy class, but the online version is very handy when I want to look something up quickly. A presentation on youtube titled Recursion for Beginners: A Beginner's Guide to Recursion by Al Sweigart is also worth watching. Google's Python Class Google has a free class for people who want to learn Python. The class was created by Nick Parlante and was originally given to new Google employees. The contents of the class are quite good. It also comes with well-designed exercises for each lecture. Think Python Think Python is a nice short introductory book by Allen B. Downey, and it only has 268 pages. Each chapter of the book has many nice exercises. The book is an easy read if you take programming courses before. The book is also freely available online. Here is the link . A Byte of Python ( OOP Chapter) Most introductory Python materials do not discuss python classes. Classes and Object Oriented Programming ( OOP ) concepts are everywhere for any serious Python work. I found the OOP chapter of a free online book A Byte of Python by Swaroop C H is a good introduction to the topic. Online References This Python Reference github page by Kevin Markham is a very nice summary of Python language features. This online article by Trey Hunner examines all 69 python 3 built-in functions/callables. It is an excellent summary of python built-ins. Python 2 actually have a few more built-in callables. Transforming Code into Beautiful, Idiomatic Python This presentation by Raymond Hettinger is excellent. Someone has prepared the notes and posted them on github. Here is the link to the github notes . I read the notes a few times and found that many examples apply to my existing python code. If I get a chance to revise those code, I will make sure they follow those recommendations. Fluent Python I am currently reading Luciano Ramalho's Fluent Python book. I am half way through the book and it is good. The book covers many contents that I probably will never use, but it is always good to know more than we need. Podcasts I regularly listen to Talk Python To Me and Python Bytes podcasts. They keep me in the loop of a larger Python community.","tags":"posts","url":"https://www.georgexyz.com/python-resources.html","loc":"https://www.georgexyz.com/python-resources.html"},{"title":"Python Descriptor and Django Model Field","text":"Django model fields are descriptors. The descriptor is a Python intermediate feature. It is almost impossible to understand FileField and ImageField source code without knowing Python descriptor. Marty Alchin's book Pro Django has a short section on descriptors (Page 31 to 33), but it lacks detail. Descriptor Online Articles After some google search, I found several articles on Python descriptors. The first article is Michael Driscoll's Python 201: What are descriptors? , which is a good introduction. The webpage has a link to Ned Batchelder's blog site. I heard Ned Batchelder on Talk Python To Me Podcase and read his excellent article on Unicode before. His blog post on descriptor is actually recommending a lightning talk and an article by Chris Beaumont. Chris Beaumont's article Python Descriptors Demystified is possibly the best writing on descriptors. Many descriptor techniques discussed in the article are directly used in Django Model source code. Here are the main points of the article: Descriptors are reusable properties Put descriptors at class level Keep instance level data instance specific Label your descriptor Label descriptors with Metaclasses The article itself is not very long, but the content takes time to understand. The article also beriefly discussed property. A short online article Property Explained – How to Use and When has nice Python property examples. The article also mentions meta classes. Real Python website has a nice introductory article on meta classes . Python official documentation has an article Descriptor HowTo Guide by Raymond Hettinger. This article is not easy and it takes time to digest. Here is the link to my Github repo which consists of code examples in those articles. Django Model Code This section is trying to answer the question \"how does a class variable ‘name' become an instance variable\"? The Django source code and line number reference below are from Django version 2.1 . class Book ( models . Model ): name = models . CharField ( max_length = 255 ) ... b = Book . objects . get ( pk = ... ) bn = b . name The two lines of code below are from base.py ModelBase class (L138-139), which is a metaclass for Model. for obj_name , obj in attrs . items (): new_class . add_to_class ( obj_name , obj ) The attrs is the fourth argument to the __new__ method in metaclass ModelBase. The obj_name refers to ‘name' and obj refers to models.CharField(max_length=255) where name is a field in Book model class. def __new__ ( cls , name , bases , attrs , ** kwargs ): The add_to_class method is defined on L301. The method checks if the value being added has contribute_to_class method, and if it does it will call this method. Otherwise, the method calls setattr to set (name, value) pair as class attribute. The getattr and setattr are python built-in functions. def add_to_class ( cls , name , value ): # We should call the contribute_to_class method only if it's bound if not inspect . isclass ( value ) and hasattr ( value , 'contribute_to_class' ): value . contribute_to_class ( cls , name ) else : setattr ( cls , name , value ) # call this if Book has a field price = 50 The contribute_to_class method is defined in db/models/fields/__init__.py L727. It is a method in Field class. This is where the actual magic happens. The self, cls, and name in contribute_to_class are models.CharField(max_length=255) , Book , and name , respectively. The first thing contribute_to_class does is it takes the value assigned to the class variable and stores it in class attribute _meta, which is an Options object. The second thing it does is to assign an instance of a DeferredAttribute class to this field. The class is a Descriptor in python. The construction of DeferredAttribute has an argument self.attname , which has the same name of the field. It can be shown that for descriptor fields the getattr(cls, self.attname, None) function returns None. The comments indicate that this line is intended for the class method. def contribute_to_class ( self , cls , name , private_only = False ): \"\"\" Register the field with the model class it belongs to. If private_only is True, create a separate instance of this field for every subclass of cls, even if cls is not an abstract model. \"\"\" self . set_attributes_from_name ( name ) self . model = cls if private_only : cls . _meta . add_field ( self , private = True ) else : cls . _meta . add_field ( self ) if self . column : # Don't override classmethods with the descriptor. This means that # if you have a classmethod and a field with the same name, then # such fields can't be deferred (we don't have a check for this). if not getattr ( cls , self . attname , None ): # attname is name setattr ( cls , self . attname , DeferredAttribute ( self . attname )) if self . choices : setattr ( cls , 'get_ %s _display' % self . name , partialmethod ( cls . _get_FIELD_display , field = self )) The DeferredAttribute descriptor class is defined in db.models.query_utils.py file L116. The code for the class is not long, and they are shown below. The instance and cls in __get__ method will be a book instance and cls will be Book class. The code in __get__ method shows the subtle differences between __dict__ attribute and getattr (search tree). class DeferredAttribute : \"\"\" A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. \"\"\" def __init__ ( self , field_name ): self . field_name = field_name def __get__ ( self , instance , cls = None ): \"\"\" Retrieve and caches the value from the datastore on the first lookup. Return the cached value. \"\"\" if instance is None : return self data = instance . __dict__ if data . get ( self . field_name , self ) is self : # Let's see if the field is part of the parent chain. If so we # might be able to reuse the already loaded value. Refs #18343. val = self . _check_parent_chain ( instance , self . field_name ) if val is None : instance . refresh_from_db ( fields = [ self . field_name ]) val = getattr ( instance , self . field_name ) data [ self . field_name ] = val return data [ self . field_name ] def _check_parent_chain ( self , instance , name ): \"\"\" Check if the field value can be fetched from a parent field already loaded in the instance. This can be done if the to-be fetched field is a primary key field. \"\"\" opts = instance . _meta f = opts . get_field ( name ) link_field = opts . get_ancestor_link ( f . model ) if f . primary_key and f != link_field : return getattr ( instance , link_field . attname ) return None The DeferredAttribute class does not define a __set__ method as descriptors in other articles. In such a case, the b.name in a statement b.name = 'Python Tricks refers to instance attribute, which overrides the Book.name class level attribute. The second answer in this stack overflow post discusses this particular issue. It takes me sometime to understand how it works.","tags":"posts","url":"https://www.georgexyz.com/python-descriptor-django-model.html","loc":"https://www.georgexyz.com/python-descriptor-django-model.html"},{"title":"What is WSGI ?","text":"WSGI is an abbreviation for Web Server Gateway Interface, which is a \"simple calling convention for web servers to forward requests to web applications for frameworks written in Python.\" WSGI is part of Python ecosystem. It was originally specified in PEP -333 in 2003, and was updated to PEP -3333 for python 3 in 2010. Python standard library even has a wsgiref package ( WSGI reference server) built in. Why do we need to know WSGI ? A Django web app is essentially an WSGI app. A web framework like Django adds many other functions such as database handling and template processing to generate html files. It helps a developer understand how web framework works behind the scene. The best writing on WSGI is probably a blog post by Armin Ronacher, who is the creator of Flask web framework and many other open source Python packages. Three code examples in this article are fantastic prototypes showing how WSGI and web framework work. I would suggest anyone who is interested to read the article multiple times to get a good understanding of the topic. The article was written in 2007 with Python 2. A developer needs to make small changes to the code for Python 3. Here is the link to github repo which contains code I modified for Python 3. References Full Stack Python website has an WSGI article which includes links to many other articles. An online article by Kevin Goldberg dicusses several WSGI web servers.","tags":"posts","url":"https://www.georgexyz.com/django-WSGI.html","loc":"https://www.georgexyz.com/django-WSGI.html"},{"title":"Django Unleashed Book Model Diagram","text":"Andrew Pinkham's Django Unleashed is a very good Django book. It covers many aspects of Django Web Framework with an example project. It is not a book for complete beginners. A reader needs to know a little Python and Django basics to get started. The Chapter 3 of the book is about Django Models, discussing the example project models. The project has 4 models, 3 many-to-many relations, and 1 many-to-one relation. The book does not include a diagram showing the models and relations. Here is the diagram I draw in Inkscape: Here is the link to the PDF page of the diagram. The django-extensions has a graph_models command which generates similar model diagrams. Add the GRAPH_MODELS dictionary to the project settings file. GRAPH_MODELS = { 'all_applications' : False , 'group_models' : True , } The extension command depends on the graphviz package and pydot/pyparsing modules. Install those dependencies in Ubuntu 18.04 and run the python manage.py ... command to generate diagram. $sudo apt-get install graphviz (env)$pip install pyparsing pydot (env)$python manage.py graph_models blog organizer --pydot -o models.png Here is the result PNG file.","tags":"posts","url":"https://www.georgexyz.com/django-unleashed-model.html","loc":"https://www.georgexyz.com/django-unleashed-model.html"},{"title":"Create Static Website With Pelican And Bootstrap","text":"This website is created with Pelican and Bootstrap, both of which are open-source software. When I am learning Django web framework, I want to create a blog site to write down some notes. A blog site with 50-500 articles does not need full scale Django back-end. My original plan is to write some python scripts calling Django Template system and python Markdown package. Then I find Pelican which includes Jinja2 Template system, Markdown, and many other functions. It does what I want to do and much more. Pelican Pelican is a static website generator written in Python. When a web server is running Django or Flask framework, the server creates an html page and sends it back to client as the response to a request. If a developer chooses a static site generator like Pelican, html pages are created during development. When a web request comes to a server, the serve fetches pre-generated static html page and sends it back. The response cycle is simpler and faster. The drawback is that the website is static. It does not receive or collect input from a user. This full stack python article is an excellent tutorial on Pelican. The Pelican documentation site is a good reference. The fast way to learn Pelican is to look at code of two included themes \"simple\" and \"notmyidea\". To get started, you can write a few blog posts in markdown format and utilize the built-in theme \"simple\" to generate a site. The markdown guide website has a nice summary of basic syntax . The figure below roughly describes how pelican works. Pelican reads markdown files and theme files into memory and produces html pages. The theme files work as templates for html output. Some theme files correspond to multiple outputs, while others only relate to one output file. The Pelican source code consists of 14 python files (version 4.0.1). The source files has 5,670 lines of code. It is a good median size code base to study if you are looking for python project to work on. I have not read all pelican source code yet. # bash command to tally pelican source code lines find . -maxdepth 1 -name '*.py' -exec wc -l '{}' + Bootstrap 4 There is an excellent pelican-bootstrap3 theme in the pelican-themes repo. The original author of the theme did a nice work of including lots of bootstrap features into the theme. Bootstrap 4 has been released for a while, so I decide to use Bootstrap 4 and create a theme for this website. Whenever I am not sure about a certain pelican theme feature, I check the code of the \"pelican-bootstrap3\" and start from there. Another nice pelican theme is pelican-subtle . The Markdown code style on this website is copied from pelican-subtle. I also read the code of this theme to get a better understanding on how pelican and pelican theme work. I changed the Bootstrap 4 default colors on the bootstrap.build webiste . Another website has a Bootstrap theme kit if you want to customize Bootstrap locally. The theme of this website has the following color variables: // _variables.scss $blue : #990000 ; $green : #720027 ; $cyan : #ce4257 ; $yellow : #ff9b54 ; $pink : #4f000b ; $font-size-base : 1 .1 rem ; $h4-font-size : $font-size-base * 1 .1 ; $h5-font-size : $font-size-base * 1 .0 ; $h3-font-size : $font-size-base * 1 .4 ; $h2-font-size : $font-size-base * 1 .6 ; $h1-font-size : $font-size-base * 1 .8 ; $h6-font-size : $font-size-base ; $paragraph-margin-bottom : 1 .1 rem ; $print-page-size : letter ; The pelican-theme github repo collects many themes. However, it seems to me that few of them are of professional quality. The possible reason is that most themes are produced by hobbyists during spare time. The three images on the homepage are downloaded from pexels.com , which is a very nice website for free photos. The icons on the Projects page are from pixabay.com , and are modified with GIMP . The favicon is generated and downloaded from favicon.io website . Some vector graphics are downloaded from openclipart.org . Invoke Package Invoke package \"is a Python task execution tool and library\". It is similar to GNU Make program, but the script tasks.py is written in Python. The tasks.py file is an equivalent of Makefile for GNU Make. I usually install Invoke package along with pelican and Markdown packages in a python virtual environment. python - m venv ~/. venv / pelican source ~/ venv / pelican / bin / activate pip install pelican Markdown invoke ghp - import2 The pelican-quickstart command will create a tasks.py file in the project directory. One nice feature of Invoke is that you can run multiple tasks in one command. The command below cleans the output directory, rebuilds the project, and serves the website at http://localhost:8000 address. invoke clean build serve Website Source Code This website is hosted in Github Pages, which is a free service for static sites. Source code of this website including markdown files and bootstrap 4 theme files are available in this github repository . The gh-pages branch of the same repository contains generated html files of the website. I followed this pelican documentation page and utilized ghp-import python package to streamline the publication process. I use the following commands to update posts and github repo. source venv.sh # load virtual env invoke clean build git status git add -A git commit -m \"commit message\" git push origin master # update source code ghp-import output -b gh-pages git push origin gh-pages This github page has a nice summary of common github commands. Future Blog Plan My future plan for the blog is to write about one post per month. That comes to about 12 posts per year. My goal is to write at least 6 posts per year even I am busy at work. Another goal is to keep the blog running for at least 10 years, so we will see if the site has 60 posts in the year 2029. This site does not track who is reading or visiting. It does not have Google Analytics or similar services to track users.","tags":"posts","url":"https://www.georgexyz.com/pelican-boostrap-website.html","loc":"https://www.georgexyz.com/pelican-boostrap-website.html"},{"title":"Python Code To Generate Full Size Yearly Calendar in Inkscape","text":"At-A-Glance DayMinder Monthly Planner 7\" x 8-3/4\" Version had been my calendar for a few years. Then I found the excellent PDF software PDFXChange-Viewer and I started downloading monthly PDF calendars from timeanddate.com . Each file was for one year, it had 13 pages. The first page was a yearly calendar and other 12 pages were monthly calendars. I marked events on the PDF directly with 10 point \"Narrow Arial\" fonts. This continued for a few years. After I became familiar with Inkscape extension and Python programming, I wrote a python program which generates full size (36\" x 24\") one page yearly calendar in Inkscape. I save both SVG and PDF files. Now the one page PDF file is my daily calendar, and I mark events on the PDF . My event descriptions are usually very short like \"9am meeting with Don\", \"10:45 See Dr Jeff\", and \"off work vacation in FL \" Here is what the yearly calendar looks like. Here are the links for calendars from 2019 to 2025. I will add more links to this page in year 2025. 2019: svg pdf 2020: svg pdf 2021: svg pdf 2022: svg pdf 2023: svg pdf 2024: svg pdf 2025: svg pdf Here are the code in create_calendar.inx and create_calendar.py files. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <inkscape-extension xmlns= \"http://www.inkscape.org/namespace/inkscape/extension\" > <_name> Create Calendar </_name> <id> create_calendar.com.gotrafficsign </id> <dependency type= \"executable\" location= \"extensions\" > inkex.py </dependency> <dependency type= \"executable\" location= \"extensions\" > simplestyle.py </dependency> <param name= \"yearNumber\" type= \"int\" min= \"0\" max= \"2100\" gui-text= \"For Year: \" > 2019 </param> <effect> <object-type> all </object-type> <effects-menu> <submenu _name= \"OpenCalendar\" > </submenu> </effects-menu> </effect> <script> <command reldir= \"extensions\" interpreter= \"python\" > create_calendar.py </command> </script> </inkscape-extension> #! /usr/bin/python # -*- coding: utf-8 -*- \"\"\" # create_calendar.py Create post size calendar file in Inkscape Copyright (C) December 08 2018 George Zhang This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. \"\"\" import inkex import simplestyle import simpletransform import sys import math import copy import os import re import datetime import calendar import logging class CreateCalendar ( inkex . Effect ): def __init__ ( self ): inkex . Effect . __init__ ( self ) self . OptionParser . add_option ( \"--yearNumber\" , action = \"store\" , type = \"int\" , dest = \"yearN\" , default = \"1\" ) logging . basicConfig ( level = logging . DEBUG , filename = \"logging.txt\" ) def effect ( self ): PAGE_W = 36 PAGE_H = 24 w = PAGE_W h = PAGE_H self . change_SVG_size ( w , h ) year = self . options . yearN month = 1 width = 9 height = 8 i = j = 0 for month in range ( 1 , 13 ): i = ( month - 1 ) % 4 j = ( month - 1 ) / 4 # python 2 only x = i * 9 y = j * 8 self . draw_month ( year , month , width , height , x , y ) def change_SVG_size ( self , width , height ): ratio = 25.4 svg_elem = self . document . getroot () page_width = width page_height = height svg_elem . set ( 'width' , str ( page_width ) + 'in' ) svg_elem . set ( 'height' , str ( page_height ) + 'in' ) svg_elem . set ( 'viewBox' , '0 0 ' + str ( page_width * ratio ) + ' ' + str ( page_height * ratio )) def draw_SVG_line ( self , ( x1 , y1 ), ( x2 , y2 ), style , name , parent ): '''style is a dict''' line_attribs = { 'style' : simplestyle . formatStyle ( style ), inkex . addNS ( 'label' , 'inkscape' ): name , 'd' : 'M ' + str ( x1 ) + ',' + str ( y1 ) + ' L' + str ( x2 ) + ',' + str ( y2 )} elm = inkex . etree . SubElement ( parent , inkex . addNS ( 'path' , 'svg' ), line_attribs ) return elm def draw_lines ( self , layer , width , height ): line_style = { 'stroke' : '#000000' , 'stroke-width' : str ( self . unittouu ( '1px' )), 'fill' : 'none' } for i in range ( 1 , 4 ): x1_str = str ( 9 * i ) + 'in' y1_str = '0.25in' y2_str = str ( height - 0.25 ) + 'in' x1 , x2 , y1 , y2 = map ( self . unittouu , [ x1_str , x1_str , y1_str , y2_str ]) self . draw_SVG_line (( x1 , y1 ), ( x2 , y2 ), line_style , 'line' , layer ) for j in range ( 1 , 3 ): x1_str = '0.25in' x2_str = str ( width - 0.25 ) + 'in' y1_str = str ( 8 * j ) + 'in' x1 , x2 , y1 , y2 = map ( self . unittouu , [ x1_str , x2_str , y1_str , y1_str ]) self . draw_SVG_line (( x1 , y1 ), ( x2 , y2 ), line_style , 'line' , layer ) def draw_grid ( self , layer , width , height , num_col , num_row , x , y ): '''width and height, in in inches, same for x and y''' line_style = { 'stroke' : '#000000' , 'stroke-width' : str ( self . unittouu ( '1px' )), 'fill' : 'none' } for i in range ( num_col + 1 ): x1_str = str ( x + ( float ( width ) / num_col ) * i ) + 'in' x2_str = x1_str y1_str = str ( y ) + 'in' y2_str = str ( y + height ) + 'in' x1 , x2 , y1 , y2 = map ( self . unittouu , [ x1_str , x2_str , y1_str , y2_str ]) self . draw_SVG_line (( x1 , y1 ), ( x2 , y2 ), line_style , 'line' , layer ) for i in range ( num_row + 1 ): x1_str = str ( x ) + 'in' x2_str = str ( x + width ) + 'in' y1_str = str ( y + ( float ( height ) / num_row ) * i ) + 'in' y2_str = y1_str x1 , x2 , y1 , y2 = map ( self . unittouu , [ x1_str , x2_str , y1_str , y2_str ]) logging . debug ( \" %s %s %s %s \" % ( x1_str , x2_str , y1_str , y2_str )) logging . debug ( \" %s %s %s %s \" % ( x1 , x2 , y1 , y2 )) self . draw_SVG_line (( x1 , y1 ), ( x2 , y2 ), line_style , 'line' , layer ) def draw_month ( self , year , month , width , height , x , y ): '''height and width in inches int x and y in inches from top left corner''' # num_col = 7 # num_row = 5 cal = calendar . Calendar ( 6 ) # set Sunday as first day width = width - 0.4 height = height - 0.4 x = x + 0.2 y = y + 0.2 # assert num_row in (4, 5, 6), \"num of row should be 4 5 or 6\" # width_col = float(width) / num_col # height_row = float(height) / num_row x_month = x + float ( width ) / 2 y_month = y ratio = 25.4 x_month_R , y_month_R = ( x_month * ratio , y_month * ratio ) y_month_R += 9.15 + 7 # 7 from observation text_layer = self . find_create_layer ( self . document . getroot (), 'text_layer' ) elem = self . draw_month_text ( x_month_R , y_month_R , month , year ) text_layer . append ( elem ) x_dayofweek = x + float ( width ) / 7.0 / 2 y_dayofweek = y + 1.35 x_dayofweek_R , y_dayofweek_R = ( x_dayofweek * ratio , y_dayofweek * ratio ) for i in range ( 7 ): elem = self . draw_weekday_text ( x_dayofweek_R , y_dayofweek_R , i ) text_layer . append ( elem ) x_dayofweek_R += float ( width ) / 7.0 * ratio bk_layer = self . find_create_layer ( self . document . getroot (), 'bk_layer' ) num_col = 7 num_row = len ( cal . monthdayscalendar ( year , month )) self . draw_grid ( bk_layer , width , height - 1.5 , num_col , num_row , x , y + 1.5 ) cal_matrix = cal . monthdayscalendar ( year , month ) for i in range ( num_row ): for j in range ( num_col ): day_num = cal_matrix [ i ][ j ] if day_num != 0 : self . draw_text ( text_layer , width , height - 1.5 , num_col , num_row , x , y + 1.5 , str ( day_num ), j , i ) def draw_text ( self , layer , width , height , num_col , num_row , x , y , name , i , j ): '''place day number in a monthly grid''' x_loc = x + ( float ( width ) / num_col ) * i y_loc = y + ( float ( height ) / num_row ) * j # top left corner ratio = 25.4 x_loc_R = x_loc * ratio y_loc_R = y_loc * ratio y_loc_R += 6.097 # vertical adjustement, vertical align baseline x_loc_R += 2 y_loc_R += 2 # second adjustment elem = self . create_text ( x_loc_R , y_loc_R , name ) layer . append ( elem ) def create_text ( self , x , y , name ): style_d = { 'font-size' : '6.34px' , # 18 pt 'font-family' : 'Roboto' , # 'text-align': 'center', 'text-anchor' : 'start' , 'fill' : '#000000' , 'stroke' : 'none' , } t = inkex . etree . Element ( 'text' ) t . set ( inkex . addNS ( 'space' , 'xml' ), 'preserve' ) t . set ( 'x' , str ( x )) t . set ( 'y' , str ( y )) t . set ( 'style' , simplestyle . formatStyle ( style_d )) sp = inkex . etree . SubElement ( t , 'tspan' ) sp . set ( inkex . addNS ( 'role' , 'sodipodi' ), 'line' ) sp . text = name return t def draw_month_text ( self , x , y , month , year ): month_name_str = [ '0' , 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' , 'August' , 'September' , 'October' , 'November' , 'December' ] style_d = { 'font-size' : '12.69px' , # 24 pt 'font-family' : 'Roboto' , #'text-align': 'center', 'text-anchor' : 'middle' , 'fill' : '#000000' , 'stroke' : 'none' , } t = inkex . etree . Element ( 'text' ) t . set ( inkex . addNS ( 'space' , 'xml' ), 'preserve' ) t . set ( 'x' , str ( x )) t . set ( 'y' , str ( y )) t . set ( 'style' , simplestyle . formatStyle ( style_d )) sp = inkex . etree . SubElement ( t , 'tspan' ) sp . set ( inkex . addNS ( 'role' , 'sodipodi' ), 'line' ) sp . text = month_name_str [ month ] + ' ' + str ( year ) return t def draw_weekday_text ( self , x , y , dayofweek ): dayofweek_str = [ 'Sunday' , 'Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' , 'Saturday' ] style_d = { 'font-size' : '8.46px' , # 24 pt 'font-family' : 'Roboto' , #'text-align': 'center', 'text-anchor' : 'middle' , 'fill' : '#000000' , 'stroke' : 'none' , } t = inkex . etree . Element ( 'text' ) t . set ( inkex . addNS ( 'space' , 'xml' ), 'preserve' ) t . set ( 'x' , str ( x )) t . set ( 'y' , str ( y )) t . set ( 'style' , simplestyle . formatStyle ( style_d )) sp = inkex . etree . SubElement ( t , 'tspan' ) sp . set ( inkex . addNS ( 'role' , 'sodipodi' ), 'line' ) sp . text = dayofweek_str [ dayofweek ][ 0 : 3 ] return t def find_create_layer ( self , parent , layer_name ): # this should not be svg:g path = '//g[@inkscape:label=\" %s \"]' % layer_name path += '|//svg:g[@inkscape:label=\" %s \"]' % layer_name el_list = self . document . xpath ( path , namespaces = inkex . NSS ) # inkex.debug(el_list) if el_list : layer = el_list [ 0 ] #inkex.debug('this code never execute, why?') else : layer = inkex . etree . SubElement ( parent , 'g' ) layer . set ( inkex . addNS ( 'label' , 'inkscape' ), layer_name ) layer . set ( inkex . addNS ( 'groupmode' , 'inkscape' ), 'layer' ) return layer def create_group ( self , group_name ): group = inkex . etree . Element ( 'g' ) group . set ( inkex . addNS ( 'label' , 'inkscape' ), group_name ) group . set ( 'fill' , 'none' ) return group if __name__ == '__main__' : e = CreateCalendar () e . affect ()","tags":"posts","url":"https://www.georgexyz.com/python-calendar-app.html","loc":"https://www.georgexyz.com/python-calendar-app.html"},{"title":"Install Multiple Python Versions In Ubuntu With Pyenv","text":"The python default installation in Ubuntu is a stripped down version. It does not include pip or venv. The pyenv tool allows programmers to install multiple versions of python in Ubuntu system. This recent realpython article includes everything from pyenv installation to pyenv configuration. The only thing to note is that a user needs to install some dependencies in Ubuntu before running pyenv. If you omit this step, python building process will fail without warnings or errors. sudo apt-get install -y make build-essential libssl-dev zlib1g-dev \\ libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev \\ libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl I usually change the global python to a more recent version with pyenv global command and simply use venv to manage virtual environment. pyenv global 3.7.3 python -m venv ~/.venv/pelican Here are a list of some other common commands. pyenv install --list |grep \" 3\\.[78]\" pyenv install -v 3.7.7 pyenv uninstall 3.7.7 ls ~/.pyenv/versions pyenv versions pyenv global 2.7.15 # or system pyenv local 3.7.7 cat ~/.pyenv/version pyenv virtualenv ... Update on 10/1/2020 Pyenv needs an update if you do not use it to install new Python versions for some time. Otherwise the new Python versions do not show up on the list. The commands to update pyenv are on the Github readme page. cd $(pyenv root) git fetch git tag git checkout v1.2.20","tags":"posts","url":"https://www.georgexyz.com/pyenv-python-tool.html","loc":"https://www.georgexyz.com/pyenv-python-tool.html"},{"title":"Setup Inkscape in Windows and Ubuntu","text":"Inkscape software is easy to install in both Windows and Ubuntu. However it is a little difficult for beginners to figure out how to customize the software. This article discusses the steps to customize Inkscape in both Windows and Ubuntu. Windows Setup Inkscape official website has a portable version. You can download a 7-zip file from this official download page . Click the third download button under text \"Binary archive in 7zip format (64bit)\" to down a .7z file. A free utility software 7-zip is able to extract .7z file into a directory. The 7-zip software also has a portable version if you do not want to install it. After the file is extracted into this directory, double clicking inkscape.exe starts Inkscape. C:\\Users\\Username\\Documents\\inkscape0.92.4 Inkscape User Extension Directory In Inkscape, click menu item Edit > Preferences to open preference dialog (Ctrl + Shift + p). Choose System on the left, and the right side shows system paths for variables. The default value for User extensions is, C:\\Users\\Username\\AppData\\Roaming\\inkscape\\extensions Open this location in File Explorer and copy and paste extension files (.py and .inx) into the directory. The extension program will show up under Extensions top level menu next time Inkscape is started. Or you can change the location to a different directory. Fonts There are two ways to customize fonts in Inkscape. The first one is to drop font files into C:\\Windows\\Fonts directory. The fonts become accessible to all Windows programs. You can find and download .ttf font files online (such as popular Roboto fonts). The second way is to create a new fonts directory at the location where inkscape.exe is stored, and copy files into this directory. Open file \\etc\\fonts\\conf.d\\50-user.conf and add a line <dir>./fonts</dir> before the last line. Check the new fonts on Text and Font dialog in Inkscape. ... <dir>./fonts</dir> </fontconfig> Install Dependencies for Plugin WriteTex WriteTex is a nice Inkscape extension for adding LaTeX equations onto a drawing. Other options are available, but WriteTex is simple and reliable. This extension requires LaTeX system and pdf2svg program installed. WriteTex calls LaTeX system to generate a PDF file, and calls pdf2svg to convert PDF to an SVG file. Then it loads the SVG onto Inkscape drawing. The WriteTex plugin files writetex.inx and writetex.py are available on this github page . Download those two files and drop them into User extension directory. You can download a texlive ISO file from this web page . Use 7-zip to extract the ISO file into a directory. Double click install-tl-advanced.bat to run advanced installation. You may choose portable version and install LaTeX system into a directory. Program pdf2svg can be downloaded from this github address Suppose texlive and pdf2svg-x64 directories are stored in this location, C:\\Users\\Username\\Downloads\\WriteTex-dep Two directories containing files xelatex.exe and pdf2svg.exe should be added to the system path. In Windows 10 File Explorer, right click This PC and choose Properties . Choose Advanced system settings and click Advanced tab on the dialog. Click Environment Variables button and Path variable. Then click Edit and add two directories to the list. C:\\Users\\Username\\Downloads\\WriteTex-dep\\pdf2svg-x64 C:\\Users\\Username\\Downloads\\WriteTex-dep\\texlive\\bin\\win32 The purpose of above steps is for WriteTex python extension to find xelatex.exe and pdf2svg.exe programs. How to Enter Equations with Plugin WriteTex Enter equations between \\[ and \\] in LaTeX Source box and click Apply . Some LaTeX symbols like \\dfrac need AmsTeX. Add the line below to Preamble File box and toggle box Trade above as contents . \\usepackage{amsmath, amsthm, amssymb, amsfonts} The third tab View Original TeX on the dialog enables you to view texts of equations. Choose an equation in Inskscape and click Apply button. A dialog will pop up showing equation input. Ubuntu Setup In Ubuntu 18.04, bash command sudo apt install inkscape installs Inkscape. If you want the latest stable version, this web page provides more information. You add a ppa repository first and then type the same bash command to install. To add fonts in Ubuntu, you create a .fonts subdirectory in the home directory and drop font files into it. The fonts will become available in Inkscape. WriteTex in Ubuntu The steps to add Inkscape extension in Ubuntu 18.04 are the same as in Windows. However it is easier to install dependencies for WriteTex. The two commands below install the texlive and pdf2svg programs. The programs are automatically added to the system path. sudo apt-get install texlive sudo apt-get install pdf2svg The texlive installation does not include xelatex. You change xelatex to pdflatex on the WriteTex dialog to make it work. Other Comments It seems that the Windows Inkscape is more stable than the Ubuntu version. I have several svg files that crash Inkscape in Ubuntu but work fine in Windows version. One time I was really frustrated by constant Inkscape crashes in Ubuntu. I checked the SVG file line by line and found that one drawing element had wrong XML format. It somehow slipped into the drawing file. Once the element was removed, the SVG file worked fine. The lesson learned was that when an SVG file contains corrupted XML code, Inkscape may crash without giving error messages.","tags":"posts","url":"https://www.georgexyz.com/inkscape-setup.html","loc":"https://www.georgexyz.com/inkscape-setup.html"},{"title":"Highway Geometric Design - Horizontal and Vertical Alignment Equations","text":"Horizontal and vertical curves are important concepts in a highway design class. However, many textbooks do not explain how to derive equations. When I was preparing for Professional Engineering ( PE ) exam a few years ago, I spent some time figuring out how to derive those equations. I will publish the work on this web page. College students and engineers preparing for PE exam may find them useful. A simple horizontal curve is an arc (part of a circle). The curve looks like this, Equations are shown on this PDF page: Horizontal Curve PDF If you understand how to derive horizontal curve equation, the Horizontal Sightline Offset ( HSO ) equation on page 3-115 of 7th edition of Green Book is very similar. HSO Equation PDF A vertical curve is a parabola which is more complicated than an arc. The curve looks like this: The equation derivation is on this PDF : Vertical Curve PDF It can be proved that X = 1/2 * L on the below figure. The proof is on this PDF page: Vertical Curve Prove PDF The PDF page below shows how to derive a minimum crest vertical curve equation on Page 3-166 of 7th edition of Green Book. Min Crest Vertical Length PDF","tags":"posts","url":"https://www.georgexyz.com/geometric-design-equations.html","loc":"https://www.georgexyz.com/geometric-design-equations.html"},{"title":"Python Standard Library Module Logging","text":"Python has a standard library module logging which is a very useful development tool. When a development environment does not have access to command line interface such as writing an extension for Inkscape, a programmer cannot call print function to output intermediate program variables. Instead, you use logging module to monitor program flow. The default logger is named root. You only need three lines of code to output some information to a log file. Predefined logging levels are debug, info, warning, error, and critical. By default, root logger only outputs messages with a severity level of warning and above. import logging logging . basicConfig ( level = logging . DEBUG , filename = 'logging.txt' ) logging . debug ( 'This is a debug message' ) Logging module defines many classes. Commonly used classes are Logger, LogRecord, Handler, and Formatter. Logger class is not instantiated directly. The first time call to module level function logging.getLogger(name) returns a Logger object. Subsequent calls to the function return a reference to the same Logger object. A typical example looks like this, logger = logging . getLogger ( __name__ ) f_handler = logging . FileHandler ( 'file.log' ) # StreamHandler f_handler . setLevel ( logging . ERROR ) f_format = logging . Formatter ( ' %(asctime)s - %(levelname)s - %(message)s ' ) f_handler . setFormatter ( f_format ) logger . addHandler ( f_handler ) logger . error ( 'This is an error' ) If you need a more versatile logging system, you create a config file or a dictionary and then load it using fileConfig or dictConfig methods. References An article Logging in Python in realpython.com site is a very nice introduction to the topic. Here is a link to the official Python logging module document .","tags":"posts","url":"https://www.georgexyz.com/python-logging.html","loc":"https://www.georgexyz.com/python-logging.html"},{"title":"PDF Reader Software PDFXchange Viewer","text":"Most office workers more or less deal with PDF files. PDFXchange Viewer has been my favorite PDF reader for several years. It is so good that I switched my calendar from paper copy to electronic PDF file. This is the type of software that I wish I could write as a developer. The software was produced by a Canadian company Tracker Software , and it has a free portable version which includes lots of useful features. Here is a quote from the website, PDF -XChange Viewer ‘Free Version' is free for private and commercial use, provided it is not bundled with other software for financial gain. The Viewer as well contains extra features and functions that are unlocked when you purchase a license for PDF -XChange Viewer PRO . It has a portable ZIP version which a user can extract files into any local directory. The size of extracted files is about 15MB . I only copy four files PDFXCview.exe , resource.dat , Portable.dat , and Settings.dat to new directories and it seems to work without problem. The free version contains many feathers. I mostly use two functions: line drawing and typewriter. I map the key l to line drawing and key w for typewriter. I also map key - to zoom out and = to zoom in, which is the same as in Inkscape . So, the advantages of PDFXchange View are, It is free but of really high quality; Easy to customize; and Small and portable.","tags":"posts","url":"https://www.georgexyz.com/pdfxchange-viewer.html","loc":"https://www.georgexyz.com/pdfxchange-viewer.html"},{"title":"Python Code to Save Emails in Gmail to PDF Files","text":"One of my work tasks requires me to save hundreds of emails in my work Gmail account to PDF files in local hard drive. I could do it manually spending hours saving emails, or I could write a python program to do the work. No doubt I prefer the second approach. A google search finds several online articles discussing how to do it. A typical method is to install a Chrome plugin for the browser, and the plugin will do the work. But granting permission to a plugin to read my work emails is not acceptable. After reading some articles, I settled on two methods. The first one is to select and export emails in Gmail to a .mbox file, then write a python program to read the .mbox file and save emails. The second one is discovered when I was reading the last chapter of Al Sweigart's wonderful book Automate The Boring Stuff With Python . This method uses the pyautogui module and involves writing a python program to simulate mouse button clicks and keyboard key presses to save emails. The program is like a person is clicking the mouse button and typing on the keyboard. Let's look at the first method. An article on Lifwire.com has step by step guide on how to save emails to a .mbox file. The python standard library modules mailbox and email can read emails in the .mbox file. I spent some time writing a python program, which also parses email content and extracts useful information from emails. The code structure looks like this. import mailbox import email.header import email.utils import time , datetime , argparse import re , csv , copy , os # for os.path.exists def parse_html ( message ): '''parse a message and return html_content''' if message . is_multipart (): content = '' . join ( part . get_payload ( decode = True ) . decode ( 'utf-8' ) for part in message . get_payload ()) html_content = content else : content = message . get_payload ( decode = True ) html_content = content . decode ( 'utf-8' ) return html_content def parse_date ( message ): '''return a date of message of format datetime''' date = message [ 'Date' ] dt_parse = email . utils . parsedate ( date ) timestamp = time . mktime ( dt_parse ) dt = datetime . datetime . fromtimestamp ( timestamp ) # dt of the message dt = dt + datetime . timedelta ( hours = 3 ) # email time has an offset return dt def parse_subject ( message ): subj = message [ 'Subject' ] s1 = ' ' . join ( subj . strip () . splitlines ()) # remove multiple \\n or ' ' s2 = ' ' . join ( s1 . split ()) return s2 # ... other methods for parsing email contents if __name__ == '__main__' : mbox = mailbox . mbox ( path ) save = True # flag for parse emails, not save them for message in mbox : # code to parse emails html = parse_html ( message ) # ... if save : fn = ' {} ' . format ( ... ) f = open ( fn , 'w' ) f . write ( html ) f . close () I find a major flaw in this approach a few days later. The Google archive system has a limit on the number of time a user is allowed to export emails to .mbox files. Once the daily limit (3 times on my account) is reached, it does not allow a user to export emails that day. The system simply gives a message \"Please try to create your archive again\". When I am reading the last chapter of Al Sweigart's book, I realize that the pyautogui module can be used for this task. Here is the code to save emails, # save_emails.py by Geroge Zhang on 2/1/2019 # The GMail window should be in a status shown in SaveEMails.png # The EMails should be in a folder(label), the program clicks next button # This program only works on my laptop # Chrome settings -> Advanced -> Privacy and security -> Content settings -> # pop-ups and redirects -> allow => add https://mail.google.com # setup the program import pyautogui # this requires installation import time pyautogui . PAUSE = 0.1 pyautogui . FAILSAFE = True TOTALEMAILS = 10 START = 1 nextButton = ( 1229 , 189 ) printButton = ( 1230 , 247 ) saveButton = ( 202 , 167 ) filenameBox = ( 878 , 443 ) saveDialog = ( 788 , 503 ) closeButton = ( 470 , 15 ) centerWindow = ( 683 , 7 ) print ( '>>> 5 Seconds to start <<<' ) time . sleep ( 5 ) ##print('Click window center to activate Gmail') ##pyautogui.click(centerWindow[0], centerWindow[1]) print ( 'Please click the first email in a label group' ) print ( '>>> 5 Seconds to start <<<' ) time . sleep ( 5 ) for i in range ( START , TOTALEMAILS + START ): print ( ' \\n Now click the print button' ) pyautogui . click ( printButton [ 0 ], printButton [ 1 ]) time . sleep ( 5 ) print ( 'Click the Save email button' ) pyautogui . click ( saveButton [ 0 ], saveButton [ 1 ]) time . sleep ( 1 ) print ( 'Click filename field' ) pyautogui . click ( filenameBox [ 0 ], filenameBox [ 1 ]) time . sleep ( . 5 ) pyautogui . press ( 'home' ) filename_prefix = ' {0:03} ' . format ( i ) + ' - ' pyautogui . typewrite ( filename_prefix ) time . sleep ( . 5 ) print ( 'Click the Save file button' ) pyautogui . click ( saveDialog [ 0 ], saveDialog [ 1 ]) time . sleep ( . 5 ) print ( 'Close the second window' ) pyautogui . click ( closeButton [ 0 ], closeButton [ 1 ]) time . sleep ( . 5 ) print ( 'Click next button' ) pyautogui . click ( nextButton [ 0 ], nextButton [ 1 ]) time . sleep ( . 5 ) print ( ' >>> Done <<< ' ) The program is able to save 1500 emails in about four hours. Depending on the network speed, the sleep seconds between tasks can be adjusted. Sometime the program may abort for some reason. Change the variables TOTALEMAILS and START at the beginning of the program to resume running. You need to manually save a few emails in Chrome browser to understand what the program is doing. How do I get the coordinates of the buttons on Gmail interface? The Al Sweigart book includes a mouseNow.py program. I simple write down the coordinates on a piece of paper and then type those coordinates into the program.","tags":"posts","url":"https://www.georgexyz.com/python-save-emails.html","loc":"https://www.georgexyz.com/python-save-emails.html"},{"title":"Python Optparse and Argparse Example","text":"Argparse module was in Python version 3.2 and up. It superseded optparse module. Inkscape 0.92 extension program inkex.py file was written many years ago with optparse module. I read several articles trying to understand how to use optparse and argparse modules. An example discussed in this blog post is very helpful. The article has an example program designed with two options. Run the program on command line with options and arguments shown on that blog, and the results indicate how optparse module works behind scene. Following code is a rewrite of the example with argparse. You can execute similar commands shown below and compare the results. #!/usr/bin/env python3 # argparse_example.py # This is a version using argparse # revised by GHZ on 2/2019 import argparse def main (): parser = argparse . ArgumentParser ( usage = 'usage: %(prog)s [options] filename' ) parser . add_argument ( '-x' , '--xhtml' , action = 'store_true' , dest = 'xhtml_flag' , default = False , help = 'create a XHTML template instead of HTML' ) parser . add_argument ( '-c' , '--cssfile' , action = 'store' , dest = 'cssfile' , default = 'style.css' , help = 'CSS file to link' , ) parser . add_argument ( 'filename' , nargs = '?' , # '*' for multiple files action = 'store' , help = 'the name of file to be processed' ) parser . add_argument ( '-V' , '--version' , action = 'version' , version = ' %(prog)s 1.0' ) args = parser . parse_args () print ( args ) print ( args . filename ) if __name__ == '__main__' : main () Here are the bash commands to test code. python argparse_example.py -h python argparse_example.py python argparse_example.py myfile.html python argparse_example.py -x -c mystyle.css myfile.html python argparse_example.py --xhtml --cssfile=mystyle.css myfile.html The argparse module contains many other options. Here is a link to Python argparse Offical Doc .","tags":"posts","url":"https://www.georgexyz.com/python-argparse.html","loc":"https://www.georgexyz.com/python-argparse.html"},{"title":"Vim Tips","text":"Ubuntu 18.04 comes with a stripped down version of Vim. If you want to use Vim for serious work, you want the full version. Vim Installation The default version is started via command vi . The vi --version command shows the version information. Note the Line 5 below shows \"Small version without GUI \". The output also contains the list of setting files Vim will load during startup. VIM - Vi IMproved 8.0 (2016 Sep 12, compiled Apr 10 2018 21:31:58) Included patches: 1-1453 Modified by pkg-vim-maintainers@lists.alioth.debian.org Compiled by pkg-vim-maintainers@lists.alioth.debian.org Small version without GUI. Features included (+) or not (-): +acl -extra_search -mouse_netterm -tag_old_static -arabic -farsi -mouse_sgr -tag_any_white ... +ex_extra -mouse_jsbterm +tag_binary system vimrc file: \"$VIM/vimrc\" user vimrc file: \"$HOME/.vimrc\" 2nd user vimrc file: \"~/.vim/vimrc\" user exrc file: \"$HOME/.exrc\" defaults file: \"$VIMRUNTIME/defaults.vim\" fall-back for $VIM: \"/usr/share/vim\" Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H -Wdate-time -g -O2 -fdebug-prefix-map=/build/vim-NQEcoP/vim-8.0.1453=. -fstack-... If you type command vim in bash, it will tell you that \"command vim not found\". Those three commands remove the existing vim-tiny and install the full version with GUI vim-gtk3 in Ubuntu 18.04 or Xubuntu. sudo apt-get remove vim-tiny sudo apt-get update sudo apt-get install vim-gtk3 You can then check the vim version by command vim --version . Basic Vim Settings Vim automatically loads ~/.vimrc file during startup. Some default settings of vim do not make sense. Below are some most basic vim settings. \" ~/.vimrc file set nocompatible \" required filetype plugin on syntax enable \"path and find, fuzzy file finder set path+=** \" search subdir recursively, find ... set wildmenu set number \" Set ignore case, highlight, and incremental searches set ignorecase set hlsearch set incsearch if exists(\"+lines\") set lines=32 endif if exists(\"+columns\") set columns=108 endif \" Ctrl + s to save file noremap <silent> <C-S> :update<CR> vnoremap <silent> <C-S> :<C-C>:update<CR> inoremap <silent> <C-S> <C-O>:update<CR> \"shortcut &#94;l to mute highlighting nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l> Vim Tips Startup Vim loads ~/.vimrc by default, and you can change the behavior by using -u option on command line. $vim -u ~/.simple.vimrc filename $vim -u NONE # do not load any config file Set Initial Console Window Size On Linux terminal, you can use set lines=50 columns=100 to set initial console size. I have those lines in my ~/.vimrc file. if exists(\"+lines\") set lines=32 endif if exists(\"+columns\") set columns=108 endif Source: an article on fandom.com. Fuzzy Find The following two settings help the :find command to do file fuzzy finding. set path+=** set wildmenu :find *cache # Press Tab key to find file name with cache Source: a video talk on youtube. Auto Complete Vim itself has auto complete function built in. In the insert mode, you can type a few letters such as ‘Com', and then press &#94;n to bring up auto complete menu. It is very handy when you are programming because you often need to type variable and class names multiple times on a file. &#94;x&#94;n search in this file, &#94; represents Ctrl key &#94;x&#94;f search filename &#94;x&#94;] search tag &#94;n search by default &#94;n &#94;p next prev on the menu &#94;y confirm selection, yes &#94;e exit menu Current Filename Command &#94;g shows the name of the current file. Or you can type the following vim commands. :echo @% :!ls %:p # will show absolute path of file Navigation Keys h j k l are the basic navigation commands in normal mode. Commands w b e jump cursor to next word, begin of word, or end of word. Other common navigation commands are listed below. gg move cursor to top G move cursor to bottom : <n> jump cursor to line number n, or <n>G &#94;e show an extra line &#94;y opposite of &#94;e &#94;d move down half screen &#94;u move up half screen % matching ( { or [ H, M, L move cursor to top, middle, and lower corner &#94;o go to old cursor position &#94;i go to next cursor position gj move down one displayed line when a long line is auto wrapped Common Shortcuts Vim is in a different league comparing to other text editors. It does not have some common shortcuts other editors have. But some of those shortcuts are so common, it is better to customize vim to support them. For example, the command :saveas is sometimes very convenient. The settings below add Ctrl+s shortcut for saving file. Command :update is like :write , but only write when buffer has been modified. noremap <silent> <C-S> :update<CR> vnoremap <silent> <C-S> :<C-C>:update<CR> inoremap <silent> <C-S> <C-O>:update<CR> This shortcut also needs a setting in .bashrc file to work. stty -ixon # stop tele-typewriter, # -ixon enable xon/xoff flow control -i By default command &#94;s freezes vim in Ubuntu Linux, and &#94;q un-freeze it. This stackoverflow Q&A explains it very well. Ctrl + s is a common command to terminals to stop updating, it was a way to slow the output so you could read it on terminals that did not have a scrollback buffer. Ctrl + q command gets terminal going again. Put this line in .bashrc to disable flow control for terminal entirely. Spell Check Vim has a built in spell checker. You use set spell to turn it on and set nospell to turn it off. Here are some other commands on how to use it. setlocal spell for current buffer only ]s move to next misspelled word [s previous misspelled word z= cursor on the word, list of suggested words zg the word is correct, add it to personal dictionary The spelllang settings is to specify the language, and the default is en . You can set it to en_us to specify American English. You can also use spellfile setting to specify a personal dictionary file for zg command. Source: an article on linux.com & a blog post by Jake Harding. GNOME Terminal Shortcuts The Linux Mint comes with Gnome terminal. You can open additional tabs by pressing shortcut Ctrl + Shift + t , and move to next tab by pressing Ctrl + PageDown . This does not necessarily relate to Vim, but I often use them so they are listed here. Another useful terminal shortcut is Ctrl + z which puts current application Vim in the background and suspended. After running some bash commands, you can type fg command to bring Vim back to foreground. Or you can use :! followed by a bash command to execute the command inside Vim. Copy and Paste via Clipboard Copying texts to and from Vim using the Ctrl + c and Ctrl + v does not work. The command &#94;c is to generate a signal which tells the current process to terminate, and command &#94;v invokes \"verbatim insert\" in bash (see an online article ) . You could use Gnome terminal shortcuts Ctrl + Shift + c and Ctrl + Shift + v , but sometimes it does not work very well. I often use the clipboard register ( \"+ ) to copy and paste texts in and out of Vim. Here are the steps to copy texts into Vim, Copy texts in another program such as Firefox. Alt + Tab switch focus to Vim. Use command \"+p to paste the texts. Here are the steps to copy texts out of Vim to another program. Use v command to visually select texts in Vim. Type command \"+y to copy the texts to clipboard. In another program, use &#94;v to paste the texts. There is an online Q&A on how to map &#94;c and &#94;v to copy and paste behavior, but I have not set it up in my .vimrc file. Work Sessions When you have 10 or more text files open in Vim and need to reboot your computer, you can use session commands to save the Vim work status and load them later. :mksession ~/work1.session save the current work status :source ~/work1.session load the saved session in Vim vim -S ~/work1.session bash command to load vim and work session Manage Buffers Text files opened in Vim are called buffers. You can open multiple files with bash command like this vim *.py , and all python files in current directory will open in Vim as buffers. The command :ls shows all buffers in current vim session. Note that command :!ls will execute a single bash command ls . On the list generated by the :ls command, % represents current buffer and # represents alternate buffer. You can switch between the current buffer and alternate buffer. The + symbol on the list represents the file has been modified but not saved. The commands listed below are for navigating between buffers. When writting Python programs in Vim, you can run the command :!python3 % to run the current file. :bnext, bprevious, bfirst, blast next, previous, first, and last buffer :b5 open buffer number 5 :bdelete 5, 6, 8 close buffer numbers 5, 6, and 8 :5,7bdelete delete buffer numbers 5, 6, and 7 :edit file1 open file1 as an additional buffer :find file1 open file1, this command also searches sub-directories :b# or &#94;6 switch between current buffer and alternate buffer Map Caps Lock Key Some people recommend to map CapsLock key to Esc key when using Vim. Stackoverflow has a Q&A on how to do it. The following two lines of code in .vimrc file will do the trick. When leaving Vim, it will remap the key back to Caps Lock. The xmodmap software is already installed in Linux Mint, so no installation is needed. au VimEnter * silent! !xmodmap -e 'clear Lock' -e 'keycode 0x42 = Escape' au VimLeave * silent! !xmodmap -e 'clear Lock' -e 'keycode 0x42 = Caps_Lock' I am used to press Esc key to enter normal mode, and I find the Caps Lock key is not as straightforward as the Escape key. Source: an stackoverflow Q&A Vim Command to Reflow Texts to 80 Columns. When writting articles in Vim, I often need to reflow texts after some editing. To reflow texts, the first step is to set the textwidth and the second step is to select texts and reflow with command gq . You can set the textwidth to 80 (:set textwidth=80 or :set tw=80), then use gg to move cursor to the start of the file and type gqG to reflow the whole article. The command gq also works with visual selection. You can use command vipgq to select the paragraph first and then reflow. Or you can use gqap to reflow current paragraph, and gq} reflow texts from current cursor to end of the paragraph. Note you can select a paragraph by typing vip or vap Command gw is similar to gq . Here is the quote from help page. gw: Format the lines that {motion} moves over. Similar to gq but puts the cursor back at the same position in the text. Source: an stackoverflow Q&A Run Commands on Multiple Lines If you want to run a normal mode command on a range of lines, you can use the normal command. For example if you want to comment out line 4 to 6 of .bashrc file, you can use V to select those lines and apply command :'<,'>normal i# to insert a character (#) in font of each line. # Load pyenv automatically by adding # the following to ~/.bashrc: export PATH=\"/home/george/.pyenv/bin:$PATH\" eval \"$(pyenv init -)\" eval \"$(pyenv virtualenv-init -)\" Source: Practical Vim Second Edition by Drew Neil Page 63, Tip 30 Links and References Vim Cheat Sheet is a nice single web page which includes command vim commands.","tags":"posts","url":"https://www.georgexyz.com/vim-tips.html","loc":"https://www.georgexyz.com/vim-tips.html"}]};